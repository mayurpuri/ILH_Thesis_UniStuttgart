<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Agilent.SA.Vsa.Interfaces</name>
    </assembly>
    <members>
        <member name="T:Agilent.SA.Vsa.Analog">
            <summary>Represents settings that are specific to analog hardware inputs.</summary>
            <remarks>
            	<para>You can access an instance of this class through an instance of the Application class.  For example:</para>
            	<para>app.Measurements.SelectedItem.Input.Analog</para>
            </remarks>
        </member>
        <member name="T:Agilent.SA.Vsa.RemotableObject">
            <summary>
            Provides the common base class for all abstract base classes defining the public API for the Keysight 89600 VSA Software.
            </summary>
            <remarks>
            Note that this class is intentionally split into two parts - this one, which is .NET 4.0 dependent and contains
            implementation used by Glacier, and the other part which is merely a place-holder and is intended
            to be targeted to either a .NET 3.5 or .NET 4.0 platform.
            </remarks>
            <summary>
            Provides the common base class for all classes defining the public API for the Keysight 89600 VSA software.
            </summary>
            <remarks>Inheritance from IRemoteNotifyPropertyInfoChanged added in version 14.00.</remarks>
        </member>
        <member name="T:Agilent.SA.VsaInternal.IObjectModel">
            <summary>
            Defines an interface to be implemented by classes that are part of a public API hierarchical object model.
            </summary>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IObjectModel.NotifyCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raise an event that indicates that the collection changed.
            </summary>
            <param name="e">Event args for the notification.</param>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IObjectModel.NotifyPropertyChanged(System.String)">
            <summary>
            Raise an event indicating that the specified property has changed.
            </summary>
            <param name="propertyName">Name of the property that changed.</param>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IObjectModel.NotifyPropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Raise an event indicating that the specified property has changed.  Use this so that renaming can 
            be done when refactoring without breaking notification calls.
            </summary>
            <typeparam name="T">Type to use.</typeparam>
            <param name="propertyReference">Reference to the property that changed.</param>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IObjectModel.NotifyPropertyInfoChanged(System.String)">
            <summary>
            Raise an event indicating that the specified property's PropertyInfo changed.
            </summary>
            <param name="propertyName">Name of the property whose PropertyInfo changed</param>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IObjectModel.NotifyPropertyInfoChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Raise an event indicating that the specified property's PropertyInfo has changed.  Use this so that renaming can 
            be done when refactoring without breaking notification calls.
            </summary>
            <typeparam name="T">Type to use.</typeparam>
            <param name="propertyReference">Reference to the property that changed.</param>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IObjectModel.SuspendMacroRecording">
            <summary>
            Suspend macro recording.
            </summary>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IObjectModel.ResumeMacroRecording">
            <summary>
            Resume macro recording.
            </summary>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IObjectModel.Restore(Agilent.SA.VsaInternal.RestoreModes)">
            <summary>
            Restore the object so that it is consistent with the underlying state.
            </summary>
            <remarks>
            Typically this will involve calling a property setter with the value obtained from the
            property getter.  If the state backing store is empty for that property then the getter
            for the property will have returned a default value and thus the setter will then set
            that default value into state.  There are also times when more complicated coercing, etc. is
            done to bring the object in to a consistent state with respect to other state or actual 
            hardware state, etc.
            </remarks>
            <param name="mode">The context of the restore call.</param>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IObjectModel.KeyFor(System.String)">
            <summary>
            Returns the state key for the named property.
            </summary>
            <param name="propertyName">The name of the property for which the state key is requested.</param>
            <returns>The state key for the named property, or the empty string in the case where the property
            does not have an associated state key.</returns>
        </member>
        <member name="P:Agilent.SA.VsaInternal.IObjectModel.Parent">
            <summary>
            Gets the parent object for this object in the hierarchical object model
            </summary>
        </member>
        <member name="P:Agilent.SA.VsaInternal.IObjectModel.KeyMap">
            <summary>
            Gets a dictionary that maps member names to state key names.  The member name is the key 
            and the value is a list of state key names.  If any of the values in state for the state keys
            changes then this map is used to determine which members to send a property notify event for.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.IRemoteNotifyPropertyChanged">
            <summary>
            This interface is the remotable version of the <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> interface. All
            objects deriving from <see cref="T:Agilent.SA.Vsa.RemotableObject"/> support this interface.
            </summary>
        </member>
        <member name="E:Agilent.SA.Vsa.IRemoteNotifyPropertyChanged.RemotePropertyChanged">
            <summary>
            This event is used internally to propagate <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> events across the remoting boundary. See
            <see cref="T:Agilent.SA.Vsa.NotifyPropertyChangedWrapper"/> for a description of how to receive <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>
            events for a given object.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.IPropertyInfo">
            <summary>
            The IPropertyInfo interface provides additional information about specific properties on an object.
            </summary>
            <remarks>
            This interface can be useful in determining what the valid values, limits, and suggested stepping is for a given property.  
            It can also be useful in determining if a given property is currently usable. 
            </remarks>
            <remarks>
            Note:  Not every property will have information about it.
            </remarks>
            <example>
            (app.Measurements.SelectedItem.Frequency as Vsa.IPropertyInfo).StepValue("Center").MaxValue;
            </example>
        </member>
        <member name="M:Agilent.SA.Vsa.IPropertyInfo.StepValue(System.String)">
            <summary>
            Gets a reference to an IStepValue interface for the specified property on the current object.
            </summary>
            <remarks>
            The IStepValue interface should be used immediately and not cached for later use since it only returns
            reliable information for the current state of the application.
            </remarks>
            <example>
            <code description="Get the maximum center frequency." lang="CS">
            (app.Measurements.SelectedItem.Frequency as IPropertyInfo).StepValue("Center").MaxValue;</code>
            </example>
            <param name="propertyName">Name of the property.</param>
            <returns>A reference to an IStepValue interface.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.IPropertyInfo.ValidValues``1(System.String)">
            <summary>
            Gets a list of valid values (currently settable values) for the specified property on the current object.
            </summary>
            <example>
            <code description="Get an array of currently valid input ranges." lang="CS">
            double[] ranges = (app.Measurements.SelectedItem.Input.Analog as IPropertyInfo).ValidValues&lt;double&gt;("Range");</code>
            </example>
            <typeparam name="T">Type for the valid values (normally the same as the type of the corresponding property they are for).</typeparam>
            <param name="propertyName">Name of the property to get valid values for.</param>
            <returns>Array of valid values.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.IPropertyInfo.IsEnabled(System.String)">
            <summary>
            Indicates whether the specified property is currently enabled (i.e. valid to use).
            </summary>
            <example>
            <code description="Determine whether the MixerLevel property is usable with the current hardware." lang="CS">
            (app.Measurements.SelectedItem.Input.Analog as IPropertyInfo).IsEnabled("MixerLevel");</code>
            </example>
            <param name="propertyName">Name of the property.</param>
            <returns>True/False indicating whether the specified property is currently enabled (valid to use).</returns>
        </member>
        <member name="E:Agilent.SA.Vsa.IPropertyInfo.PropertyInfoChanged">
            <summary>
            This event is invoked each time property info (such as ValidValues, IsEnabled, etc.) changes for a property.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.IRemoteNotifyPropertyInfoChanged">
            <summary>
            This interface is the remotable version of the <see cref="T:Agilent.SA.Vsa.IPropertyInfo"/> interface. All
            objects deriving from <see cref="T:Agilent.SA.Vsa.RemotableObject"/> support this interface.
            </summary>
            <version>14.00</version>
        </member>
        <member name="E:Agilent.SA.Vsa.IRemoteNotifyPropertyInfoChanged.RemotePropertyInfoChanged">
            <summary>
            This event is used internally to propagate <see cref="E:Agilent.SA.Vsa.IPropertyInfo.PropertyInfoChanged"/> events across the remoting boundary. See
            <see cref="T:Agilent.SA.Vsa.NotifyPropertyInfoChangedWrapper"/> for a description of how to receive <see cref="E:Agilent.SA.Vsa.IPropertyInfo.PropertyInfoChanged"/>
            events for a given object.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.RemotableObject"/> class.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.InitializeLifetimeService">
            <summary>
            Obtains a lifetime service object to control the lifetime policy for this instance.
            </summary>
            <returns>An object that controls the lifetime policy for this instance.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.CreateInstance``1">
            <summary>
            Dynamically creates a new instance of the component that exports interface T. The new
            instance is drawn either from the composition container of the caller, or if the requested
            type is a scoped type, from a new scoped child container.
            <para>
            This overload assumes exactly one part exports the requested interface.
            </para>
            </summary>
            <typeparam name="T">The exported interface type of the component to create.</typeparam>
            <returns>The new instance of the requested component type.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.CreateInstance``1(System.String)">
            <summary>
            Dynamically creates a new instance of the supplied contract name, cast to type T. The new
            instance is drawn either from the composition container of the caller, or if the requested
            type is a scoped type, from a new scoped child container.
            <para>
            This overload assumes exactly one part exports the requested interface.
            </para>
            </summary>
            <typeparam name="T">The type to which to cast the returned instance.</typeparam>
            <param name="contractName">The name of the export contract of the desired component.</param>
            <returns>The new instance of the requested component type.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.CreateInstance``2(System.Func{System.Lazy{``0,``1},System.Boolean})">
            <summary>
            Dynamically creates a new instance of the component that exports the interface T. The new
            instance is drawn either from the composition container of the caller, or if the requested
            type is a scoped type, from a new scoped child container.
            <para>
            The 'filter' parameter allows the caller to supply a filtering function in the event where
            there are multiple parts exporting T and one must be selected.
            </para>
            </summary>
            <typeparam name="T">The type to which to cast the returned instance.</typeparam>
            <typeparam name="TMetadataView">The type of the metadata view for the export. If null is
            supplied, the default "IDictionary&lt;string, object&gt;" view is used.</typeparam>
            <param name="filter">A delegate for a filtering function. The filter should return true
            for the desired export (singular) and false for all others.</param>
            <returns>The export that passed the filter.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.CreateInstance``2(System.String,System.Func{System.Lazy{``0,``1},System.Boolean})">
            <summary>
            Dynamically creates a new instance of the component that exports the interface TInstance. The new
            instance is drawn either from the composition container of the caller, or if the requested
            type is a scoped type, from a new scoped child container.
            <para>
            The 'filter' parameter allows the caller to supply a filtering function in the event where
            there are multiple parts exporting TInstance and one must be selected.
            </para>
            </summary>
            <typeparam name="T">The type to which to cast the returned instance.</typeparam>
            <typeparam name="TMetadataView">The type of the metadata view for the export. If null is
            supplied, the default "IDictionary&lt;string, object&gt;" view is used.</typeparam>
            <param name="contractName">The name of the export contract of the desired component.</param>
            <param name="filter">A delegate for a filtering function. The filter should return true
            for the desired export (singular) and false for all others.</param>
            <returns>The export that passed the filter.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.SatisfyImportsOnce(System.Object)">
            <summary>
            Allows the caller to request imports to be satisfied for the supplied component. This is
            used to satisfy imports on components that are created outside the scope of a composition
            container.
            </summary>
            <param name="part">The instance for which to satisfy imports.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.CheckAccess">
            <summary>
            Gets a value indicating whether the current thread is the GUI thread.
            </summary>
            <returns>true if the same thread as the GUI thread; otherwise false</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.CombineMeasurementPath(System.String)">
            <summary>
            Returns the full path to the supplied .MES file under the Glacier install directory
            for the version of Glacier with which this assembly is associated.
            </summary>
            <param name="fileName">The name of the .MES file.</param>
            <returns>The full path to the supplied .MES file.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.DebugException(System.Exception)">
            <summary>
            Logs information about an exception to the Debug category.
            </summary>
            <param name="ex">The exception to be logged.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.LogException(System.String,System.Exception)">
            <summary>
            Log the specified exception as a general type log along with a description for it.  
            </summary>
            <param name="description">A description.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.LogException(Agilent.SA.VsaInternal.TraceType,System.String,System.Exception)">
            <summary>
            Log the specified exception as the specified logging type along with a description for it.  
            </summary>
            <param name="traceType">The type of log entry.</param>
            <param name="description">A description.</param>
            <param name="ex">The exception.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.BuildExceptionMessage(System.String,System.Exception)">
            <summary>
            Build an error message string from the supplied <see cref="T:System.Exception"/> object, including information
            from inner exception(s) and <see cref="T:System.TypeLoadException"/>s. 
            </summary>
            <param name="prefix">A string to appear in front of the information for this exception.</param>
            <param name="exception">The exception from which to extract the message.</param>
            <returns>A string containing the compound error information for the supplied exception.</returns>
        </member>
        <member name="F:Agilent.SA.Vsa.RemotableObject._parent">
            <summary>
            The Parent property exists at this level in the hierarchy, but it is marked as virtual so that derived
            classes can override it and mark it with an appropriate "[Import(typeof(xxx))]" attribute. This allows
            us to use MEF to semi-automatically create the object model for macro recording.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.ResetParent(Agilent.SA.Vsa.RemotableObject)">
            <summary>
            Set the parent object for this object.
            </summary>
            <param name="parent">The parent object.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.Agilent#SA#VsaInternal#IObjectModel#SuspendMacroRecording">
            <summary>
            Suspend macro recording.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.SuspendMacroRecording">
            <summary>
            Suspend macro recording.  For sub-classes to override.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.Agilent#SA#VsaInternal#IObjectModel#ResumeMacroRecording">
            <summary>
            Resume macro recording.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.ResumeMacroRecording">
            <summary>
            Resume macro recording.  For sub-classes to override.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.BuildKeyMap">
            <summary>
            This method builds the mapping between public API property/method names, and the state
            key(s) for the underlying value. This method is virtual so derived classes can do anything they
            want, but the default implementation looks for VsaImplementation.StateKeyAttribute decorations on each public
            member of the class.
            </summary>
            <remarks>
            Note that this may be a one-to-many mapping. For example, in the Frequency class the Start
            and Stop properties do not have an underlying value in state. Instead, they are computed from
            the Center and Span properties (which do have underlying state). So, Start and Stop depend on
            both the VsaInternal.StateKey.INPUT_CENTER and VsaInternal.StateKey.INPUT_SPAN values in state.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.PostBuildKeyMap">
            <summary>
            This method is called after the key map is built. It gives the derived class a chance to 
            do something with the key map (like register the elements it contains for value changed
            callbacks).
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.ForceKeyMapRebuild">
            <summary>
            This method is used to enable a derived class to force a refresh of the key map.
            This is necessary in cases where the key mappings to the API objects change. This can
            happen when the index of an item within a collection is reflected in the key name,
            and an item is removed from the middle of a collection.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.CallerName(System.Reflection.MethodBase)">
            <summary>
            This function strips "special" decoration off member names like property setters and getters.
            </summary>
            <param name="caller">The method to get the name for.</param>
            <returns>The name after stripping it of special decorations.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.MyKey">
            <summary>
            This function returns the state key for the calling property or method.
            </summary>
            <remarks>
            Note that this member cannot be made virtual without adjusting the algorithm in the MyName
            property.
            </remarks>
            <returns>The state key for the calling property or method.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.TraceKeyFor(System.Reflection.MethodBase,System.Int32)">
            <summary>
            This function returns the channelized state key for the supplied member.
            </summary>
            <remarks>
            This method is a replacement for the MyKeyTrace(integer) method, which relied on stack walking to get the caller
            information. Stack walking is not only slower, but works unpredictably for Release builds (methods
            can be optimized away).
            </remarks>
            <param name="caller">A MethodBase object representing the member for which the state is is desired. This
            should be obtained using System.Reflection.MethodInfo.GetCurrentMethod().</param>
            <param name="traceIndex">Zero based trace index.</param>
            <returns>The requested key.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.MyKeyTrace(System.Int32)">
            <summary>
            This function returns the channelized state key for the calling property or method.
            </summary>
            <remarks>
            Note that this member cannot be made virtual without adjusting the algorithm in the MyName
            property.
            </remarks>
            <param name="traceIndex">Zero based trace index.</param>
            <returns>The state key.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.KeyFor(System.Reflection.MethodBase)">
            <summary>
            Gets the state key for the supplied member.
            </summary>
            <remarks>
            This method is a replacement for the KeyFor(MethodInfo.GetCurrentMethod()) method, which relied on stack walking to get the caller
            information. Stack walking is not only slower, but works unpredictably for Release builds (methods
            can be optimized away).
            </remarks>
            <param name="caller">A MethodBase object representing the member for which the state is is desired. This
            should be obtained using System.Reflection.MethodInfo.GetCurrentMethod().</param>
            <returns>The requested key.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.KeyFor(System.String)">
            <summary>
            This function is an overload of the more general KeyFor(IObjectModel, string) function. It
            returns the key for the member name on "this".
            </summary>
            <param name="memberName">The name of the public API member for which the key is being
            requested.</param>
            <returns>The key for the requested member. The empty string is returned if the key is not
            found.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.KeyFor(Agilent.SA.VsaInternal.IObjectModel,System.String)">
            <summary>
            Gets the state key for the supplied member name. Note that this member
            name is the public API member name (i.e. "Center"). It is virtual so that derived classes
            can decorate that key as appropriate.
            </summary>
            <remarks>
            Since this is potentially a one-to-many mapping, the returned state key is the first
            one found. This is OK because "KeyFor" is only used for the forward mapping (i.e. member
            name to state key name) which __is__ one-to-one. It is the reverse mapping (i.e. state
            key to member name) for which we need the many-to-one relationship.
            </remarks>
            <param name="obj">The object on which to look for the requested member.</param>
            <param name="memberName">The name of the public API member for which the key is being
            requested.</param>
            <returns>The key for the requested member. The empty string is returned if the key is not
            found.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.ParentKeyFor(System.String)">
            <summary>
            Gets the state key for the specified member name in the parent of this object.
            </summary>
            <param name="memberName">The name of the public API member for which the key is being requested.</param>
            <returns>The key for the requested member.  The empty string is returned if the key is not found.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.OnNotifyPropertyInfoChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            This bit of trickery allows us to emit PropertyInfo notifications for properties using a
            statement of the form:
                OnNotifyPropertyInfoChanged(() => Foo);
            for a property named "Foo" rather than:
                NotifyPropertyInfoChanged("Foo");
            The main difference is that the former is "refactor-friendly", whereas the
            latter is just a hard-coded constant that will be messed up by refactoring.
            </summary>
            <typeparam name="T">The type</typeparam>
            <param name="expression">A LambdaExpression accessing the property getter
            for the property for which a notification is to be generated.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.OnNotifyPropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Boolean)">
            <summary>
            This bit of trickery allows us to emit notifications for properties using a
            statement of the form:
                OnNotifyPropertyChanged(() => Foo);
            for a property named "Foo" rather than:
                OnNotifyPropertyChanged("Foo");
            The main difference is that the former is "refactor-friendly", whereas the
            latter is just a hard-coded constant that will be messed up by refactoring.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="expression">A LambdaExpression accessing the property getter
            for the property for which a notification is to be generated.</param>
            <param name="forceNotifyNow">Whether to force the notification to be sent out immediately without regard to change groups.  
            Be very careful about using a value of true.  In most cases a value of false should be used.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.OnNotifyPropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            This bit of trickery allows us to emit notifications for properties using a
            statement of the form:
                OnNotifyPropertyChanged(() => Foo);
            for a property named "Foo" rather than:
                OnNotifyPropertyChanged("Foo");
            The main difference is that the former is "refactor-friendly", whereas the
            latter is just a hard-coded constant that will be messed up by refactoring.
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="expression">A LambdaExpression accessing the property getter
            for the property for which a notification is to be generated.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.MemberName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the member name of the expression
            </summary>
            <typeparam name="T">The type.</typeparam>
            <param name="expression">The expression.</param>
            <returns>string of the member name</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.PostNotifyPropertyChangedCore(System.String)">
            <summary>
            A method to allow derived classes to perform operations just after a
            particular notify is sent.  We don't allow the OnNotifyPropertyChanged function
            to be virtual because we want to enforce that the base part of it is always
            called for a notify.  
            </summary>
            <remarks>
            This function can be useful for generating notifies for other properties that
            are coupled to another property.  Be careful to not get into a recursive endless loop.
            </remarks>
            <param name="propertyName">The name of the property that a notification was just sent out for.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.OnNotifyCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Method to notify that a collection changed. Not used here but is used in sub-classes.  It is defined on IObjectModel and therefore needs an implementation here. 
            </summary>
            <param name="e">Event argument for the notification.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.SafeInvokeDelegate(System.Delegate,System.Object[])">
            <summary>
            Invokes a delegate on the "correct" thread for the target of the delegate. 
            This should not be called from sub-classes other than RemotableCollection.
            </summary>
            <param name="theDelegate">The delegate to call.</param>
            <param name="args">Arguments for the delegate method.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.DefaultInvoke(System.Delegate,System.Object[])">
            <summary>
            Invokes the delegate without regard to threading.  This should not be called by sub-classes.
            </summary>
            <param name="del">The delegate to call.</param>
            <param name="args">Arguments for the delegate.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.System#ComponentModel#Composition#IPartImportsSatisfiedNotification#OnImportsSatisfied">
            <summary>
            We implement the IPartImportsSatisfied interface at the lowest level in the inheritance hierarchy
            to give us an easy place to insert tracing code. This implementation invokes a protected virtual
            OnImportsSatisfied() method to allow derived classes the opportunity to initialize themselves. This
            solution also solves a problem with MEF, namely that IPartImportsSatisfiedNotification.OnImportsSatisfied()
            is only invoked on the most derived class.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.SetContainerOwner">
            <summary>
            If a new container was created for this instance, we need to set the owner of the container to "this". Doing
            so will allow proper cleanup of the container when this object is disposed.
            </summary> 		
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.OnImportsSatisfied">
            <summary>
            Deriving classes should invoke base.OnImportsSatisfied() in order to give base classes a chance to
            initialize.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.Agilent#SA#VsaInternal#IObjectModel#Restore(Agilent.SA.VsaInternal.RestoreModes)">
            <summary>
            Restore the object.
            </summary>
            <param name="mode">Mode of restoration.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.Restore(Agilent.SA.VsaInternal.RestoreModes)">
            <summary>
            Restore the object.
            </summary>
            <remarks>
            <para>
            The default implementation of Restore() rattles through all the public properties of
            the class and, via reflection, does a "Property = Property" assignment for each writable
            property.
            </para>
            <para>
            In the case where the property is read-only and of type RemotableObject, it calls Restore
            on that object.
            </para>
            </remarks>
            <param name="mode">Mode of the restoration.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.Dispose(System.Boolean)">
            <summary>
            Dispose of resources.  
            </summary>
            <param name="isDisposing">Whether to dispose managed resources in addition to unmanaged ones.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.ThrowIfDisposed">
            <summary>
            Check if the object has already been disposed and if it has then throw an ObjectDisposedException.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.Dispose">
            <summary>
            Release allocated resources.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.Agilent#SA#Vsa#IPropertyInfo#StepValue(System.String)">
            <summary>
            Gets a reference to IStepValue for the specified property.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>IStepValue reference or null if none exists.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.StepValue(System.String)">
            <summary>
            Gets a reference to IStepValue for the specified property.  Override this to implement support for this in a sub-class.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns>IStepValue reference or null if none exists.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.Agilent#SA#Vsa#IPropertyInfo#ValidValues``1(System.String)">
            <summary>
            Gets an array of currently valid values for the specified property.
            </summary>
            <typeparam name="T">The type to convert the valid values to.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <returns>An array of valid values.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.ValidValues``1(System.String)">
            <summary>
            Gets an array of currently valid values for the specified property.  Override this to implement support for this in a sub-class.
            </summary>
            <typeparam name="T">The type to convert the valid values to.</typeparam>
            <param name="propertyName">The name of the property.</param>
            <returns>An array of valid values.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.NotifyPropertyInfoChanged(System.String)">
            <summary>
            Send a PropertyInfoChanged notification for the specified property.
            </summary>
            <param name="propertyName">The name of the property whose information changed.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.Agilent#SA#Vsa#IPropertyInfo#IsEnabled(System.String)">
            <summary>
            Gets a value indicating whether the specified property is currently enabled (functional).
            </summary>
            <param name="propertyName">The name of the property.</param>
            <returns>true if enabled; otherwise false</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.IsEnabled(System.String)">
            <summary>
            Gets a value indicating whether the specified property is currently enabled (functional).  
            Override this method to implement support for this in a sub-class.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <returns>true if enabled; otherwise false</returns>
        </member>
        <member name="P:Agilent.SA.Vsa.RemotableObject.App">
            <summary>
            Gets a reference to the Application object.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.RemotableObject.MacroRecorder">
            <summary>
            Gets a reference to the MacroRecorder object.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.RemotableObject.LogService">
            <summary>
            Gets a reference to the logging service.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.RemotableObject.GuiContext">
            <summary>
            Gets a TaskScheduler representing the synchronization context for the GUI thread.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.RemotableObject.GlacierInstallPath">
            <summary>
            Gets the Glacier installation directory for the Glacier release associated
            with this version of the Interfaces assembly. We need this information to be
            able to locate other, associated files (like .MES files).
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.RemotableObject.Parent">
            <summary>
            Gets or sets the parent object for this object in a hierarchical object model.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.RemotableObject.MyName">
            <summary>
            Gets the name of the member that is calling "MyKey". It is purposely
            "private" because it is sensitive to the contents of the stack frame.
            </summary>
            <remarks>
            The algorithm is to walk up the stack, starting from the caller of this property, looking
            for the first non-private member that is implemented on a class other than RemotableObject.
            This will catch all "normal" members implementing our public interface, but will exclude
            any partial methods used to provide shared implementation in an abstract base class (see
            the AllocationBase class in LTE). Note that this relies on the fact that partial method
            implementations are implicitly private. This algorithm also relies on the assumption that
            MyName and all its direct callers are implemented in RemotableObject.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.RemotableObject.KeyContext">
            <summary>
            Gets the context for generating a key (can be used to add a suffix or prefix to the key).
            </summary>
            <remarks>
            <para>
            This property allows a derived class to specify a context in which a dictionary key is wrapped. It allows
            the keys to be decorated with additional context to make it specific to a user, a burst or some other
            context. The string is expected to be a valid string format with a single substitution parameter. A null
            or empty string causes the key to be returned undecorated.
            </para>
            <para>
            For example, if the KeyContext is "DemodLTE_DL_User_1_{0}" and the key is "Include", then KeyFor(MethodInfo.GetCurrentMethod())
            will return "DemodLTE_DL_User_1_Include".
            </para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.RemotableObject.StateRef">
            <summary>
            Gets a handle to the IStateRef interface for the current object. An object can
            be associated with different state objects depending on whether it lives below the
            Measurement object in the object model, or elsewhere.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.RemotableObject.StateRef2">
            <summary>
            Gets a handle to the IStateRef2 interface for the current object. An object can
            be associated with different state objects depending on whether it lives below the
            Measurement object in the object model, or elsewhere.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.RemotableObject.IsNotifyChange">
            <summary>
            Gets a value indicating whether there are any listeners for local or remote PropertyChanged
            events.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.RemotableObject.IsDisposed">
            <summary>
            Gets a value indicating whether the object has been disposed. If an object has been disposed
            any attempt to use it will lead to an ObjectDisposedException being thrown.
            </summary>
        </member>
        <member name="E:Agilent.SA.Vsa.RemotableObject.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
            <remarks>
            The PropertyChanged event cannot be used directly when crossing an <see cref="T:System.AppDomain"/> boundary, which
            occurs when accessing the Keysight 89600 VSA software application programming interface (API) from a macro
            or external client application. See <see cref="T:Agilent.SA.Vsa.NotifyPropertyChangedWrapper"/> for information on how
            to receive PropertyChanged notifications.
            </remarks>
            <seealso cref="T:Agilent.SA.Vsa.NotifyPropertyChangedWrapper"/>
        </member>
        <member name="E:Agilent.SA.Vsa.RemotableObject.RemotePropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
            <remarks>
            The RemotePropertyChanged event is a remotable version of the <see cref="E:Agilent.SA.Vsa.RemotableObject.PropertyChanged"/> event. This event
            is used internally by the Keysight 89600 VSA software to propagate <see cref="E:Agilent.SA.Vsa.RemotableObject.PropertyChanged"/>
            events to client applications. See <see cref="T:Agilent.SA.Vsa.NotifyPropertyChangedWrapper"/> for details on how to receive
            <see cref="E:Agilent.SA.Vsa.RemotableObject.PropertyChanged"/> events.
            </remarks>
            <seealso cref="T:Agilent.SA.Vsa.NotifyPropertyChangedWrapper"/>
        </member>
        <member name="E:Agilent.SA.Vsa.RemotableObject.PropertyInfoChanged">
            <summary>
            Occurs when secondary information about a property, such as limits, changes.
            </summary>
            <remarks>
            The PropertyInfoChanged event cannot be used directly when crossing an <see cref="T:System.AppDomain"/> boundary, which
            occurs when accessing the Keysight 89600 VSA software application programming interface (API) from a macro
            or external client application. See <see cref="T:Agilent.SA.Vsa.NotifyPropertyInfoChangedWrapper"/> for information on how
            to receive PropertyInfoChanged notifications.
            </remarks>
            <seealso cref="T:Agilent.SA.Vsa.NotifyPropertyInfoChangedWrapper"/>
        </member>
        <member name="E:Agilent.SA.Vsa.RemotableObject.RemotePropertyInfoChanged">
            <summary>
            Occurs when secondary information about a property, such as limits, changes.
            </summary>
            <remarks>
            The RemotePropertyInfoChanged event is a remotable version of the <see cref="E:Agilent.SA.Vsa.RemotableObject.PropertyInfoChanged"/> event. This event
            is used internally by the Keysight 89600 VSA software to propagate <see cref="E:Agilent.SA.Vsa.RemotableObject.PropertyInfoChanged"/>
            events to client applications. See <see cref="T:Agilent.SA.Vsa.NotifyPropertyInfoChangedWrapper"/> for details on how to receive
            <see cref="E:Agilent.SA.Vsa.RemotableObject.PropertyInfoChanged"/> events.
            </remarks>
            <seealso cref="T:Agilent.SA.Vsa.NotifyPropertyInfoChangedWrapper"/>
            <version>14.00</version>
        </member>
        <member name="T:Agilent.SA.Vsa.RemotableObject.ObjectMap">
            <summary>
            Do not implement IDisposable for this class and use it to release <see cref="P:Agilent.SA.Vsa.RemotableObject.ObjectMap.ExportObj"/>. The reason is that when
            an entire container is being disposed, we need to remove entries for that container from _containerMap
            without trying to release export objects (the whole container is going away).
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.RemotableObject.LeaseSponsor">
            <summary>
            The LeaseSponsor class is a very simplistic remoting lease sponsor. It simply returns
            the RenewOnCallTime for every lease for which it is acting as a sponsor.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.RemotableObject.GuiContextTaskScheduler">
            <summary>Provides a task scheduler that targets a specific SynchronizationContext.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.RemotableObject.GuiContextTaskScheduler._tasks">
            <summary>The queue of tasks to execute, maintained for debugging purposes.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.RemotableObject.GuiContextTaskScheduler._context">
            <summary>The target context under which to execute the queued tasks.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.RemotableObject.GuiContextTaskScheduler._threadId">
            <summary>The target thread under which to execute the queued tasks.</summary>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.GuiContextTaskScheduler.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.RemotableObject.GuiContextTaskScheduler"/> class.</summary>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.GuiContextTaskScheduler.#ctor(System.Threading.SynchronizationContext,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.RemotableObject.GuiContextTaskScheduler"/> class
            with the specified SynchronizationContext.
            </summary>
            <param name="context">The SynchronizationContext under which to execute tasks.</param>
            <param name="threadId">The managed thread ID under which to execute tasks.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.GuiContextTaskScheduler.QueueTask(System.Threading.Tasks.Task)">
            <summary>Queues a task to the scheduler for execution on the I/O ThreadPool.</summary>
            <param name="task">The Task to queue.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.GuiContextTaskScheduler.TryExecuteTaskInline(System.Threading.Tasks.Task,System.Boolean)">
            <summary>Tries to execute a task on the current thread.</summary>
            <param name="task">The task to be executed.</param>
            <param name="taskWasPreviouslyQueued">Not used.</param>
            <returns>Whether the task could be executed.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableObject.GuiContextTaskScheduler.GetScheduledTasks">
            <summary>Gets an enumerable of tasks queued to the scheduler.</summary>
            <returns>An enumerable of tasks queued to the scheduler.</returns>
        </member>
        <member name="P:Agilent.SA.Vsa.RemotableObject.GuiContextTaskScheduler.MaximumConcurrencyLevel">
            <summary>Gets the maximum concurrency level supported by this scheduler.</summary>
        </member>
        <member name="M:Agilent.SA.Vsa.Analog.AutoRange">
            <summary>
            Performs a one-shot auto-range operation on all channels.
            </summary>
            <remarks>
            	<para>New behavior with version 14.0: Now the AutoRange method includes a Measurement.Restart so that, with an autorange, a new measurement is always done.
            Previously, if the AutoRange method was called while the measurement was paused, the AutoRange function would not be performed until the next measurement was
            initiated.</para>
            	<para>If the measurement is in single mode when AutoRange is called then only one measurement is done and the measurement is again paused. If the measurement is
            in continuous mode when AutoRange is called then continuous measurements are started.</para>
            	<para>The <see cref="F:Agilent.SA.Vsa.StatusBits.Ranging"/> bit can be checked to determine when AutoRange is finished. When using single mode then the <see cref="M:Agilent.SA.Vsa.Measurement.WaitForMeasurementDone"/>
            method may also be used to determine when the AutoRange measurement has completed.</para>
            	<para>Do not make additional API calls that might affect the measurement until the AutoRange measurement is done otherwise the AutoRange measurement may be
            aborted.</para>
            	<para>Good programming practice for using the AutoRange method in your code is as follows:</para>
            	<para>1. Put the measurement in single sweep mode. <see cref="P:Agilent.SA.Vsa.Measurement.IsContinuous">See IsContinuous</see>.</para>
            	<para>2. Setup measurement parameters in a change group. <see cref="M:Agilent.SA.Vsa.Measurement.NewChangeGroup">See NewChangeGroup</see>.</para>
            	<para>3. Outside the change group, call AutoRange.</para>
            	<para>4. Call <see cref="M:Agilent.SA.Vsa.Measurement.WaitForMeasurementDone"/> (or check the <see cref="F:Agilent.SA.Vsa.StatusBits.Ranging">Ranging</see> or <see cref="F:Agilent.SA.Vsa.StatusBits.MeasurementDone">MeasurementDone</see> StatusBits) to wait
            for the auto range measurement to finish before making other API calls.</para>
            	<para>There is no need to call Measurement.Restart since the AutoRange method will restart the measurement.</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Analog.IsCouplePairedChannels">
            <summary>Gets or sets a value indicating whether input parameters of paired channels (input channels that are part of the same logical channel, like I+jQ) are coupled.</summary>
            <remarks>
            	<para>This is usually used to force range related parameters to be coupled when using I+jQ channel configurations 
            where it is desirable for the I and Q input channels to be coupled with respect to input range.</para>
            	<para>
            When enabled, the following properties in paired analog input channels will be coupled.
            <list type="bullet"><item><see cref="P:Agilent.SA.Vsa.Analog.Coupling">Coupling (AC/DC)</see></item><item><see cref="P:Agilent.SA.Vsa.Analog.Range"/></item><item><see cref="P:Agilent.SA.Vsa.Analog.RefImpedance"/></item><item><see cref="P:Agilent.SA.Vsa.Analog.RefImpedanceIsConnection"/></item><item><see cref="P:Agilent.SA.Vsa.Analog.Connection"/></item><item><see cref="P:Agilent.SA.Vsa.Analog.Impedance"/></item><item><see cref="P:Agilent.SA.Vsa.Analog.MixerLevel"/></item></list></para>
            	<para>
            When coupled, setting the above parameters on either input channel in a logical channel (such as the I input channel that
            is used in an I+jQ logical channel) will automatically set the parameter on the other channel paired channel to the same value.
            </para>
            </remarks>
            <value>True if parameters should be coupled for channels that are part of the same logical channel; otherwise false.  
            The default is true.</value>
        </member>
        <member name="P:Agilent.SA.Vsa.Analog.Coupling">
            <summary>
            Gets or sets the input coupling (either AC or DC).
            </summary>
            <remarks>
            	<para>For multi-channel hardware, Coupling can be set independently for each channel or all channels can be set to the same value. To set the Coupling for an
            individual channel, use the <see cref="P:Agilent.SA.Vsa.AnalogChannel.Coupling">Coupling</see> property on the appropriate channel. Individual channel settings are available via the <see cref="P:Agilent.SA.Vsa.Analog.Channels"/>
            collection. To set the Coupling for all channels to the same value, set the value of this property and all channels' Coupling will be set to the same
            value.</para>
            	<para>When queried, this property always returns the value for the first channel. For multi-channel hardware, the input Coupling for an individual channel can be
            retrieved via the <see cref="P:Agilent.SA.Vsa.AnalogChannel.Coupling">Coupling</see> property on the appropriate channel. Individual channel settings are available via the <see cref="P:Agilent.SA.Vsa.Analog.Channels"/>
            collection.</para>
            </remarks>
            <value>Whether the input is AC or DC coupled.  The default is AC.  
            Setting the value causes the value to be set on all channels.  Getting the value returns the value from the first channel.</value>
        </member>
        <member name="P:Agilent.SA.Vsa.Analog.Range">
            <summary>
            Gets or sets the input range (in Vpk) of the input channel.
            </summary>
            <remarks>
            	<para>Most hardware only allows a limited set of allowable values for the input range, which is dependent upon the Adc hardware, down converter, and
            input/calibrator module currently being used. The range specified is rounded up to the next largest available range.</para>
            	<para>The <see cref="M:Agilent.SA.Vsa.IPropertyInfo.ValidValues``1(System.String)">ValidValues&lt;T&gt;</see>("Range") method can be used to retrieve a list of valid ranges. When that method is used for
            Range on this object it will return the valid values of range for the first channel.</para>
            	<para>For multi-channel hardware, Range can be set independently for each channel or all channels can be set to the same value. To set the Range for an individual
            channel, use the <see cref="P:Agilent.SA.Vsa.AnalogChannel.Range">Range</see> property on the appropriate channel. Individual channel settings are available via the <see cref="P:Agilent.SA.Vsa.Analog.Channels"/> collection. To
            set the Range for all channels to the same value, set this property and all the channels' Range values will be set to the specified Range value.</para>
            	<para>When queried, this property always returns the value for the first channel. For multi-channel hardware, the Range for an individual channel can be retrieved
            via the <see cref="P:Agilent.SA.Vsa.AnalogChannel.Range">Range</see> property on the appropriate channel. Individual channel settings are available via the <see cref="P:Agilent.SA.Vsa.Analog.Channels"/> collection.</para>
            </remarks>
            <value>The range of the input channel.  The default is 10.0 Vpk unless the hardware is not capable of that in which case it 
            is coerced to the highest value possible with the current hardware.  Setting the value causes the value to be set on all channels.
            Getting the value returns the value from the first channel.</value>
        </member>
        <member name="P:Agilent.SA.Vsa.Analog.Connection">
            <summary>
            Gets or sets the input connection type (Single Ended or Differential).
            </summary>
            <remarks>
            	<para>The <see cref="M:Agilent.SA.Vsa.IPropertyInfo.ValidValues``1(System.String)">ValidValues&lt;T&gt;</see>("Connection") method can be used to retrieve a list of valid connections for the current
            hardware. When the ValidValues method is used on this object it will return the valid values of Connection for the first channel.</para>
            	<para>For multi-channel hardware, Connection can be set independently for each channel or all channels can be set to the same value. To set the Connection for an
            individual channel, use the <see cref="P:Agilent.SA.Vsa.AnalogChannel.Connection">Connection</see> property on the appropriate channel. Individual channel settings are available via the
            <see cref="P:Agilent.SA.Vsa.Analog.Channels"/> collection. To set the Connection property for all channels, set this property and all the channels' Connection property will be set to the same
            value.</para>
            	<para>When queried, this property always returns the value for the first channel. For multi-channel hardware, the Connection for an individual channel can be
            retrieved via the <see cref="P:Agilent.SA.Vsa.AnalogChannel.Connection">Connection</see> property on the appropriate channel. Individual channel settings are available via the <see cref="P:Agilent.SA.Vsa.Analog.Channels"/>
            collection.</para>
            </remarks>
            <value>The connection of the input channel.  The default is Single Ended.  Setting the value causes the value to be set on all channels.
            Getting the value returns the value from the first channel.</value>
        </member>
        <member name="P:Agilent.SA.Vsa.Analog.Impedance">
            <summary>
            Gets or sets the impedance for the input connection.
            </summary>
            <remarks>
            <para>
            The <see cref="M:Agilent.SA.Vsa.IPropertyInfo.ValidValues``1(System.String)">ValidValues&lt;T&gt;</see>("Impedance") method can be used to retrieve a 
            list of valid impedances for the current hardware. When that method is used on this object it will return the valid values 
            of impedance for the first channel.
            </para>
            <para>
            For multi-channel hardware, Impedance can be set independently for each channel
            or all channels can be set to the same value. To set the Impedance for an individual channel, 
            use the <see cref="P:Agilent.SA.Vsa.AnalogChannel.Impedance">Impedance</see> property on the appropriate
            channel. Individual channel settings are available via the <see cref="P:Agilent.SA.Vsa.Analog.Channels"/> collection. To
            set the Impedance for all channels to the same value, set the value of this property. 
            It will take care of iterating through all the channels and setting the same value for them.
            </para>
            <para>
            When queried, this property always returns the value for the first channel. For multi-channel hardware,
            the Impedance for an individual channel can be retrieved via the <see cref="P:Agilent.SA.Vsa.AnalogChannel.Impedance">Impedance</see> 
            property on the appropriate channel. Individual channel settings are available via the <see cref="P:Agilent.SA.Vsa.Analog.Channels"/> collection.
            </para>
            </remarks>
            <value>The impedance of the input channel.  The default is 50 ohms unless the hardware is not capable of that.  
            Setting the value causes the value to be set on all channels.
            Getting the value returns the value from the first channel.</value>
        </member>
        <member name="P:Agilent.SA.Vsa.Analog.RefImpedance">
            <summary>
            Gets or sets the reference impedance for the channel.
            </summary>
            <remarks>
            	<para>For multi-channel hardware, RefImpedance can be set independently for each channel or all channels can be set to the same value. To set the Impedance for an
            individual channel, use the <see cref="P:Agilent.SA.Vsa.AnalogChannel.RefImpedance">RefImpedance</see> property on the appropriate channel. Individual channel settings are available via the
            <see cref="P:Agilent.SA.Vsa.Analog.Channels"/> collection. To set the RefImpedance for all channels to the same value, set the value of this property and all the channels' RefImpedance will
            be set to the specified value.</para>
            	<para>When queried, this property always returns the value for the first channel. For multi-channel hardware, the RefImpedance for an individual channel can be
            retrieved via the <see cref="P:Agilent.SA.Vsa.AnalogChannel.RefImpedance">RefImpedance</see> property on the appropriate channel. Individual channel settings are available via the <see cref="P:Agilent.SA.Vsa.Analog.Channels"/>
            collection.</para>
            	<para>
            		<strong>Note:</strong>
            		<see cref="P:Agilent.SA.Vsa.Analog.RefImpedanceIsConnection"/> must be false in order to be able to set this value.</para>
            </remarks>
            <value>The reference impedance of the input channel.  The default is the same as the connection <see cref="P:Agilent.SA.Vsa.Analog.Impedance"/> (usually 50 Ohms).
            Setting the value causes the value to be set on all channels.
            Getting the value returns the value from the first channel.</value>
        </member>
        <member name="P:Agilent.SA.Vsa.Analog.RefImpedanceIsConnection">
            <summary>
            Gets or sets a value indicating whether <see cref="P:Agilent.SA.Vsa.Analog.RefImpedance">the reference impedance</see> follows the connector impedance.
            </summary>
            <remarks>
            	<para>Setting RefImpedanceIsConnection to True causes the value of RefImpedance to be set so it is identical to the impedance value of the connection.</para>
            	<para>For multi-channel hardware, RefImpedanceIsConnection can be set independently for each channel or all channels can be set to the same value. To set the
            Impedance for an individual channel, use the <see cref="P:Agilent.SA.Vsa.AnalogChannel.RefImpedanceIsConnection">RefImpedanceIsConnection</see> property on the appropriate channel. Individual
            channel settings are available via the <see cref="P:Agilent.SA.Vsa.Analog.Channels"/> collection. To set the RefImpedanceIsConnection for all channels to the same value, set the value of this
            property and all the channels' RefImpedanceIsConnection will be set to the specified value.</para>
            	<para>When queried, this property always returns the value for the first channel. For multi-channel hardware, the RefImpedanceIsConnection for an individual
            channel can be retrieved via the <see cref="P:Agilent.SA.Vsa.AnalogChannel.RefImpedanceIsConnection">RefImpedanceIsConnection</see> property on the appropriate channel. Individual channel
            settings are available via the <see cref="P:Agilent.SA.Vsa.Analog.Channels"/> collection.</para>
            	<para>
            		<strong>Note:</strong>
            		<see cref="P:Agilent.SA.Vsa.Analog.RefImpedanceIsConnection"/> must be false in order to set the <see cref="P:Agilent.SA.Vsa.Analog.RefImpedance"/> property.</para>
            </remarks>
            <value>Whether the reference impedance is the same as the input impedance.  The default is true.
            Setting the value causes the value to be set on all channels.
            Getting the value returns the value from the first channel.</value>
        </member>
        <member name="P:Agilent.SA.Vsa.Analog.MixerLevel">
            <summary>
            Gets or sets the mixer level in dB relative to the factory default setting for the input channel.
            </summary>
            <remarks>
            	<para>The mixer level property allows control over the compromise between noise and distortion performance of the acquisition hardware. The value is in dB
            relative to the factory default setting for the particular hardware in use. Different front ends support different values for this parameter. Both the
            supported range and quantization may vary. The requested setting will be rounded to the nearest supported setting. The actual setting used can be verified by
            reading the property immediately after setting it. Some hardware does not support control of the mixer level. For these front ends, the setting will be
            restricted to 0 dB.</para>
            	<para>The <see cref="M:Agilent.SA.Vsa.IPropertyInfo.ValidValues``1(System.String)">ValidValues&lt;T&gt;</see>("MixerLevel") method can be used to retrieve a list of valid mixer levels for the current
            hardware. When that method is used on this object it will return the valid values of mixer levels for the first channel.</para>
            	<para>The <see cref="M:Agilent.SA.Vsa.IPropertyInfo.IsEnabled(System.String)">IsEnabled</see>("MixerLevel") method can be used to determine whether this property is supported or not with the current
            hardware. IsEnabled will return whether this property is supported by the first channel.</para>
            	<para>For multi-channel hardware, MixerLevel can be set independently for each channel or all channels can be set to the same value. To set the MixerLevel for an
            individual channel, use the <see cref="P:Agilent.SA.Vsa.AnalogChannel.MixerLevel">MixerLevel</see> property on the appropriate channel. Individual channel settings are available via the
            <see cref="P:Agilent.SA.Vsa.Analog.Channels"/> collection. To set the MixerLevel for all channels to the same value, set the value of this property and all channels will be set to
            the specified MixerLevel value.</para>
            	<para>When queried, this property always returns the value for the first channel. For multi-channel hardware, the MixerLevel for an individual channel can be
            retrieved via the <see cref="P:Agilent.SA.Vsa.AnalogChannel.MixerLevel">MixerLevel</see> property on the appropriate channel. Individual channel settings are available via the <see cref="P:Agilent.SA.Vsa.Analog.Channels"/>
            collection.</para>
            </remarks>
            <value>The mixer level of the input channel.  The default is 0 dB.  
            Setting the value causes the value to be set on all channels.
            Getting the value returns the value from the first channel.</value>
        </member>
        <member name="P:Agilent.SA.Vsa.Analog.Channels">
            <summary>Gets the collection of <see cref="T:Agilent.SA.Vsa.AnalogChannel"/> objects representing the per-channel analog input settings.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.ApplicationFactory">
            <summary>
            This class is a factory class for creating remote connections to the
            Keysight 89600 VSA Software. There are a variety of Create()
            methods for obtaining different types of connections.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.ApplicationFactory.Create">
            <summary>
            This method returns a handle to the <see cref="T:Agilent.SA.Vsa.Application"/> object of an already running instance
            of Keysight 89600 VSA software, if any.
            </summary>
            <remarks>
            	<para>If there are no instances of Keysight 89600 VSA running, a new instance is not created.</para>
            	<para>On a 64-bit version of Windows, the Create() method will return a reference to the 64-bit version of the VSA when the version of
            the <em>Agilent.SA.Vsa.VsaInterfaces</em> assembly referenced by your program is 15.00 or later. When your program references an earlier version, the
            32-bit version of the VSA is the default.</para>
            	<para>You can change the default by setting the <strong>Utilities &gt; Startup Preferences &gt; Programmatic Startup</strong> parameter. You can also specify
            whether to get a handle to a 32-bit or 64-bit instance by using the other <see cref="O:Agilent.SA.Vsa.ApplicationFactory.Create">overloads</see> of the Create() method.</para>
            </remarks>
            <returns>A handle to an Application object. If no instances of Keysight 89600 VSA are running, null is returned. If
            multiple instances are running, the returned handle is always for the instance with the lowest port number.</returns>
            <example>
            	<code title="Example" description="" lang="CS">
            // First, try getting a reference to an already running 89600 VSA.
            Application app = ApplicationFactory.Create();
            bool isCreated = false; 
             
            if (app == null)
            {
                // There is no running 89600 VSA; try to create a new one.
                app = ApplicationFactory.Create(true, null, null, -1);
                isCreated = true; 
            }
             
            app.IsVisible = true;                // Make the main window visible
            app.Title = "Custom title";          // Label the VSA main window</code>
            </example>
        </member>
        <member name="M:Agilent.SA.Vsa.ApplicationFactory.Create(System.Boolean,System.String,System.String,System.Int32)">
            <summary>
            This method returns a handle to the <see cref="T:Agilent.SA.Vsa.Application"/> object of an instance of Keysight 89600 VSA
            that is listening on the indicated port number on the indicated host, optionally creating 
            an instance if requested.
            </summary>
            <param name="startNewCopy">If false, attempts to connect to an already-running instance of Agilent
            89600 VSA software. If true, attempts to start a new instance. Note that this method will wait indefinitely
            for the new application to start. If you wish to specify a maximum time to wait, see the
            <see cref="M:Agilent.SA.Vsa.ApplicationFactory.Create(System.Boolean,System.String,System.String,System.Int32,System.Int32)"/> overload.</param>
            <param name="version">
            	<para>Specifies the version string of the version to start. This string is of the form nn.n[_Modifier], where "n" is a single digit and "_Modifier" is an optional
            modifier used for special releases (i.e. "_Beta2").</para>
            	<para>If null or the empty string is specified, the latest available version is used. If a non-null string is specified and the requested version is not
            installed, a <see cref="T:System.ArgumentException"/> is raised. This parameter is ignored if <paramref name="startNewCopy"/> is false.</para>
            	<para>You can find the version string from a currently running VSA by opening the About dialog (<strong>Help &gt; About</strong>).</para>
            </param>
            <param name="hostName">The hostname is currently restricted to the name of the host on which the calling
            application is running, or the value 'localhost'. If this parameter is null or the empty string, 'localhost'
            is assumed. It is currently not possible to programmatically connect to or start an instance of Keysight 89600 VSA software
            on a remote computer.</param>
            <param name="portNumber">The TCP port number to use for the connection. If set to a value less than
            0, the first available port number greater than or equal to 60189 is used. If <paramref name="startNewCopy"/> is false, there must
            already be a running instance of Keysight 89600 VSA. If <paramref name="startNewCopy"/>
            is true, the specified port number must not already be in use. If it is, an <see cref="T:System.ArgumentException"/>
            is thrown.</param>
            <remarks>
            	<para>If <paramref name="startNewCopy"/> is false, an instance that is listening at the indicated port number must already be running. If <paramref name="portNumber"/> is less than 0, the default
            the returned instance is the one with the lowest port number. If <paramref name="startNewCopy"/> is true, there must not already be an instance listening at the indicated port number.</para>
            	<para>On a 64-bit version of Windows, the Create() method will return a reference to the 64-bit version of the VSA when the version of the
            <em>Agilent.SA.Vsa.VsaInterfaces</em> assembly referenced by your program is 15.00 or later. When your program references an earlier version, the 32-bit
            version of the VSA is the default.</para>
            	<para>You can change the default by setting the <strong>Utilities &gt; Startup Preferences &gt; Programmatic Startup</strong> parameter. You can also specify
            whether to get a handle to a 32-bit or 64-bit instance by using the other <see cref="O:Agilent.SA.Vsa.ApplicationFactory.Create">overloads</see> of the Create() method.</para>
            </remarks>
            <returns>A handle to an Application object, or null if <paramref name="startNewCopy"/> is false and no instances are running.</returns>
            <exception caption="" cref="T:System.ArgumentException">Is raised if an explicitly requested version is not installed.</exception>
            <exception caption="" cref="T:System.ArgumentException">Is raised if an explicitly requested port number is already in use and a new instance of 
            Keysight 89600 VSA is being started.</exception>
        </member>
        <member name="M:Agilent.SA.Vsa.ApplicationFactory.Create(System.Boolean,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method returns a handle to the <see cref="T:Agilent.SA.Vsa.Application"/> object of an instance of Keysight 89600 VSA
            that is listening on the indicated port number on the indicated host, optionally creating 
            an instance if requested and waiting for a stipulated period of time for the new instance to start.
            </summary>
            <param name="startNewCopy">If false, attempts to connect to an already-running instance of Agilent
            89600 VSA software. If true, attempts to start a new instance. Note that this method will wait indefinitely
            for the new application to start. If you wish to specify a maximum time to wait, see the
            <see cref="M:Agilent.SA.Vsa.ApplicationFactory.Create(System.Boolean,System.String,System.String,System.Int32,System.Int32)"/> overload.</param>
            <param name="version">
            	<para>Specifies the version string of the version to start. This string is of the form nn.n[_Modifier], where "n" is a single digit and "_Modifier" is an optional
            modifier used for special releases (i.e. "_Beta2").</para>
            	<para>If null or the empty string is specified, the latest available version is used. If a non-null string is specified and the requested version is not
            installed, a <see cref="T:System.ArgumentException"/> is raised. This parameter is ignored if <paramref name="startNewCopy"/> is false.</para>
            	<para>You can find the version string from a currently running VSA by opening the About dialog (<strong>Help &gt; About</strong>).</para>
            </param>
            <param name="hostName">The hostname is currently restricted to the name of the host on which the calling
            application is running, or the value 'localhost'. If this parameter is null or the empty string, 'localhost'
            is assumed. It is currently not possible to programmatically connect to or start an instance of Keysight 89600 VSA software
            on a remote computer.</param>
            <param name="portNumber">The TCP port number to use for the connection. If set to a value less than
            0, the first available port number greater than or equal to 60189 is used. If <paramref name="startNewCopy"/> is false, there must
            already be a running instance of Keysight 89600 VSA. If <paramref name="startNewCopy"/>
            is true, the specified port number must not already be in use. If it is, an <see cref="T:System.ArgumentException"/>
            is thrown.</param>
            <param name="secondsToWait">This parameter specifies the number of seconds to wait for a new instance
            of Keysight 89600 VSA software to start. A number less than or equal to 0 specifies to wait indefinitely. If
            the new instance of the application does not start within the stipulated time this function will
            return null.</param>
            <remarks>
            	<para>If <paramref name="startNewCopy"/> is false, an instance that is listening at the indicated port number must already be running. If <paramref name="portNumber"/> is less than 0, the default
            the returned instance is the one with the lowest port number. If <paramref name="startNewCopy"/> is true, there must not already be an instance listening at the indicated port number.</para>
            	<para>On a 64-bit version of Windows, the Create() method will return a reference to the 64-bit version of the VSA when the version of the
            <em>Agilent.SA.Vsa.VsaInterfaces</em> assembly referenced by your program is 15.00 or later. When your program references an earlier version, the 32-bit
            version of the VSA is the default.</para>
            	<para>You can change the default by setting the <strong>Utilities &gt; Startup Preferences &gt; Programmatic Startup</strong> parameter. You can also specify
            whether to get a handle to a 32-bit or 64-bit instance by using the other <see cref="O:Agilent.SA.Vsa.ApplicationFactory.Create">overloads</see> of the Create() method.</para>
            </remarks>
            <returns>A handle to an Application object, or null if <paramref name="startNewCopy"/> is false and no instances are running.</returns>
            <exception caption="" cref="T:System.ArgumentException">Is raised if an explicitly requested version is not installed.</exception>
            <exception caption="" cref="T:System.ArgumentException">Is raised if an explicitly requested port number is already in use and a new instance of 
            Keysight 89600 VSA is being started.</exception>
        </member>
        <member name="M:Agilent.SA.Vsa.ApplicationFactory.Create(System.Boolean,System.String,System.String,System.Int32,System.Int32,Agilent.SA.Vsa.CreateOptions)">
            <summary>
            This method returns a handle to the <see cref="T:Agilent.SA.Vsa.Application"/> object of an instance of Keysight 89600 VSA
            that is listening on the indicated port number on the indicated host, optionally creating 
            an instance if requested and waiting for a stipulated period of time for the new instance to start.
            </summary>
            <version>14.00</version>
            <param name="startNewCopy">If false, attempts to connect to an already-running instance of Agilent
            89600 VSA software. If true, attempts to start a new instance. Note that this method will wait indefinitely
            for the new application to start. If you wish to specify a maximum time to wait, see the
            <see cref="M:Agilent.SA.Vsa.ApplicationFactory.Create(System.Boolean,System.String,System.String,System.Int32,System.Int32)"/> overload.</param>
            <param name="version">
            	<para>Specifies the version string of the version to start. This string is of the form nn.n[_Modifier], where "n" is a single digit and "_Modifier" is an optional
            modifier used for special releases (i.e. "_Beta2").</para>
            	<para>If null or the empty string is specified, the latest available version is used. If a non-null string is specified and the requested version is not
            installed, a <see cref="T:System.ArgumentException"/> is raised. This parameter is ignored if <paramref name="startNewCopy"/> is false.</para>
            	<para>You can find the version string from a currently running VSA by opening the About dialog (<strong>Help &gt; About</strong>).</para>
            </param>
            <param name="hostName">The hostname is currently restricted to the name of the host on which the calling
            application is running, or the value 'localhost'. If this parameter is null or the empty string, 'localhost'
            is assumed. It is currently not possible to programmatically connect to or start an instance of Keysight 89600 VSA software
            on a remote computer.</param>
            <param name="portNumber">The TCP port number to use for the connection. If set to a value less than
            0, the first available port number greater than or equal to 60189 is used. If <paramref name="startNewCopy"/> is false, there must
            already be a running instance of Keysight 89600 VSA. If <paramref name="startNewCopy"/>
            is true, the specified port number must not already be in use. If it is, an <see cref="T:System.ArgumentException"/>
            is thrown.</param>
            <param name="secondsToWait">This parameter specifies the number of seconds to wait for a new instance
            of Keysight 89600 VSA software to start. A number less than or equal to 0 specifies to wait indefinitely. If
            the new instance of the application does not start within the stipulated time this function will
            return null.</param>
            <param name="options">This parameter enables other non-default application creation options to be specified. 
            Please see <see cref="T:Agilent.SA.Vsa.CreateOptions"/> for a description of these options.</param>
            <remarks>
            	<para>If <paramref name="startNewCopy"/> is false, an instance that is listening at the indicated port number must already be running. If <paramref name="portNumber"/> is less than 0, the default
            the returned instance is the one with the lowest port number. If <paramref name="startNewCopy"/> is true, there must not already be an instance listening at the indicated port number.</para>
            	<para>On a 64-bit version of Windows, the Create() method will return a reference to the 64-bit version of the VSA when the version of the
            <em>Agilent.SA.Vsa.VsaInterfaces</em> assembly referenced by your program is 15.00 or later. When your program references an earlier version, the 32-bit
            version of the VSA is the default.</para>
            	<para>You can change the default by setting the <strong>Utilities &gt; Startup Preferences &gt; Programmatic Startup</strong> parameter. You can also specify
            whether to get a handle to a 32-bit or 64-bit instance by using the other <see cref="O:Agilent.SA.Vsa.ApplicationFactory.Create">overloads</see> of the Create() method.</para>
            </remarks>
            <returns>A handle to an Application object, or null if <paramref name="startNewCopy"/> is false and no instances are running.</returns>
            <exception caption="" cref="T:System.ArgumentException">Is raised if an explicitly requested version is not installed.</exception>
            <exception caption="" cref="T:System.ArgumentException">Is raised if an explicitly requested port number is already in use and a new instance of 
            Keysight 89600 VSA is being started.</exception>
        </member>
        <member name="M:Agilent.SA.Vsa.ApplicationFactory.Create(System.Boolean,System.String,System.String,System.Int32,System.Int32,Agilent.SA.Vsa.CreateOptions,System.String)">
            <summary>
            This method returns a handle to the <see cref="T:Agilent.SA.Vsa.Application"/> object of an instance of Keysight 89600 VSA
            that is listening on the indicated port number on the indicated host, optionally creating 
            an instance if requested and waiting for a stipulated period of time for the new instance to start.
            </summary>
            <version>14.20</version>
            <param name="startNewCopy">If false, attempts to connect to an already-running instance of Keysight
            89600 VSA software. If true, attempts to start a new instance. Note that this method will wait indefinitely
            for the new application to start. If you wish to specify a maximum time to wait, see the
            <see cref="M:Agilent.SA.Vsa.ApplicationFactory.Create(System.Boolean,System.String,System.String,System.Int32,System.Int32)"/> overload.</param>
            <param name="version">
            	<para>Specifies the version string of the version to start. This string is of the form nn.n[_Modifier], where "n" is a single digit and "_Modifier" is an optional
            modifier used for special releases (i.e. "_Beta2").</para>
            	<para>If null or the empty string is specified, the latest available version is used. If a non-null string is specified and the requested version is not
            installed, a <see cref="T:System.ArgumentException"/> is raised. This parameter is ignored if <paramref name="startNewCopy"/> is false.</para>
            	<para>You can find the version string from a currently running VSA by opening the About dialog (<strong>Help &gt; About</strong>).</para>
            </param>
            <param name="hostName">The hostname is currently restricted to the name of the host on which the calling
            application is running, or the value 'localhost'. If this parameter is null or the empty string, 'localhost'
            is assumed. It is currently not possible to programmatically connect to or start an instance of Keysight 89600 VSA software
            on a remote computer.</param>
            <param name="portNumber">The TCP port number to use for the connection. If set to a value less than
            0, the first available port number greater than or equal to 60189 is used. If <paramref name="startNewCopy"/> is false, there must
            already be a running instance of Keysight 89600 VSA. If <paramref name="startNewCopy"/>
            is true, the specified port number must not already be in use. If it is, an <see cref="T:System.ArgumentException"/>
            is thrown.</param>
            <param name="secondsToWait">This parameter specifies the number of seconds to wait for a new instance
            of Keysight 89600 VSA software to start. A number less than or equal to 0 specifies to wait indefinitely. If
            the new instance of the application does not start within the stipulated time this function will
            return null.</param>
            <param name="options">This parameter enables other non-default application creation options to be specified. 
            Please see <see cref="T:Agilent.SA.Vsa.CreateOptions"/> for a description of these options.</param>
            <param name="commandLineArguments">This parameter allows additional command line options to be specified if 
            <paramref name="startNewCopy"/> is true.</param>
            <remarks>
            	<para>If <paramref name="startNewCopy"/> is false, an instance that is listening at the indicated port number must already be running. If <paramref name="portNumber"/> is less than 0, the default
            the returned instance is the one with the lowest port number. If <paramref name="startNewCopy"/> is true, there must not already be an instance listening at the indicated port number.</para>
            	<para>On a 64-bit version of Windows, the Create() method will return a reference to the 64-bit version of the VSA when the version of the
            <em>Agilent.SA.Vsa.VsaInterfaces</em> assembly referenced by your program is 15.00 or later. When your program references an earlier version, the 32-bit
            version of the VSA is the default.</para>
            	<para>You can change the default by setting the <strong>Utilities &gt; Startup Preferences &gt; Programmatic Startup</strong> parameter. You can also specify
            whether to get a handle to a 32-bit or 64-bit instance by using the other <see cref="O:Agilent.SA.Vsa.ApplicationFactory.Create">overloads</see> of the Create() method.</para>
            </remarks>
            <returns>A handle to an Application object, or null if <paramref name="startNewCopy"/> is false and no instances are running.</returns>
            <exception caption="" cref="T:System.ArgumentException">Is raised if an explicitly requested version is not installed.</exception>
            <exception caption="" cref="T:System.ArgumentException">Is raised if an explicitly requested port number is already in use and a new instance of 
            Keysight 89600 VSA is being started.</exception>
        </member>
        <member name="M:Agilent.SA.Vsa.ApplicationFactory.GetAvailableVersions">
            <summary>
            Returns a list of currently installed versions of the Keysight 89600 VSA software. The returned values
            can be used as an argument to the <see cref="M:Agilent.SA.Vsa.ApplicationFactory.Create"/> method.
            </summary>
            <returns>A ReadOnlyCollection of strings representing the installed versions.</returns>
            <version>14.00</version>
        </member>
        <member name="M:Agilent.SA.Vsa.ApplicationFactory.GetInstallPath(Agilent.SA.Vsa.Application)">
            <summary>
            This method returns the local install path for the version of Keysight 89600 VSA software represented by
            the supplied <see cref="T:Agilent.SA.Vsa.Application"/> object.
            </summary>
            <param name="app">The <see cref="T:Agilent.SA.Vsa.Application"/> reference for which the installation path
            is desired.</param>
            <returns>The fully qualified local installation directory. If <paramref name="app"/> refers to
            an instance of Keysight 89600 VSA software on a remote machine, the empty string is returned.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.ApplicationFactory.GetRunningInstances">
            <summary>
            This function allows the caller to discover all currently running instances of the
            Keysight 89600 VSA software on the local machine.
            </summary>
            <remarks>Note that the information returned is correct at the time the call is made. The caller
            must treat the returned information with care since existing instances can exit and new instances
            can start at any time.</remarks>
            <returns>An array of <see cref="T:Agilent.SA.Vsa.ApplicationIdentifier"/> objects, each identifying a running instance of
            the application. If no instances are currently running, an empty array is returned.</returns>
        </member>
        <member name="T:Agilent.SA.Vsa.ApplicationIdentifier">
            <summary>
            This class is used to represent a currently running instance of Keysight 89600 VSA Software.
            </summary>
            <remarks>
            The <see cref="M:Agilent.SA.Vsa.ApplicationFactory.GetRunningInstances">ApplicationFactory.GetRunningInstances()</see> returns an array
            of instances of this class, one for every currently running instance.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.ApplicationIdentifier.ProcessId">
            <summary>
            Gets the Windows process ID of the instance.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.ApplicationIdentifier.TcpPort">
            <summary>
            Gets the TCP port number on which this instance is listening for requests.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.ApplicationIdentifier.Is64Bit">
            <summary>
            Gets a value indicating whether the process hosting this instance is 64-bit (true) or 32-bit (false).
            </summary>
            <version>14.20</version>
        </member>
        <member name="T:Agilent.SA.Vsa.CreateOptions">
            <summary>This enumeration is used to define specific VSA application creation options.</summary>
            <version>14.00</version>
            <remarks>
            The <see cref="M:Agilent.SA.Vsa.ApplicationFactory.Create(System.Boolean,System.String,System.String,System.Int32,System.Int32,Agilent.SA.Vsa.CreateOptions)"/> uses an argument of this type to specify non-default application creation options.</remarks>
        </member>
        <member name="F:Agilent.SA.Vsa.CreateOptions.None">
            <summary>Use the current setting for <strong>Utilities &gt; Startup Preferences &gt; Programmatic Startup</strong>.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.CreateOptions.Use32Bit">
            <summary>
            Create a 32-bit application even if 64-bit application is installed on the host.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.CreateOptions.Use64Bit">
            <summary>
            Create a 64-bit application.
            </summary>
            <version>15.00</version>
        </member>
        <member name="F:Agilent.SA.Vsa.CreateOptions.InProcess">
            <summary>
            Create an in-process application.
            </summary>
            <version>18.50</version>
        </member>
        <member name="T:Agilent.SA.VsaImplementation.AttributeServices">
            <summary>
            Provides type-safe convenience methods for extracting attribute information from any class
            that implements ICustomAttributeProvider. Note that all the CA1004 warnings are suppressed
            because the whole purpose of these extension methods is to be able to get the requested
            attribute information without having to cast the object to ICustomAttributeProvider.
            </summary>
        </member>
        <member name="M:Agilent.SA.VsaImplementation.AttributeServices.GetAttributes``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Extract attribute information for the specified attribute type.
            </summary>
            <typeparam name="T">Attribute type to find.</typeparam>
            <param name="attributeProvider">Object to find the attribute(s) on.</param>
            <returns>An array of the found attributes for the specified attribute type.</returns>
        </member>
        <member name="M:Agilent.SA.VsaImplementation.AttributeServices.GetAttributes``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Extract attribute information for the specified attribute type.
            </summary>
            <typeparam name="T">Attribute type to find.</typeparam>
            <param name="attributeProvider">Object to find the attribute(s) on.</param>
            <param name="inherit">Whether to look up the hierarchy chain for the inherited custom attribute</param>
            <returns>An array of the found attributes for the specified attribute type.</returns>
        </member>
        <member name="M:Agilent.SA.VsaImplementation.AttributeServices.GetFirstAttribute``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Extract the first attribute found for the specified attribute type.
            </summary>
            <typeparam name="T">Attribute type to find.</typeparam>
            <param name="attributeProvider">Object to find the attribute on.</param>
            <returns>The first attribute found for the specified attribute type.</returns>
        </member>
        <member name="M:Agilent.SA.VsaImplementation.AttributeServices.GetFirstAttribute``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Extract the first attribute found for the specified attribute type.
            </summary>
            <typeparam name="T">Attribute type to find.</typeparam>
            <param name="attributeProvider">Object to find the attribute on.</param>
            <param name="inherit">Whether to look up the hierarchy chain for the inherited custom attribute</param>
            <returns>The first attribute found for the specified attribute type.</returns>
        </member>
        <member name="M:Agilent.SA.VsaImplementation.AttributeServices.IsAttributeDefined``1(System.Reflection.ICustomAttributeProvider)">
            <summary>
            Indicates whether one or more instances of the specified attribute type is defined on this object.
            </summary>
            <typeparam name="T">The type of the custom attribute to find.</typeparam>
            <param name="attributeProvider">Object to find the attribute on.</param>
            <returns>True if the attribute type is defined; false otherwise.</returns>
        </member>
        <member name="M:Agilent.SA.VsaImplementation.AttributeServices.IsAttributeDefined``1(System.Reflection.ICustomAttributeProvider,System.Boolean)">
            <summary>
            Indicates whether one or more instances of the specified attribute type is defined on this object.
            </summary>
            <typeparam name="T">The type of the custom attribute to find.</typeparam>
            <param name="attributeProvider">Object to find the attribute on.</param>
            <param name="inherit">Whether to look up the hierarchy chain for the inherited custom attribute</param>
            <returns>True if the attribute type is defined; false otherwise.</returns>
        </member>
        <member name="T:Agilent.SA.Vsa.Calibration">
            <summary>Provides controls for calibrating the input hardware and provides information about calibration.</summary>
        </member>
        <member name="M:Agilent.SA.Vsa.Calibration.Calibrate">
            <summary>
             Performs a full calibration of the input hardware.
            </summary>
            <remarks>
            This method does not return until the calibration is finished, which may take minutes.
            It is preferable to use the asynchronous method BeginCalibration() 
            and use the Status system to determine when it is finished.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Calibration.QuickCalibrate">
            <summary>
            Performs a partial calibration of the input hardware.
            </summary>
            <remarks>
            <para>
            This only performs the calibrations for subsystems that require it.
            If IsAutoCalibrateEnabled is true, then partial calibrations are
            performed as needed and this method need not ever be called.
            <para>
            </para>
            This method does not return until the partial calibration is finished.
            It may be preferable to use the asynchronous method BeginQuickCalibration() 
            and use the Status system to determine when it is finished.
            </para>
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Calibration.BeginCalibration">
            <summary>
            Starts a full calibration of the input hardware. 
            </summary>
            <remarks>This method returns immediately (before the calibration is finished). Query Application.Measurements.SelectedItem.Status.Value and check the
            <see cref="F:Agilent.SA.Vsa.StatusBits.Calibrating"/> bit to see when it is done.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Calibration.BeginQuickCalibration">
            <summary>
            Starts a partial calibration of the input hardware. 
            </summary>
            <remarks>
            This method returns immediately (before the partial calibration is finished).
            Query Application.Measurements.SelectedItem.Status.Value and check the
            Vsa.Status.Calibrating bit to see when it is done.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Calibration.IsAutoCalibrateEnabled">
            <summary>
            Gets or sets a value indicating whether automatic calibration of the hardware is enabled.  
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Calibration.LastCalibration">
            <summary>
            Gets the date and time of last successful calibration
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Calibration.CalibrationMessage">
            <summary>
            Gets information about the calibration status
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.FrequencyMaskTriggerCriteria">
            <summary>
            Specifies the trigger criteria for the frequency mask trigger.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.FrequencyMaskTriggerCriteria.Enter">
            <summary>
            Trigger occurs when the signal enters the region identified by <see cref="P:Agilent.SA.Vsa.FrequencyMaskTrigger.MaskToUse"/>.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.FrequencyMaskTriggerCriteria.Leave">
            <summary>
            Trigger occurs when the signal leaves the region identified by <see cref="P:Agilent.SA.Vsa.FrequencyMaskTrigger.MaskToUse"/>.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.FrequencyMaskTriggerCriteria.Inside">
            <summary>
            Trigger occurs when the signal remains inside the region identified by <see cref="P:Agilent.SA.Vsa.FrequencyMaskTrigger.MaskToUse"/>.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.FrequencyMaskTriggerCriteria.Outside">
            <summary>
            Trigger occurs when the signal remains outside the region identified by <see cref="P:Agilent.SA.Vsa.FrequencyMaskTrigger.MaskToUse"/>.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.FrequencyMaskTriggerCriteria.EnterThenLeave">
            <summary>
            Trigger occurs when the signal enters and subsequently leaves the region identified by <see cref="P:Agilent.SA.Vsa.FrequencyMaskTrigger.MaskToUse"/>.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.FrequencyMaskTriggerCriteria.LeaveThenEnter">
            <summary>
            Trigger occurs when the signal leaves and subsequently enters the region identified by <see cref="P:Agilent.SA.Vsa.FrequencyMaskTrigger.MaskToUse"/>.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.FrequencyMaskTriggerMask">
            <summary>
            Specifies which masks are used for the trigger.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.FrequencyMaskTriggerMask.Upper">
            <summary>
            Specifies the upper mask only.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.FrequencyMaskTriggerMask.Lower">
            <summary>
            Specifies the lower mask only.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.FrequencyMaskTriggerMask.Both">
            <summary>
            Specifies both upper and lower masks.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.FrequencyMaskTriggerAmplitudeReference">
            <summary>
            Specifies whether mask amplitudes are absolute or relative.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.FrequencyMaskTriggerAmplitudeReference.Range">
            <summary>
            The mask amplitudes are relative to the range of the trigger channel.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.FrequencyMaskTriggerAmplitudeReference.Absolute">
            <summary>
            The mask amplitudes are absolute dBm value.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.FrequencyMaskTriggerFrequencyReference">
            <summary>
            Specifies whether mask frequencies are absolute or relative.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.FrequencyMaskTriggerFrequencyReference.Center">
            <summary>
            The mask frequencies are relative to the center frequency of the trigger channel.
            </summary>
            <remarks>
            In the case of shared measurements, the frequency offset property of each mask is used to adjust for the
            offset between the center frequencies of each measurement. These offsets are adjusted incrementally to any
            user-specified values.
            </remarks>
        </member>
        <member name="F:Agilent.SA.Vsa.FrequencyMaskTriggerFrequencyReference.Absolute">
            <summary>
            The mask frequencies are absolute.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.FrequencyMaskTriggerResBWMode">
            <summary>
            Specifies how the <see cref="P:Agilent.SA.Vsa.FrequencyMaskTrigger.ResBW"/> for the trigger is set.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.FrequencyMaskTriggerResBWMode.Auto">
            <summary>
            The ResBW is automatically chosen to correspond to the lesser of a 1024 length window or the maximum window length supported by the hardware.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.FrequencyMaskTriggerResBWMode.Manual">
            <summary>
            The ResBW must be explicitly set using the ResBW property.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.FrequencyMaskTrigger">
            <summary>
            Represents the setup for frequency mask trigger.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.FrequencyMaskTrigger.SetUpperMask(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Sets the upper mask for the frequency mask trigger.
            </summary>
            <param name="frequencies">Frequencies in Hz.  If <see cref="P:Agilent.SA.Vsa.FrequencyMaskTrigger.FrequencyReferenceStyle"/> is set to 
            <see cref="F:Agilent.SA.Vsa.FrequencyMaskTriggerFrequencyReference.Center"/> then values are Hz relative to <see cref="P:Agilent.SA.Vsa.Frequency.Center"/>.
            If <see cref="P:Agilent.SA.Vsa.FrequencyMaskTrigger.FrequencyReferenceStyle"/> is set to <see cref="F:Agilent.SA.Vsa.FrequencyMaskTriggerFrequencyReference.Absolute"/> then values are absolute Hz.  
            This parameter must be the same length as the amplitudes parameter.  A value of null may be used to clear the mask.
            </param>
            <param name="amplitudes">Amplitudes.  If <see cref="P:Agilent.SA.Vsa.FrequencyMaskTrigger.AmplitudeReferenceStyle"/> is set 
            to <see cref="F:Agilent.SA.Vsa.FrequencyMaskTriggerAmplitudeReference.Range"/> then values are in dB relative to the <see cref="P:Agilent.SA.Vsa.Analog.Range"/> of the trigger channel.  
            If <see cref="P:Agilent.SA.Vsa.FrequencyMaskTrigger.AmplitudeReferenceStyle"/> is set to <see cref="F:Agilent.SA.Vsa.FrequencyMaskTriggerAmplitudeReference.Absolute"/> then values are in dBm.
            This parameter must be the same length as the frequencies parameter.  A value of null may be used to clear the mask.
            </param>
        </member>
        <member name="M:Agilent.SA.Vsa.FrequencyMaskTrigger.SetLowerMask(System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Sets the lower mask for the frequency mask trigger.
            </summary>
            <param name="frequencies">Frequencies in Hz.  If <see cref="P:Agilent.SA.Vsa.FrequencyMaskTrigger.FrequencyReferenceStyle"/> is set to 
            <see cref="F:Agilent.SA.Vsa.FrequencyMaskTriggerFrequencyReference.Center"/> then values are Hz relative to <see cref="P:Agilent.SA.Vsa.Frequency.Center"/>.
            If <see cref="P:Agilent.SA.Vsa.FrequencyMaskTrigger.FrequencyReferenceStyle"/> is set to <see cref="F:Agilent.SA.Vsa.FrequencyMaskTriggerFrequencyReference.Absolute"/> then values are absolute Hz.  
            This parameter must be the same length as the amplitudes parameter.  A value of null may be used to clear the mask.
            </param>
            <param name="amplitudes">Amplitudes.  If <see cref="P:Agilent.SA.Vsa.FrequencyMaskTrigger.AmplitudeReferenceStyle"/> is set 
            to <see cref="F:Agilent.SA.Vsa.FrequencyMaskTriggerAmplitudeReference.Range"/> then values are in dB relative to the <see cref="P:Agilent.SA.Vsa.Analog.Range"/> of the trigger channel.  
            If <see cref="P:Agilent.SA.Vsa.FrequencyMaskTrigger.AmplitudeReferenceStyle"/> is set to <see cref="F:Agilent.SA.Vsa.FrequencyMaskTriggerAmplitudeReference.Absolute"/> then values are in dBm.
            This parameter must be the same length as the frequencies parameter.  A value of null may be used to clear the mask.
            </param>
        </member>
        <member name="M:Agilent.SA.Vsa.FrequencyMaskTrigger.GetUpperMaskFrequencies">
            <summary>
            Gets the upper mask frequencies.
            </summary>
            <returns>Returns the frequencies in Hz.  See <see cref="P:Agilent.SA.Vsa.FrequencyMaskTrigger.FrequencyReferenceStyle"/> for more information about what the frequencies may be relative to.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.FrequencyMaskTrigger.GetUpperMaskAmplitudes">
            <summary>
            Gets the upper mask amplitudes.
            </summary>
            <returns>Returns the amplitudes in dB or dBm depending upon the setting of <see cref="P:Agilent.SA.Vsa.FrequencyMaskTrigger.AmplitudeReferenceStyle"/>.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.FrequencyMaskTrigger.GetLowerMaskFrequencies">
            <summary>
            Gets the lower mask frequencies.
            </summary>
            <returns>Returns the frequencies in Hz.  See <see cref="P:Agilent.SA.Vsa.FrequencyMaskTrigger.FrequencyReferenceStyle"/> for more information about what the frequencies may be relative to.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.FrequencyMaskTrigger.GetLowerMaskAmplitudes">
            <summary>
            Gets the lower mask amplitudes.
            </summary>
            <returns>Returns the amplitudes in dB or dBm depending upon the setting of <see cref="P:Agilent.SA.Vsa.FrequencyMaskTrigger.AmplitudeReferenceStyle"/>.</returns>
        </member>
        <member name="P:Agilent.SA.Vsa.FrequencyMaskTrigger.AmplitudeReferenceStyle">
            <summary>
            Gets or sets the reference style to use for mask amplitudes.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.FrequencyMaskTrigger.LowerAmplitudeOffset">
            <summary>
            Gets or sets the lower mask amplitude offset from the current <see cref="P:Agilent.SA.Vsa.Analog.Range"/> of the trigger channel.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.FrequencyMaskTrigger.UpperAmplitudeOffset">
            <summary>
            Gets or sets the upper mask amplitude offset from the current <see cref="P:Agilent.SA.Vsa.Analog.Range"/> of the trigger channel.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.FrequencyMaskTrigger.FrequencyReferenceStyle">
            <summary>
            Gets or sets the reference style to use for mask frequencies.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.FrequencyMaskTrigger.LowerFrequencyOffset">
            <summary>
            Gets or sets the lower mask frequency offset in Hz.
            </summary>
            <remarks>
            The offset is added to the mask frequencies regardless of the setting of <see cref="P:Agilent.SA.Vsa.FrequencyMaskTrigger.FrequencyReferenceStyle"/>.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.FrequencyMaskTrigger.UpperFrequencyOffset">
            <summary>
            Gets or sets the upper mask frequency offset in Hz.
            </summary>
            <remarks>
            The offset is added to the mask frequencies regardless of the setting of <see cref="P:Agilent.SA.Vsa.FrequencyMaskTrigger.FrequencyReferenceStyle"/>.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.FrequencyMaskTrigger.Criteria">
            <summary>
            Gets or sets the criteria for when a trigger will occur for a given signal relative to the mask.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.FrequencyMaskTrigger.MaskToUse">
            <summary>
            Gets or sets which of the upper or lower masks to use.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.FrequencyMaskTrigger.Window">
            <summary>
            Gets or sets the window type to use.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.FrequencyMaskTrigger.ResBW">
            <summary>
            Gets or sets the resolution bandwidth.
            </summary>
            <remarks>
            Only a few values are possible at the current Span (based upon what FFT size and/or window lengths are
            possible for the FFT used in the Frequency Mask Trigger).  
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.FrequencyMaskTrigger.ResBWMode">
            <summary>
            Gets or sets how the ResBW is controlled for the frequency mask trigger.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.FrequencyMaskTrigger.FftSize">
            <summary>
            Gets the size of the FFT used by the mask trigger.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.PxiTrigger">
            <summary>
            Specifies which PXI backplane trigger to use.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.PxiTrigger.Pxi0">
            <summary>
            PXI Trigger #0
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.PxiTrigger.Pxi1">
            <summary>
            PXI Trigger #1
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.PxiTrigger.Pxi2">
            <summary>
            PXI Trigger #2
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.PxiTrigger.Pxi3">
            <summary>
            PXI Trigger #3
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.PxiTrigger.Pxi4">
            <summary>
            PXI Trigger #4
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.PxiTrigger.Pxi5">
            <summary>
            PXI Trigger #5
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.PxiTrigger.Pxi6">
            <summary>
            PXI Trigger #6
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.PxiTrigger.Pxi7">
            <summary>
            PXI Trigger #7
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.InputGate">
            <summary>
            The gate object provides access to the power spectrum gate features.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.InputGate.Enabled">
            <summary>
            Gets or sets a value indicating whether gating is enabled.
            </summary>
            <version>18.50</version>
        </member>
        <member name="P:Agilent.SA.Vsa.InputGate.Source">
            <summary>
            Gets or sets the gate trigger source.
            </summary>
            <version>18.50</version>
        </member>
        <member name="P:Agilent.SA.Vsa.InputGate.PxiSource">
            <summary>
            Gets or sets which PXI backplane trigger to use when the <see cref="P:Agilent.SA.Vsa.InputGate.Source"/> property is set to Pxi.
            </summary>
            <version>18.50</version>
        </member>
        <member name="P:Agilent.SA.Vsa.InputGate.Slope">
            <summary>
            Gets or sets the trigger slope.
            </summary>
            <remarks>
            Determine the current trigger slope; either a positive transition from below the 
            trigger level to above it, or a negative transition from above the trigger level 
            to below it. The trigger slope is not used for the free run trigger type.
            </remarks>
            <version>18.50</version>
        </member>
        <member name="P:Agilent.SA.Vsa.InputGate.Delay">
            <summary>
            Gets or sets the gate trigger delay in seconds.
            </summary>
            <remarks>A negative value is pre-trigger.  A positive value is post trigger.</remarks>
            <version>18.50</version>
        </member>
        <member name="P:Agilent.SA.Vsa.InputGate.HoldoffStyle">
            <summary>
            Gets or sets the gate trigger holdoff style.
            </summary>
            <version>18.50</version>
        </member>
        <member name="P:Agilent.SA.Vsa.InputGate.Holdoff">
            <summary>
            Gets or sets the gate trigger holdoff in seconds.
            </summary>
            <remarks>
            <para>
            Determine the length of the trigger holdoff, in seconds.  The holdoff is the length
            of time that the trigger condition must not be satisfied before accepting a trigger. For
            a positive trigger slope, it is the length of time that the input signal amplitude must be
            less than the trigger level before a valid trigger can occur.  A larger trigger holdoff
            makes the trigger less susceptible to a momentary signal glitch.
            </para>
            </remarks>
            <seealso cref="P:Agilent.SA.Vsa.InputGate.HoldoffStyle"/>
            <version>18.50</version>
        </member>
        <member name="P:Agilent.SA.Vsa.InputGate.Length">
            <summary>
            Gets or sets the requested gate length in seconds.
            </summary>
            <remarks>This is ignored when gating is disabled.  For power spectrum measurements if the
            specified RBW cannot be realized with the specified gate length then the gate length used by the measurement
            will be coerced. The <see cref="P:Agilent.SA.Vsa.InputGate.ActualLength"/> property will return the actual coerced length and this 
            property will retain the origianl requested gate length.</remarks>
            <version>18.50</version>
        </member>
        <member name="P:Agilent.SA.Vsa.InputGate.ActualLength">
            <summary>
            Gets the actual gate length of the measurement.
            </summary>
            <remarks>The <see cref="P:Agilent.SA.Vsa.InputGate.Length"/> property is a requested length and sometimes the measurement may coerce the length.
            The property returns the actual gate length (the coerced value).</remarks>
            <version>18.50</version>
        </member>
        <member name="P:Agilent.SA.Vsa.InputGate.RFBurstLevel">
            <summary>
            Gets or sets the trigger level in dBm for the RF Burst trigger
            </summary>
            <version>18.50</version>
        </member>
        <member name="P:Agilent.SA.Vsa.InputGate.ExternalLevel">
            <summary>
            Gets or sets the external trigger level in volts.
            </summary>
            <version>18.50</version>
        </member>
        <member name="P:Agilent.SA.Vsa.InputGate.IsGateViewEnabled">
            <summary>
            Gets or sets a value indicating whether the GateView trace result is available or not.
            </summary>
            <remarks>
            The GateView trace result is available only when <see cref="P:Agilent.SA.Vsa.InputGate.Enabled"/> and <see cref="P:Agilent.SA.Vsa.InputGate.IsGateViewEnabled"/>
            are both true.
            </remarks>
            <version>18.50</version>
        </member>
        <member name="P:Agilent.SA.Vsa.InputGate.IsPeakHoldEnabled">
            <summary>
            Gets or sets a value indicating whether the peak hold function is enabled.
            </summary>
            <remarks>The peak hold function is located right after the video bandwidth averaging but before 
            combining high or low side mixing when using double acquisition conversion for image rejection.  
            It is also before the detectors.  The gate length sets the length of time that peak holding is done.
            The peak hold function is done on the spectrum at each gate in the frequency domain.</remarks>
        </member>
        <member name="T:Agilent.SA.Vsa.GraphDrawShape">
            <summary>
            Specifies the input channel coupling.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.GraphDrawShape.Lines">
            <summary>
            Specifies drawing the data with connection lines.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.GraphDrawShape.Dots">
            <summary>
            Specifies drawing the data with dots at the data points.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.GraphDrawShape.SmallDots">
            <summary>
            Specifies drawing the data with small dots at the data points.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.GraphTimeReference">
            <summary>Specifies time reference for graph data points.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.GraphTimeReference.Relative">
            <summary>Relative (to first point) time reference for data points.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.GraphTimeReference.Stimulus">
            <summary>Absolute stimulus time reference for data points.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.GraphTimeReference.Response">
            <summary>Absolute response time reference for data points.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.Graph">
            <summary>
            The Graph class controls the graph composition of a trace.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.Graph.CopyPolynomialTraceToDataRegister(System.String)">
            <summary>Copy this graph's computed polynomial trace to the specified data register by name.</summary>
            <param name="registerName">Specifies a data register as a name into the <see cref="T:Agilent.SA.Vsa.DataRegisterCollection"/>.</param>
            <remarks>
            "D1" is the first data register, "D2" is the second data register, etc.
            This method overwrites any previous results in the specified data register. 
            The <see cref="M:Agilent.SA.Vsa.DataRegister.Remove"/> method removes the data register from memory. 
            The <see cref="M:Agilent.SA.Vsa.DataRegister.RecallFile(System.String,System.String)"/> method copies a file into the specified data register. 
            </remarks>
            <version>17.00</version>
        </member>
        <member name="M:Agilent.SA.Vsa.Graph.CopyTo(Agilent.SA.Vsa.Graph)">
            <summary>Copy this Graph properties to the specified Graph/>.</summary>
            <param name="dst">Destination Graph.</param>
            <version>17.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Graph.IsDataNamesAuto">
            <summary>
            Gets or sets a value indicating whether the stimulus and response data is automatically selected.
            </summary>
            <remarks>
            If IsDataNamesAuto is false, then the <see cref="P:Agilent.SA.Vsa.Graph.StimulusDataName"/> and <see cref="P:Agilent.SA.Vsa.Graph.ResponseDataName"/> 
            properties are used to select the stimulus and response data.
            If IsDataNamesAuto is true, then the stimulus and response data is chosen so that they are compatible.
            </remarks>
            <version>17.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Graph.ResponseDataName">
            <summary>
            Gets or sets a value which selects the response data (the same names as used in <see cref="P:Agilent.SA.Vsa.Trace.DataName"/>).
            </summary>
            <version>17.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Graph.StimulusDataName">
            <summary>
            Gets or sets a value which selects the stimulus data (the same names as used in <see cref="P:Agilent.SA.Vsa.Trace.DataName"/>).
            </summary>
            <version>17.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Graph.Description">
            <summary>
            Gets or sets a description string value to be drawn above the graph.
            </summary>
            <remarks>
            If this value is an empty string, or <see cref="P:Agilent.SA.Vsa.Graph.IsDataNamesAuto"/> is true, no description is added to the graph.  If the string provided cannot fit, it will not be displayed.
            </remarks>
            <version>18.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Graph.DrawShape">
            <summary>
            Gets or sets how the result data's points are drawn.
            </summary>
            <version>17.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Graph.IsCompensate">
            <summary>
            Gets or sets a value indicating whether any compensation (time alignment, power level, and phase error) is enabled.
            </summary>
            <version>17.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Graph.TimeAlignPercent">
            <summary>
            Gets or sets the search length (percent) to align the input time data.
            </summary>
            <version>17.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Graph.IsAmplitudeNormalized">
            <summary>
            Gets or sets a value indicating whether the resulting trace is computed with the response trace's amplitude normalized.
            </summary>
            <remarks>
            Regardless of this setting, the polynomial is always calculated using the normalized amplitude for the
            response trace.
            </remarks>
            <version>17.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Graph.IsPolynomial">
            <summary>
            Gets or sets a value indicating whether the curve fit polynomial is calculated.
            </summary>
            <version>17.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Graph.PolynomialOrder">
            <summary>
            Gets or sets the curve fit polynomial order.
            </summary>
            <version>17.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Graph.IsPhaseErrorCompensate">
            <summary>
            Gets or sets a value indicating whether phase error compensation is enabled.
            </summary>
            <version>17.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Graph.IsPhaseErrorCompensateAuto">
            <summary>
            Gets or sets a value indicating whether phase error compensation will use the default filter length.
            </summary>
            <version>17.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Graph.PhaseErrorCompensateSpanPercent">
            <summary>
            Gets or sets the phase error compensation filter bandwidth as a % of span.
            </summary>
            <version>17.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Graph.TimeReference">
            <summary>
            Gets or sets how the result data points time reference.
            </summary>
            <remarks>
            This setting determines the time axis of the graph result data.
            Some of the graph results combine the stimulus and response data (which may
            have different time axis values) to produce a
            result with single time axis.
            <para>
            The Relative setting sets the first time point to zero.  This is useful for comparing
            multiple graph results to each other.  
            </para>
            <para>
            The Absolute setting sets the first time point
            to be compatible with the time axis of either the stimulus data or response data (plus any alignment or
            filter delays).  If this is a result from both stimulus and response data, then the time axis for the
            stimulus data is used.  If this is a result from only the stimulus or response data (not both),
            then the time axis for this input data is used.  This setting is useful for comparing graph results to
            the original input data.
            </para>
            </remarks>
            <version>17.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Graph.IsPhaseCompensateAuto">
            <summary>
            Gets or sets a value indicating whether <see cref="P:Agilent.SA.Vsa.Graph.IsPhaseCompensate"/> is determined from the center frequency of the stimulus and response data.
            </summary>
            <remarks>
            If this property is set true, then compensation uses signal phase if the center frequencies of
            the stimulus and response data are the same and both stimulus and response data are complex. 
            </remarks>
            <version>17.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Graph.IsPhaseCompensate">
            <summary>
            Gets or sets a value indicating whether compensation uses the phase of stimulus and response data.
            </summary>
            <version>17.00</version>
        </member>
        <member name="T:Agilent.SA.Vsa.InputMeasurementChannelCollection">
            <summary>
            Represents a collection of logical input channels that are used by the measurement.
            </summary>
            <remarks>
            <para>
            A <see cref="T:Agilent.SA.Vsa.InputLogicalChannel">logical input channel</see> may be composed of one or more <see cref="T:Agilent.SA.Vsa.InputChannel">
            input channels (physical channel)</see>.  Some parts of the API (such as <see cref="P:Agilent.SA.Vsa.Frequency.Channels"/> and 
            <see cref="M:Agilent.SA.Vsa.Input.ChangeLogicalChannels(Agilent.SA.Vsa.LogicalChannelType[])"/>) deal 
            with settings on a per logical channel basis while other parts (like <see cref="P:Agilent.SA.Vsa.Analog.Channels"/>, etc.) 
            deal with settings on a per input channel (physical channel) basis.
            </para>
            <para>
            This collection will contain a subset of logical channels from the <see cref="P:Agilent.SA.Vsa.Input.LogicalChannels"/> collection.
            </para>
            <para>
            <strong>Note:</strong>  Use the <see cref="M:Agilent.SA.Vsa.Input.ChangeMeasurementChannels(System.Int32[])"/> method to change this collection.
            </para>
            </remarks>
        </member>
        <member name="T:Agilent.SA.Vsa.RemotableCollection`1">
            <summary>
            Provides a common abstract base class for abstract base class collection classes in the public API.
            </summary>
            <typeparam name="T">Type of items in the collection.</typeparam>
            <remarks>Inheritance from IRemoteNotifyCollectionChanged added in version 14.00.</remarks>
        </member>
        <member name="T:Agilent.SA.Vsa.IRemoteNotifyCollectionChanged">
            <summary>
            This interface is the remotable version of the <see cref="T:System.Collections.Specialized.INotifyCollectionChanged"/> interface. All
            objects deriving from <see cref="T:Agilent.SA.Vsa.RemotableCollection`1"/> support this interface.
            </summary>
            <version>14.00</version>
        </member>
        <member name="E:Agilent.SA.Vsa.IRemoteNotifyCollectionChanged.RemoteCollectionChanged">
            <summary>
            This event is used internally to propagate <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/> events across the remoting boundary. See
            <see cref="T:Agilent.SA.Vsa.NotifyCollectionChangedWrapper"/> for a description of how to receive <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/>
            events for a given object.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.ICollectionBase`1">
            <summary>
            For internal use
            </summary>
            <typeparam name="T">Type of objects in the collection.</typeparam>
        </member>
        <member name="T:Agilent.SA.Vsa.ICollectionBase">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.ICollectionBase.IndexOf(System.Object)">
            <summary>
             Gets the index of the specified object within the collection.
            </summary>
            <param name="item">An object to find the index for in the collection.</param>
            <returns>Index of the object found.</returns>
        </member>
        <member name="P:Agilent.SA.Vsa.ICollectionBase.Count">
            <summary>
             Gets the number of items in the collection.
            </summary>
        </member>
        <member name="E:Agilent.SA.Vsa.ICollectionBase.ItemPropertyChanged">
            <version>15.00</version>
            <summary>Indicates which item in the collection had a property change on it.</summary>
        </member>
        <member name="M:Agilent.SA.Vsa.ICollectionBase`1.IndexOf(`0)">
            <summary>
            Gets the index of the specified object within the collection.
            </summary>
            <param name="item">An object to find the index for in the collection.</param>
            <returns>Index of the object found.</returns>
        </member>
        <member name="P:Agilent.SA.Vsa.ICollectionBase`1.Item(System.Int32)">
            <summary>
            Gets a reference to an object at the specified index in the collection.
            </summary>
            <param name="index">Index into the collection.</param>
            <returns>The object at the specified index.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.RemotableCollection`1"/> class.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.Dispose(System.Boolean)">
            <summary>
            Cleanup resources.
            </summary>
            <param name="isDisposing">false if called by the finalize method (destructor); otherwise true</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.NewChangeGroup">
            <summary>
            Create a new change group.
            </summary>
            <returns>A new change group.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.OnNotifyCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raise a collection changed event with the specified event args.
            </summary>
            <param name="e">Event args for the event.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.ForceCollectionChanged">
            <summary>
            Force a notification that the collection changed.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.DefaultInvoke(System.Delegate,System.Object[])">
            <summary>
            Overrides the default invoke method to deal with refreshing collection views.
            </summary>
            <remarks>
            There is a defect in WPF whereby CollectionView and its derived classes do not handle
            CollectionChanged events with an action of Add or Remove and a list of more than one object.
            To get around this problem we explicitly inspect the target for each handler and if
            we detect an instance of CollectionView, we just tell the view to refresh. This just
            rebuilds the whole view - presumably what happens when it gets a CollectionChanged
            event with a Reset action.
            </remarks>
            <param name="del">Delegate to call.</param>
            <param name="args">Arguments to pass to the call.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.CreateCore">
            <summary>
            Create an object of the type used in this collection and add it to the collection.
            </summary>
            <returns>The new object.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.CreateCore(System.Reflection.MethodBase)">
            <summary>
            Create an object of the type used in this collection and add it to the collection.
            </summary>
            <param name="caller">A handle to the calling method, obtained from System.Reflection.MethodInfo.GetCurrentMethod(),
            used for macro recording. <paramref name="caller"/> must be a member that is defined on the customer-facing
            public API.</param>
            <returns>The new object.</returns>
            <exception cref="T:System.ArgumentException">Is raised if <paramref name="caller"/> is not defined on the customer-facing
            public API.</exception>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.CreateAndAddCore">
            <summary>
            Create an object of the type used in this collection and add it to the collection.
            </summary>
            <returns>The new object.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.RebuildCollection(System.Int32)">
            <summary>
            Create or remove objects as needed so that the collection contains the specified number of objects.
            </summary>
            <remarks>
            This method tries to reuse existing items in the collection when possible and only 
            create or remove unneeded items in order to be more efficient.
            </remarks>
            <param name="newCount">The new count for the collection.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.RemoveAtCore(System.Int32)">
            <summary>
            Remove the specified item from the collection.
            </summary>
            <param name="index">Index of the item to remove.</param>
            <returns>true if it succeeded; otherwise false</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.RemoveAtCore(System.Reflection.MethodBase,System.Int32)">
            <summary>
            Remove the specified item from the collection.
            </summary>
            <param name="caller">A handle to the calling method, obtained from System.Reflection.MethodInfo.GetCurrentMethod(),
            used for macro recording. <paramref name="caller"/> must be a member that is defined on the customer-facing
            public API.</param>
            <param name="index">Index of the item to remove.</param>
            <returns>true if it succeeded; otherwise false</returns>
            <exception cref="T:System.ArgumentException">Is raised if <paramref name="caller"/> is not defined on the customer-facing
            public API.</exception>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.IsRemoveAllowed(`0)">
            <summary>
            Gets a value that indicates whether the specified item can be removed from the collection.
            </summary>
            <param name="item">Item in the collection.</param>
            <returns>true if it can be removed (defaults to this unless this method is overridden)</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.RemoveCore(`0)">
            <summary>
            Removes an item from the collection.
            </summary>
            <param name="item">Item to remove.</param>
            <returns>true if it was removed; otherwise false</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.RemoveCore(System.Reflection.MethodBase,`0)">
            <summary>
            Removes an item from the collection.
            </summary>
            <param name="caller">A handle to the calling method, obtained from System.Reflection.MethodInfo.GetCurrentMethod(),
            used for macro recording. <paramref name="caller"/> must be a member that is defined on the customer-facing
            public API.</param>
            <param name="item">Item to remove.</param>
            <returns>true if it was removed; otherwise false</returns>
            <exception cref="T:System.ArgumentException">Is raised if <paramref name="caller"/> is not defined on the customer-facing
            public API.</exception>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.RemoveAndDisposeCore(`0)">
            <summary>
            Removes an item from the collection (but despite the name does not call dispose on the item).
            TODO:  Fix to call Dispose
            </summary>
            <param name="item">The item to remove.</param>
            <returns>Whether the item was successfully removed.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.RestoreItems(Agilent.SA.VsaInternal.RestoreModes)">
            <summary>
            Call restore on the items in the collection.
            </summary>
            <param name="mode">The restore mode.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.RestoreItemCore(Agilent.SA.VsaInternal.RestoreModes,`0)">
            <summary>
            Call restore on the specified item.
            </summary>
            <param name="mode">Restore mode.</param>
            <param name="member">The item to restore.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.Restore(Agilent.SA.VsaInternal.RestoreModes)">
            <summary>
            Restore the collection and all items in it.
            </summary>
            <param name="mode">Restore mode.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.Restore(Agilent.SA.VsaInternal.RestoreModes,System.Boolean)">
            <summary>
            Restore the collection and conditionally the items in it.
            </summary>
            <param name="mode">Restore mode</param>
            <param name="skipMembers">Whether to skip restoring the items within the collection.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.IsIndexInRange(System.Int32)">
            <summary>
            Determine if the index is within the collection.
            </summary>
            <param name="index">The index to find out about.</param>
            <returns>true if it is in range; otherwise false</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.Add(`0)">
            <summary>
            Add an item to the collection.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add several items to the collection as one batch operation.
            </summary>
            <param name="items">The items to add.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.ChangeRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Replace all the items in the collection with the specified items.
            </summary>
            <param name="items">New items for the collection.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.InsertCore(System.Int32,`0)">
            <summary>
            Insert an item into the collection.
            </summary>
            <param name="index">Index of the item to insert it before.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.ItemReplaced(`0)">
            <summary>
            Indicate that the specified item was replaced.
            </summary>
            <param name="item">The item that was replaced.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.Move(System.Int32,System.Int32)">
            <summary>
            Move an item from one location in the collection to another.
            </summary>
            <param name="oldIndex">The old index of the item.</param>
            <param name="newIndex">The new index for the item.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.ClearAndDisposeCore">
            <summary>
            Clear the items from the collection (despite the name it does not call dispose).
            TODO:  Fix to call dispose.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.FixSelection(System.Int32)">
            <summary>
            Derived classes that maintain a SelectedItem and/or SelectedIndex property should override
            this method to update these values.
            </summary>
            <param name="index">The index of the item that has been moved or removed.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Remove several items at once as a batch operation.
            </summary>
            <param name="index">The index of the first item.</param>
            <param name="count">The number of items.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.IndexOf(System.Object)">
            <summary>
            Gets the index location of the specified item within the collection.
            </summary>
            <param name="item">The item to find the index for.</param>
            <returns>The index of the item.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.IndexOf(`0)">
            <summary>
            Gets the index location of the specified item within the collection.
            </summary>
            <param name="item">The item to find the index for.</param>
            <returns>The index of the item.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.Add(System.Object)">
            <summary>
            Add an item to the collection.  Default behavior is to not allow that.  Create should be called normally instead.
            </summary>
            <remarks>
            Most objects within an object model hierarchy cannot be instantiated directly by a user.  Instead the user should
            call Create on the collection instead.  The default behavior for this method is to throw a NotSupportedException.
            </remarks>
            <param name="value">The new item to add.</param>
            <returns>A NotSupportedException if it cannot be added.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.Contains(`0)">
            <summary>
            Gets a value indicating whether the specified item is contained within the collection. 
            </summary>
            <remarks>
            NOTE: This property is needed solely to satisfy design guidelines. Derived classes implementing a public
            Contains member will use ContainsCore directly.
            </remarks>
            <param name="item">The item to find in the collection.</param>
            <returns>true if it exists in the collection; otherwise false</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.ContainsCore(`0)">
            <summary>
            Protected implementation of Contains that can be overridden by implementers.
            </summary>
            <param name="item">The item to find in the collection.</param>
            <returns>true if it exists in the collection; otherwise false</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the collection to an array, starting at a particular array index.
            </summary>
            <remarks>
            NOTE: This property is needed solely to satisfy design guidelines. Derived classes implementing a public
            CopyTo member will use CopyToCore directly.
            </remarks>
            <param name="destinationArray">The destination array.</param>
            <param name="destinationArrayIndex">The index in the destination array to start copying to.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copy the contents of the collection to the target array at the specified array index.
            </summary>
            <remarks>>
            NOTE: This property is needed solely to satisfy design guidelines. Derived classes implementing a public
            CopyTo member will use CopyToCore directly.
            </remarks>
            <param name="destinationArray">The destination array.</param>
            <param name="destinationArrayIndex">The index in the destination array to start copying to.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.CopyToCore(`0[],System.Int32)">
            <summary>
            Copy the contents of the collection to a target array of the specified type at the specified array index.
            </summary>
            <param name="destinationArray">The destination array.</param>
            <param name="destinationArrayIndex">The index in the destination array to start copying to.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.CopyToCore(System.Array,System.Int32)">
            <summary>
            Copy the contents of the collection to the target array at the specified array index.
            </summary>
            <param name="destinationArray">The destination array.</param>
            <param name="destinationArrayIndex">The index in the destination array to start copying to.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.Insert(System.Int32,`0)">
            <summary>
            Insert an item into the collection.
            </summary>
            <param name="index">Index to insert it at.</param>
            <param name="item">The item to insert.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.Insert(System.Int32,System.Object)">
            <summary>
            Insert an item into the collection.
            </summary>
            <param name="index">Index to insert the item at.</param>
            <param name="value">The item to insert.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the collection to an array starting at a particular array index.
            </summary>
            <param name="destinationArray">The destination array.</param>
            <param name="destinationArrayIndex">The index in array at which copying begins.</param>
        </member>
        <member name="P:Agilent.SA.Vsa.RemotableCollection`1.IsDisposeOnRemove">
            <summary>
            Gets a value indicating whether to call Dispose on an item when it is removed from the collection.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.RemotableCollection`1.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.RemotableCollection`1.Item(System.Int32)">
            <summary>
            Get the item at a specified index.
            </summary>
            <param name="index">Index of the item.</param>
            <returns>The item.</returns>
        </member>
        <member name="E:Agilent.SA.Vsa.RemotableCollection`1.Agilent#SA#Vsa#ICollectionBase#ItemPropertyChanged">
            <summary>
            An event for a property change on an item in the collection.
            </summary>
        </member>
        <member name="E:Agilent.SA.Vsa.RemotableCollection`1.CollectionChanged">
            <summary>
            Occurs when an item is added, removed, changed, moved, or the entire list is refreshed.
            </summary>
            <remarks>
            The CollectionChanged event cannot be used directly when crossing an <see cref="T:System.AppDomain"/> boundary, which
            occurs when accessing the Keysight 89600 VSA software application programming interface (API) from a macro
            or external client application. See <see cref="T:Agilent.SA.Vsa.NotifyCollectionChangedWrapper"/> for information on how
            to receive CollectionChanged notifications.
            </remarks>
            <seealso cref="T:Agilent.SA.Vsa.NotifyCollectionChangedWrapper"/>
        </member>
        <member name="E:Agilent.SA.Vsa.RemotableCollection`1.RemoteCollectionChanged">
            <summary>
            Occurs when an item is added, removed, changed, moved, or the entire list is refreshed.
            </summary>
            <remarks>
            The RemoteCollectionChanged event is a remotable version of the <see cref="E:Agilent.SA.Vsa.RemotableCollection`1.CollectionChanged"/> event. This event
            is used internally by the Keysight 89600 VSA software to propagate <see cref="E:Agilent.SA.Vsa.RemotableCollection`1.CollectionChanged"/>
            events to client applications. See <see cref="T:Agilent.SA.Vsa.NotifyCollectionChangedWrapper"/> for details on how to receive
            <see cref="E:Agilent.SA.Vsa.RemotableCollection`1.CollectionChanged"/> events.
            </remarks>
            <seealso cref="T:Agilent.SA.Vsa.NotifyCollectionChangedWrapper"/>
            <version>14.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.RemotableCollection`1.CountCore">
            <summary>
            Gets the count for the collection.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.RemotableCollection`1.IsFixedSize">
            <summary>
            Gets a value indicating whether the collection is a fixed size collection.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.RemotableCollection`1.IsReadOnly">
            <summary>
            Gets a value indicating whether IsReadOnly for IList&lt;T&gt; and ICollection&lt;T&gt; explicit interface.  
            This has no effect on the RemotableCollection base Add/Remove/Clear functionality.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.RemotableCollection`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is thread safe.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.RemotableCollection`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.RemotableCollection`1.System#Collections#ICollection#Count">
            <summary>
            Gets the number of elements contained in the collection.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.RemotableCollection`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the collection is synchronized (thread safe).
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.RemotableCollection`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the collection.
            </summary>
        </member>
        <member name="T:Agilent.SA.VsaInternal.IChangeGroup">
            <summary>
            An interface that can be implemented by objects that can perform a batch transaction.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.IChangeGroup">
            <summary>
            The IChangeGroup interface represents a handle to a group of configuration changes that will result in
            a single measurement update. See the <see cref="M:Agilent.SA.Vsa.Measurement.NewChangeGroup"/> method for further details.
            </summary>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IChangeGroup.Change">
            <summary>
            Performs any actions associated with the change group that implements this interface.
            </summary>
            <remarks>Implementers of this method must set IsChangePending to false before exiting this method.</remarks>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IChangeGroup.ChangeIfPending">
            <summary>
            Calls Change if IsChangePending is true.
            </summary>
        </member>
        <member name="P:Agilent.SA.VsaInternal.IChangeGroup.IsChangePending">
            <summary>
            Gets or sets a value indicating whether a change is pending.
            </summary>
            <remarks>Normally when some backing store changes then the backing store will automatically set this property to true.  
            Setting this property to false will erase knowledge that something changed.  Most clients of this interface should not set this property.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.CollectionChangeGroup.Dispose">
            <summary>
            Cleanup resources.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.RemotableCollection`1.VsaObservableCollection`1">
            <summary>
            Subclass of ObservableCollection that implements support for adding/removing/changing the collection as a batch operation (like AddRange).
            </summary>
            <remarks>Observable collection does not have support for AddRange, etc.  That means that clients get multiple
            notifications that the collection has changed when adding/removing individual items.  This subclass
            provides functionality for adding/removing/changing the collection as a batch instead of individual items.
            </remarks>
            <typeparam name="TItemType">The type of each item in the collection.</typeparam>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.VsaObservableCollection`1.#ctor(Agilent.SA.Vsa.RemotableCollection{`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.RemotableCollection`1.VsaObservableCollection`1"/> class.
            </summary>
            <param name="parent">The parent object of this instance (assumes it is used in a hierarchical object model).</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.VsaObservableCollection`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Override of OnCollectionChanged to enable collection changed events to work with CollectionView clients. 
            </summary>
            <remarks>
            <para>
            We need to override OnCollectionChanged to work around a shortcoming in WPF. It turns out that
            CollectionView and its derived classes cannot handle ranges in CollectionChanged events. In this
            override, we specifically check to see if the event target is of type CollectionView, and if so
            we just tell the view to Refresh, which rebuilds the view. Otherwise, we just invoke the handler
            as it otherwise would have been.
            </para>
            <para>We also override it so we can hide the "IgnoreCollectionChanged" functionality in this class.</para>
            </remarks>
            <param name="e">The event args to send.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.VsaObservableCollection`1.RemoveItem(System.Int32)">
            <summary>
            Remove an item from the collection (may call dispose on the object, see remarks).  
            </summary>
            <remarks>Calls dispose on the object if IsDisposeOnRemove is set to true on the RemotableCollection parent.
            </remarks>
            <param name="index">Index of the item to remove.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.VsaObservableCollection`1.ClearItems">
            <summary>
            Clear all items from the collection.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.VsaObservableCollection`1.AddRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Add several items at once to the collection.
            </summary>
            <param name="dataToAdd">The items to add.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotableCollection`1.VsaObservableCollection`1.ItemReplaced(`1)">
            <summary>
            Send out a notification that the contents of the indicated item in the collection has been replaced.
            </summary>
            <param name="data">The item whose contents changed.</param>
        </member>
        <member name="E:Agilent.SA.Vsa.RemotableCollection`1.VsaObservableCollection`1.CollectionChanged">
            <summary>
            Overrides the CollectionChanged event so that we can grab the handler list for it (otherwise
            the "handlers = CollectionChanged" statement won't compile).
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.FixedEqualizationValid">
            <summary>
            Is a data register valid for use in fixed equalization, or if not, why not.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.FixedEqualizationValid.Valid">
            <summary>
            Register is valid for use in fixed equalization
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.FixedEqualizationValid.NullNotValid">
            <summary>
            Register is null
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.FixedEqualizationValid.EmptyNotValid">
            <summary>
            Register is empty
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.FixedEqualizationValid.InsufficientDataNotValid">
            <summary>
            Register has fewer than 5 points
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.FixedEqualizationValid.NotFreqDomainNotValid">
            <summary>
            Register does not contain frequency domain data
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.FixedEqualizationValid.SegmentedDomainNotValid">
            <summary>
            Register has 2-D domain; not usable for fixed equalization
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.FixedEqualizationValid.ZeroDeltaFreqNotValid">
            <summary>
            Register domain spacing is 0 Hz
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.FixedEqualizationValid.UninitializedNotValid">
            <summary>
            Register is uninitialized
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.SpectralOrder">
            <summary>
            Frequency domain order of spectral lines at the IF output of an external converter relative to its input.
            </summary>
            <remarks>See <see cref="P:Agilent.SA.Vsa.Correction.ExternalConverterSpectrum">Correction.ExternalConverterSpectrum</see>.</remarks>
        </member>
        <member name="F:Agilent.SA.Vsa.SpectralOrder.Normal">
            <summary>
            Spectral lines are in normal order
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.SpectralOrder.Inverted">
            <summary>
            Spectral lines are inverted (mirrored) in frequency
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.Correction">
            <summary>User-configurable frequency converter correction and fixed equalization for logical channels.</summary>
            <remarks>
            	<para>This class has properties and methods that allow the user to apply fixed equalization to a logical channel, and also properties to compensate for the
            presence of an external frequency converter.</para>
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Correction.ValidateRegister(Agilent.SA.Vsa.DataRegister)">
            <summary>
            Used to check if a data register can be used for fixed equalization. 
            </summary>
            <param name="dataRegister">The register to validate.</param>
            <remarks>
            Only data registers containing frequency-domain data can be used for fixed equalization.
            </remarks>
            <returns>an <see cref="T:Agilent.SA.Vsa.FixedEqualizationValid">enumeration</see> that indicates "valid" or the reason why the specified data is not valid for fixed equalization.</returns>
        </member>
        <member name="P:Agilent.SA.Vsa.Correction.IsExternalConverterEnabled">
            <summary>
              Gets or sets a value indicating whether an external down converter correction is being used.  
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Correction.ExternalConverterRFCenter">
            <summary>
             Gets or sets the center frequency at the RF input of the external frequency converter.  
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Correction.ExternalConverterIFCenter">
            <summary>
             Gets or sets the center frequency at the IF output of the external frequency converter.  
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Correction.ExternalConverterIFBandwidth">
            <summary>
            Gets or sets the maximum measurement bandwidth at the IF output of the external frequency converter.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Correction.ExternalConverterSpectrum">
            <summary>
            Gets or sets how the external frequency converter inverts (mirrors) the spectrum around the center frequency.
            </summary>
            <remarks>
            	<para>A signal's spectrum at the output of a frequency converter may be inverted in frequency from the the spectrum at the input (i.e. it may be a mirror image of
            the input spectrum). In this case you should set this property to Inverted.</para>
            	<para>Setting this property (rather than using the <see cref="P:Agilent.SA.Vsa.Frequency.IsMirrored">Measurement.Frequency.IsMirrored</see> property) allows IF external correction to
            work properly, and the VSA will correctly display the spectrum as it appears at the frequency converter input.</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Correction.FixedEqualizerRegister">
            <summary>
            Gets or sets which data register supplies data to the fixed equalizer.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Correction.IsFixedEqualizerEnabled">
            <summary>
            Gets or sets a value indicating whether the fixed equalizer is enabled.  
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Correction.IsFixedEqualizerInverted">
            <summary>Gets or sets a value indicating whether the fixed equalization data is mathematically inverted before being applied.</summary>
            <remarks>
            	<para>The inversion referred to here is not to be confused with the spectral order in the frequency domain. Here, inversion refers to equalizer data for a
            particular frequency: EqualizeData(f).</para>
            	<para>When IsFixedEqualizerInverted is false, then the input data spectrum is effectively multiplied by EqualizeData(f).</para>
            	<para>When IsFixedEqualizerInverted is true, then the input data spectrum is effectively divided by EqualizeData(f).</para>
            	<para>Note that the equalization is done via a time domain filter, but the frequency domain effects are as explained above.</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Correction.IsFixedEqualizerRelative">
            <summary>
            Gets a value indicating whether the fixed equalizer maps frequency relatively. 
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.CorrectionCollection">
            <summary>
            Collection of Correction objects, indexed by logical channel
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.ChannelId">
            <summary>
            Input Channel identification.
            </summary>
            <remarks>
            <para>
            The <see cref="M:Agilent.SA.Vsa.Input.ChangeLogicalChannels(Agilent.SA.Vsa.ChannelId[])"/> takes an argument(s) of this structure in order to specify specific channels to use.  
            Each channel object in the <see cref="P:Agilent.SA.Vsa.Digital.Channels"/>, and <see cref="P:Agilent.SA.Vsa.Analog.Channels"/> collections
            has an Id property that uses this structure.
            </para>
            <para>
            The structure uniquely identifies a specific channel for the current hardware configuration.  This identification is unique within the context of the
            kind of hardware configuration being used.  The value of this structure may usually be used with different models of instruments as long as those instruments
            are from the same family or series.  However, a ChannelId from one kind of instrument may mean something totally different in another kind of 
            instrument.  For example, the ChannelId for the first channel on a scope is "1:1" and is the first channel on the scope which is a baseband input channel, while
            "1:1" on an X Series Signal Analyzer is the RF input channel.  ChannelIds do not vary if options are present or not on the hardware, but the channel that 
            corresponds to a specific ChannelId may not be present if the hardware option is not present.  For example the ChannelId of "1:2" is the I input channel on 
            an X Series Signal Analyzer and may not be present if the BBIQ hardware option is not present.  If two X Series Signal Analyzer instruments are both used in
            a hardware configuration then the first one will be part of group 1 and the send part of group 2.  In that case the ChannelId allows for specifying a specific
            input channel even though options may be present or not on the first instrument.
            </para>
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.ChannelId.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.ChannelId"/> struct that contains the specified channel number and a group number of 1. 
            </summary>
            <param name="channel">The channel number (channel identifier within the context of the 1st group) value.  
            Group number is assumed to be 1.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.ChannelId.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.ChannelId"/> struct that contains the specified values.
            </summary>
            <param name="group">The group number value of the ChannelId structure.</param>
            <param name="channel">The channel number (channel identifier within the context of the group) value of the ChannelId structure.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.ChannelId.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.ChannelId">ChannelId</see> struct based upon a string that contains the specified values.
            </summary>
            <param name="channelId">String in the format of &lt;group&gt;:&lt;channel&gt; where the delimiter is ':'.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.ChannelId.ToString">
            <summary>
            Returns a String representation of the ChannelId. (Overrides <see cref="M:System.ValueType.ToString"/>.)
            </summary>
            <returns>A string representation of the current ChannelId structure.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.ChannelId.op_Equality(Agilent.SA.Vsa.ChannelId,Agilent.SA.Vsa.ChannelId)">
            <summary>
            Compares two ChannelId structures for equality.
            </summary>
            <param name="left">The first instance of ChannelId to compare.</param>
            <param name="right">The second instance of ChannelId to compare.</param>
            <returns>true if the two instances of ChannelId have the same Group and Channel; otherwise, false.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.ChannelId.op_Inequality(Agilent.SA.Vsa.ChannelId,Agilent.SA.Vsa.ChannelId)">
            <summary>
            Compares two ChannelId structures to determine if they are not equal.
            </summary>
            <param name="left">The first instance of ChannelId to compare.</param>
            <param name="right">The second instance of ChannelId to compare.</param>
            <returns>true if the two instances of ChannelId do not have the same Group and Channel; otherwise, false.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.ChannelId.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current ChannelId instance. 
            (Overrides <see cref="M:System.ValueType.Equals(System.Object)"/>.)		 
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>true if the specified object has the same Group and Channel as the current instance; otherwise, false.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.ChannelId.GetHashCode">
            <summary>
            Gets a hash code for the ChannelId. (Overrides <see cref="M:System.ValueType.GetHashCode"/>.)
            </summary>
            <returns>A hash code for the ChannelId.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.ChannelId.Equals(Agilent.SA.Vsa.ChannelId)">
            <summary>
            Determines whether the specified ChannelId is equal to the current ChannelId instance.		 
            </summary>
            <param name="other">The ChannelId structure to compare with the current instance.</param>
            <returns>true if the specified ChannelId has the same Group and Channel as the current instance; otherwise, false.</returns>
        </member>
        <member name="P:Agilent.SA.Vsa.ChannelId.Channel">
            <summary>
            Gets the channel identifier within the group.  One based channel number.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.ChannelId.Group">
            <summary>
            Gets the group number within the hardware configuration.  One based Group.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.AnalogChannelCollection">
            <summary>The AnalogChannelCollection class contains a collection of analog input channel objects.</summary>
            <remarks>See <see cref="P:Agilent.SA.Vsa.Analog.Channels">Measurement.Input.Analog.Channels</see>.</remarks>
        </member>
        <member name="T:Agilent.SA.Vsa.AnalogChannelCoupling">
            <summary>
            Specifies the input channel coupling.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.AnalogChannelCoupling.AC">
            <summary>
            Specifies AC coupling.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.AnalogChannelCoupling.DC">
            <summary>
            Specifies DC coupling.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.AnalogChannelConnection">
            <summary>
            Specifies the physical input impedance and terminating circuit of the measurement hardware. 
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.AnalogChannelConnection.SingleEnded">
            <summary>
            Specifies a single ended input (unbalanced termination)
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.AnalogChannelConnection.Differential">
            <summary>
            Specifies a differential input (balanced termination).
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.AnalogChannel">
            <summary>This class is for setting input parameters for individual analog channels.</summary>
            <remarks>
            The channels represented by this class are physical hardware channels. 
            </remarks>
        </member>
        <member name="T:Agilent.SA.Vsa.InputChannel">
            <summary>
            Implements an input channel.
            </summary>
            <summary>
            Represents an input channel.  
            </summary>
            <remarks>All input channel objects derive from this InputChannel class. The <see cref="T:Agilent.SA.Vsa.AnalogChannel"/> 
            and <see cref="T:Agilent.SA.Vsa.DigitalChannel"/> classes are used for properties specific to those types of channels.</remarks>
            <seealso cref="T:Agilent.SA.Vsa.AnalogChannel"/>
            <seealso cref="T:Agilent.SA.Vsa.DigitalChannel"/>
            <seealso cref="T:Agilent.SA.Vsa.AnalogChannelCollection"/>
            <seealso cref="T:Agilent.SA.Vsa.DigitalChannelCollection"/>
        </member>
        <member name="P:Agilent.SA.Vsa.InputChannel.Id">
            <summary>
            Gets the unique identifier for the input channel.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.InputChannel.DisplayName">
            <summary>
            Gets the display name for the input channel.
            </summary>
            <remarks>This should be used for display purposes only.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.AnalogChannel.AutoRange">
            <summary>
            Performs a one-shot auto-range operation on the channel.
            </summary>
            <seealso cref="M:Agilent.SA.Vsa.Analog.AutoRange"></seealso>
        </member>
        <member name="M:Agilent.SA.Vsa.AnalogChannel.RangeNearest(System.Double)">
            <summary>
            Returns the nearest valid range (for this channel with the current hardware), in Volts peak, to the one specified.
            </summary>
            <param name="rangeVolts">The value for which to determine the nearest valid range.</param>
            <returns>Nearest range in volts peak.</returns>
        </member>
        <member name="P:Agilent.SA.Vsa.AnalogChannel.Coupling">
            <summary>
            Gets or sets whether input coupling is AC or DC.
            </summary>
            <remarks>
            <para>
            This sets or gets the input coupling for this channel.  For multi-channel scenarios the <see cref="P:Agilent.SA.Vsa.Analog.Coupling"/> 
            property may be used to set the coupling across all channels at once without having to explicitly iterate across each channel.
            </para>
            </remarks>
            <value>Whether the input is AC or DC coupled.  The default is AC.</value>
        </member>
        <member name="P:Agilent.SA.Vsa.AnalogChannel.Range">
            <summary>
            Gets or sets the input range (in Vpk) of the input channel.
            </summary>
            <remarks>
            <para>
            Most hardware only allows a limited set of allowable values for the input range, which is dependent
            upon the Adc hardware, down converter, and input/calibrator module currently being used.  The
            range specified is rounded to the nearest available range.
            </para>
            <para>
            The <see cref="M:Agilent.SA.Vsa.IPropertyInfo.ValidValues``1(System.String)">ValidValues&lt;T&gt;</see>("Range") method can be used to retrieve a 
            list of valid ranges for this channel.
            </para>
            <para>
            This sets or gets the input range for this channel.  For multi-channel scenarios the <see cref="P:Agilent.SA.Vsa.Analog.Range"/> 
            property may be used to set the range across all channels at once without having to explicitly iterate across each channel.
            </para>
            </remarks>
            <value>The range of the input channel.  The default is 10.0 Vpk unless the hardware is not capable of that in which case it 
            is coerced to the highest value possible with the current hardware.</value>
        </member>
        <member name="P:Agilent.SA.Vsa.AnalogChannel.Connection">
            <summary>
            Gets or sets the input connection type (Single Ended or Differential).
            </summary>
            <remarks>
            <para>
            The <see cref="M:Agilent.SA.Vsa.IPropertyInfo.ValidValues``1(System.String)">ValidValues&lt;T&gt;</see>("Connection") method can be used to retrieve a 
            list of valid connections for this channel.
            </para>
            <para>
            This sets or gets the input connection for this channel.  For multi-channel scenarios the <see cref="P:Agilent.SA.Vsa.Analog.Connection"/> 
            property may be used to set the connection across all channels at once without having to explicitly iterate across each channel.
            </para>
            </remarks>
            <value>The connection of the input channel.  The default is Single Ended.</value>
        </member>
        <member name="P:Agilent.SA.Vsa.AnalogChannel.Impedance">
            <summary>
            Gets or sets the impedance for the input connection.
            </summary>
            <remarks>
            <para>
            The <see cref="M:Agilent.SA.Vsa.IPropertyInfo.ValidValues``1(System.String)">ValidValues&lt;T&gt;</see>("Impedance") method can be used to retrieve a 
            list of valid impedances for this channel.
            </para>
            <para>
            This sets or gets the impedance for this channel.  For multi-channel scenarios the <see cref="P:Agilent.SA.Vsa.Analog.Impedance"/> 
            property may be used to set the impedance across all channels at once without having to explicitly iterate across each channel.
            </para>
            </remarks>
            <value>The impedance of the input channel.  The default is 50 ohms unless the hardware is not capable of that.</value>
        </member>
        <member name="P:Agilent.SA.Vsa.AnalogChannel.RefImpedance">
            <summary>
            Gets or sets the reference impedance for the channel.
            </summary>
            <remarks>
            	<para>
            		<strong>Note:</strong>
            		<see cref="P:Agilent.SA.Vsa.AnalogChannel.RefImpedanceIsConnection"/> must be false in order to be able to set this value.</para>
            	<para>
            This sets or gets the reference impedance for this channel.  For multi-channel scenarios the <see cref="P:Agilent.SA.Vsa.Analog.RefImpedance"/> 
            property may be used to set the reference impedance across all channels at once without having to explicitly iterate across each channel.
            </para>
            </remarks>
            <value>The reference impedance of the input channel. The default is the same as the connection <see cref="P:Agilent.SA.Vsa.AnalogChannel.Impedance"/> (usually 50 Ohms).</value>
        </member>
        <member name="P:Agilent.SA.Vsa.AnalogChannel.RefImpedanceIsConnection">
            <summary>
            Gets or sets a value indicating whether the reference impedance follows the connector impedance.
            </summary>
            <remarks>
            <para>
            Setting RefImpedanceIsConnection to True causes the value of RefImpedance to be
            set so it is identical to the impedance value of the connection.
            </para>
            <para><strong>Note:</strong>  <see cref="P:Agilent.SA.Vsa.AnalogChannel.RefImpedanceIsConnection"/> must be false in order to set the <see cref="P:Agilent.SA.Vsa.AnalogChannel.RefImpedance"/> property.</para>
            <para>
            This sets or gets whether RefImpedance follows the connector Impedance for this channel.  For multi-channel scenarios the 
            <see cref="P:Agilent.SA.Vsa.Analog.RefImpedanceIsConnection"/> 
            property may be used to set whether RefImpedance follows the connector Impedance across all channels at once without having to 
            explicitly iterate across each channel.
            </para>
            </remarks>
            <value>Whether the reference impedance is the same as the input impedance.  The default is true.</value>
        </member>
        <member name="P:Agilent.SA.Vsa.AnalogChannel.MixerLevel">
            <summary>
            Gets or sets the mixer level in dB relative to the factory default setting for the input channel.
            </summary>
            <remarks>
            <para>
            The mixer level property allows control over the compromise between noise and 
            distortion performance of the acquisition hardware. The value is in dB relative to the 
            factory default setting for the particular hardware in use. Different front ends support 
            different values for this parameter. Both the supported range and quantization may vary. 
            The requested setting will be rounded to the nearest supported setting. The actual 
            setting used can be verified by reading the property immediately after setting it. Some 
            hardware does not support control of the mixer level. For these front ends, the setting 
            will be clamped to 0 dB.
            </para>
            <para>
            The <see cref="M:Agilent.SA.Vsa.IPropertyInfo.ValidValues``1(System.String)">ValidValues&lt;T&gt;</see>("MixerLevel") method can be used to retrieve a 
            list of valid mixer levels for this channel. 
            </para>
            <para>
            The <see cref="M:Agilent.SA.Vsa.IPropertyInfo.IsEnabled(System.String)">IsEnabled</see>("MixerLevel") method can be used to determine whether
            this property is supported or not on this channel.
            </para>
            <para>
            This sets or gets the mixer level for this channel.  For multi-channel scenarios the <see cref="P:Agilent.SA.Vsa.Analog.MixerLevel"/> 
            property may be used to set the mixer level across all channels at once without having to explicitly iterate across each channel.
            </para>
            </remarks>
            <value>The mixer level of the input channel.  The default is 0 dB.</value>
        </member>
        <member name="P:Agilent.SA.Vsa.AnalogChannel.ExternalMixer">
            <summary>
            Gets a reference to the external mixer setup.
            </summary>
            <returns>Null if the type of channel is not an external mixer channel.</returns>
            <version>15.00</version>
        </member>
        <member name="T:Agilent.SA.Vsa.EnumUtilities">
            <summary>
            This class contains a set of utility methods to manipulate flag-type enumerated values. Some third-party
            packages are unable to get or set flag-type enumerated values where two or more bits are set. The methods
            in this class allow such tools to manipulate the enumerated values as 32-bit integers.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.EnumUtilities.GetEnumAsInt32(Agilent.SA.Vsa.RemotableObject,System.String)">
            <summary>
            This method retrieves the value of the specified property as a 32-bit integer.
            </summary>
            <remarks>Some 3rd party packages are unable to manipulate flag-type enumerations. This method allows
            such packages to retrieve a flag-type enumerated value as a 32-bit integer. The package can then use
            bitwise integer operations to test for specific flags.</remarks>
            <param name="target">The object on which to access the flags-type enumerated property.</param>
            <param name="propertyName">The name of the flag-type enumerated property.</param>
            <returns>A 32-bit integer value representing the current value of the property.</returns>
            <exception cref="T:System.ArgumentException">Is raised if either argument is null, or if the 
            <paramref name="propertyName"/> property cannot be found on <paramref name="target"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised of the type of the named property is not a
            flag-type enumeration.</exception>
        </member>
        <member name="M:Agilent.SA.Vsa.EnumUtilities.SetEnumFromInt32(Agilent.SA.Vsa.RemotableObject,System.String,System.Int32)">
            <summary>
            This method sets the value of the specified property from the supplied 32-bit integer.
            </summary>
            <remarks>Some 3rd party packages are unable to manipulate flag-type enumerations. This method allows
            such packages to set a flag-type enumerated value from a 32-bit integer. The package can then use
            bitwise integer operations to construct an integer containing the required flags.</remarks>
            <param name="target">The object on which to access the flags-type enumerated property.</param>
            <param name="propertyName">The name of the flag-type enumerated property.</param>
            <param name="value">The value from which to set the property.</param>
            <exception cref="T:System.ArgumentException">Is raised if either the <paramref name="target"/> or
            <paramref name="propertyName"/> argument is null, or if the 
            <paramref name="propertyName"/> property cannot be found on <paramref name="target"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Is raised of the type of the named property is not a
            flag-type enumeration, or if the named property is not writable.</exception>
        </member>
        <member name="T:Agilent.SA.Vsa.ExternalMixerSelection">
            <summary>
            Specifies the input channel coupling.
            </summary>
            <version>15.00</version>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.A11970">
            <summary>
            Agilent 11970 A Band
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.UsbV">
            <summary>
            USB Smart Mixer V Band
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.UsbVExtended">
            <summary>
            USB Smart Mixer Extended V Band
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.UsbW">
            <summary>
            USB Smart Mixer W Band
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.UsbCoax">
            <summary>
            USB Smart Mixer Multi Band
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.Custom">
            <summary>
            Custom mixer
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.Q11970">
            <summary>
            Agilent 11970 Q Band
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.V11970">
            <summary>
            Agilent 11970 V Band
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.U11970">
            <summary>
            Agilent 11970 U Band
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.W11970">
            <summary>
            Agilent 11970 W Band
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.ABand">
            <summary>
            A Band (one harmonic value, doubler disabled)
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.DBand">
            <summary>
            D Band (one harmonic value, doubler disabled)
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.EBand">
            <summary>
            E Band (one harmonic value, doubler disabled)
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.FBand">
            <summary>
            F Band (one harmonic value, doubler disabled)
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.GBand">
            <summary>
            G Band (one harmonic value, doubler disabled)
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.KBand">
            <summary>
            K Band (one harmonic value, doubler disabled)
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.JBand">
            <summary>
            J Band (one harmonic value, doubler disabled)
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.QBand">
            <summary>
            Q Band (one harmonic value, doubler disabled)
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.VBand">
            <summary>
            V Band (one harmonic value, doubler disabled)
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.UBand">
            <summary>
            U Band (one harmonic value, doubler disabled)
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.WBand">
            <summary>
            W Band (one harmonic value, doubler disabled)
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.YBand">
            <summary>
            Y Band (one harmonic value, doubler disabled)
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.Extended">
            <summary>
            Extended (>325 GHz, one harmonic value, doubler disabled)
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.DBandDoubler">
            <summary>
            D Band (one harmonic value, doubler enabled)
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.FBandDoubler">
            <summary>
            F Band (one harmonic value, doubler enabled)
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.GBandDoubler">
            <summary>
            G Band (one harmonic value, doubler enabled)
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.JBandDoubler">
            <summary>
            J Band (one harmonic value, doubler enabled)
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.KBandDoubler">
            <summary>
            K Band (one harmonic value, doubler enabled)
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.QBandDoubler">
            <summary>
            Q Band (one harmonic value, doubler enabled)
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.VBandDoubler">
            <summary>
            V Band (one harmonic value, doubler enabled)
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.WBandDoubler">
            <summary>
            W Band (one harmonic value, doubler enabled)
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.YBandDoubler">
            <summary>
            Y Band (one harmonic value, doubler enabled)
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.ExtendedDoubler">
            <summary>
            Extended (>325 GHz, one harmonic value, doubler enabled)
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.AMultiband">
            <summary>
            A Band (multiple harmonics and/or doubler)
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.EMultiband">
            <summary>
            E Band (multiple harmonics and/or doubler)
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.UMultiband">
            <summary>
            U Band (multiple harmonics and/or doubler)
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ExternalMixerSelection.UsbE">
            <summary>
            USB Smart Mixer E Band
            </summary>
            <version>16.00</version>
        </member>
        <member name="T:Agilent.SA.Vsa.ExternalMixer">
            <summary>
            Represents settings that are specific to an external mixer input.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.ExternalMixer.Bias">
            <summary>
            Gets or sets the bias source for use with an external mixer.
            </summary>
            <remarks>
            Adjusts an internal bias source for use with external mixers.  The shunt
            current will only be applied if the Mixer Bias is enabled.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.ExternalMixer.IsBiasEnabled">
            <summary>
            Gets or sets a value indicating whether the mixer bias is applied
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.ExternalMixer.CableIFLoss">
            <summary>
            Gets or sets the loss at the IF in the IF/LO cable.
            </summary>
            <remarks>
            <para>
            The loss at the IF in the IF/LO cable can be compensated for with this property by entering 
            the loss in dB for the cable.
            </para>
            <para>
            The cable loss will depend on the IF frequency.  The IF frequency varies depending on which IF path
            (signal path) the measurement is using.  For best accuracy, characterize the cable's loss for 
            the IF frequency or frequencies that will be used.
            </para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.ExternalMixer.MixerSelection">
            <summary>
            Gets or sets the type or band of external mixer used.
            </summary>
            <remarks>
            The USB mixer selections cannot be set directly, but instead will automatically be set when
            the USB Smart Mixer is plugged into the analyzer's USB port.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.ExternalMixer.Subbands">
            <summary>
            Gets the collection of <see cref="T:Agilent.SA.Vsa.ExternalMixerSubband"/> objects representing the sub bands for the external mixer setup.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.ExternalMixer.SmartMixerConnected">
            <summary>
            Gets a value indicating whether a smart mixer is currently connected.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.ExternalMixer.Model">
            <summary>
            Gets the model for the smart mixer (USB mixer).
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.ExternalMixer.SerialNumber">
            <summary>
            Gets the serial number for the smart mixer.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.ExternalMixerSubband">
            <summary>
            This class is for describing an external mixer sub band.
            </summary>
            <version>15.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.ExternalMixerSubband.Harmonic">
            <summary>
            Gets or sets the harmonic to use for this band.
            </summary>
            <remarks>
            Can only be set when the MixerType is set to Custom, otherwise an ArgumentInvalidException will be thrown.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.ExternalMixerSubband.LODoublerOn">
            <summary>
            Gets or sets a value indicating whether the LO doubler is on for this sub band.
            </summary>
            <remarks>
            Can only be set when the MixerType is set to Custom, otherwise an ArgumentInvalidException will be thrown.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.ExternalMixerSubband.FrequencyMin">
            <summary>
            Gets the minimum frequency for this sub band.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.ExternalMixerSubband.FrequencyMax">
            <summary>
            Gets the maximum frequency for this sub band.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.ExternalMixerSubbandCollection">
            <summary>
            The ExternalMixerBandCollection class contains a collection of all the external mixer band objects for a given mixer.
            </summary>
            <version>15.00</version>
        </member>
        <member name="T:Agilent.SA.VsaInternal.DebugPanelAttribute">
            <summary>
            An attribute to indicate that a property can be controlled from the debug GUI panel.
            </summary>
        </member>
        <member name="M:Agilent.SA.VsaInternal.DebugPanelAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.VsaInternal.DebugPanelAttribute"/> class.
            </summary>
        </member>
        <member name="T:Agilent.SA.VsaInternal.StepActivity">
            <summary>Specifies whether the limit is one continuous line or a set of connected dots.</summary>
        </member>
        <member name="F:Agilent.SA.VsaInternal.StepActivity.Update">
            <summary>Specifies the step is updating.</summary>
        </member>
        <member name="F:Agilent.SA.VsaInternal.StepActivity.Recompute">
            <summary>Specifies the step is recomputing.</summary>
        </member>
        <member name="F:Agilent.SA.VsaInternal.StepActivity.Execute">
            <summary>Specifies the step is executing.</summary>
        </member>
        <member name="T:Agilent.SA.VsaInternal.StepActivityEventArgs">
            <summary>
            Implements arguments for when step has new activity.
            </summary>
        </member>
        <member name="M:Agilent.SA.VsaInternal.StepActivityEventArgs.#ctor(Agilent.SA.VsaInternal.StepActivity)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.VsaInternal.StepActivityEventArgs"/> class.
            </summary>
            <param name="stepActivity">The activity of step(s).</param>
        </member>
        <member name="P:Agilent.SA.VsaInternal.StepActivityEventArgs.StepActivity">
            <summary>
            Gets the current activity on the step(s).
            </summary>
        </member>
        <member name="T:Agilent.SA.VsaInternal.IInternalProcessingExtension">
            <summary>
            Internal interface between a processing extension and the VSA
            </summary>
            <version>16.00</version>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IInternalProcessingExtension.OnSetupRecalled(System.Object,System.EventArgs)">
            <summary>
            A recall measurement state has finished
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">event arguments</param>
            <version>16.00</version>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IInternalProcessingExtension.OnSetupRecalling(System.Object,System.EventArgs)">
            <summary>
            A recall measurement state has started
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">event arguments</param>
            <version>16.00</version>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IInternalProcessingExtension.OnSetupRestored(System.Object,System.EventArgs)">
            <summary>
            A measurement has finished being restored (preset or recall).
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">event arguments</param>
            <version>16.00</version>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IInternalProcessingExtension.OnSetupRestoring(System.Object,System.EventArgs)">
            <summary>
            A measurement has started being restored (preset or recall).
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">event arguments</param>
            <version>16.00</version>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IInternalProcessingExtension.OnSetupSaved(System.Object,System.EventArgs)">
            <summary>
            A save measurement setup has finished.
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">event arguments</param>
            <version>16.00</version>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IInternalProcessingExtension.OnSetupSaving(System.Object,System.EventArgs)">
            <summary>
            A save measurement setup has started.
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">event arguments</param>
            <version>16.00</version>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IInternalProcessingExtension.CreateSteps">
            <summary>
            The processing extension should now create its CustomStep(s).
            </summary>
            <version>16.00</version>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IInternalProcessingExtension.ConnectSteps">
            <summary>
            The processing extension should now connect its CustomStep(s).
            </summary>
            <version>16.00</version>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IInternalProcessingExtension.RemoveSteps">
            <summary>
            The processing extension should now remove its CustomStep(s).
            </summary>
            <version>16.00</version>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IInternalProcessingExtension.OnAfterAllSteps(System.Object,Agilent.SA.VsaInternal.StepActivityEventArgs)">
            <summary>
            The last measurement/trace step has new activity.
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">event arguments</param>
            <version>17.00</version>
        </member>
        <member name="P:Agilent.SA.VsaInternal.IInternalProcessingExtension.Priority">
            <summary>
            Gets the step connection priority of this extension.
            </summary>
            <version>16.00</version>
        </member>
        <member name="T:Agilent.SA.Vsa.ProcessingExtension">
            <summary>
            Base class for all processing extensions.
            </summary>
            <version>16.00</version>
            <summary>
            Base class for all processing extensions.
            </summary>
            <version>16.00</version>
        </member>
        <member name="F:Agilent.SA.Vsa.ProcessingExtension.DefaultPriorityAfterAcquire">
            <summary>
            Default priority to use if the processing extension's CustomStep(s) are AfterAcquire.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ProcessingExtension.DefaultPriorityInputNames">
            <summary>
            Default priority to use if the processing extension's CustomStep(s) are AtInputNames.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ProcessingExtension.DefaultPriorityAfterMeasure">
            <summary>
            Default priority to use if the processing extension's CustomStep(s) are AfterMeasure.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.ProcessingExtension.Agilent#SA#VsaInternal#IInternalProcessingExtension#OnSetupRecalled(System.Object,System.EventArgs)">
            <summary>
            Call OnSetupRecalled.
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">event args</param>
        </member>
        <member name="M:Agilent.SA.Vsa.ProcessingExtension.Agilent#SA#VsaInternal#IInternalProcessingExtension#OnSetupRecalling(System.Object,System.EventArgs)">
            <summary>
            Call OnSetupRecalling.
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">event args</param>
        </member>
        <member name="M:Agilent.SA.Vsa.ProcessingExtension.Agilent#SA#VsaInternal#IInternalProcessingExtension#OnSetupRestored(System.Object,System.EventArgs)">
            <summary>
            Call OnSetupRestored.
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">event args</param>
        </member>
        <member name="M:Agilent.SA.Vsa.ProcessingExtension.Agilent#SA#VsaInternal#IInternalProcessingExtension#OnSetupRestoring(System.Object,System.EventArgs)">
            <summary>
            Call OnSetupRestoring.
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">event args</param>
        </member>
        <member name="M:Agilent.SA.Vsa.ProcessingExtension.Agilent#SA#VsaInternal#IInternalProcessingExtension#OnSetupSaved(System.Object,System.EventArgs)">
            <summary>
            Call OnSetupSaved.
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">event args</param>
        </member>
        <member name="M:Agilent.SA.Vsa.ProcessingExtension.Agilent#SA#VsaInternal#IInternalProcessingExtension#OnSetupSaving(System.Object,System.EventArgs)">
            <summary>
            Call OnSetupSaving.
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">event args</param>
        </member>
        <member name="M:Agilent.SA.Vsa.ProcessingExtension.Agilent#SA#VsaInternal#IInternalProcessingExtension#OnAfterAllSteps(System.Object,Agilent.SA.VsaInternal.StepActivityEventArgs)">
            <summary>
            Call OnAfterAllSteps.
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">event args</param>
        </member>
        <member name="M:Agilent.SA.Vsa.ProcessingExtension.Agilent#SA#VsaInternal#IInternalProcessingExtension#ConnectSteps">
            <summary>
            Call ConnectSteps.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.ProcessingExtension.Agilent#SA#VsaInternal#IInternalProcessingExtension#CreateSteps">
            <summary>
            Call CreateSteps.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.ProcessingExtension.Agilent#SA#VsaInternal#IInternalProcessingExtension#RemoveSteps">
            <summary>
            Call RemoveSteps.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.ProcessingExtension.OnSetupRecalled(System.Object,System.EventArgs)">
            <summary>
            Default implementation of OnSetupRecalled.
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">event args</param>
        </member>
        <member name="M:Agilent.SA.Vsa.ProcessingExtension.OnSetupRecalling(System.Object,System.EventArgs)">
            <summary>
            Default implementation of OnSetupRecalling.
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">event args</param>
        </member>
        <member name="M:Agilent.SA.Vsa.ProcessingExtension.OnSetupRestored(System.Object,System.EventArgs)">
            <summary>
            Default implementation of OnSetupRestored.
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">event args</param>
        </member>
        <member name="M:Agilent.SA.Vsa.ProcessingExtension.OnSetupRestoring(System.Object,System.EventArgs)">
            <summary>
            Default implementation of OnSetupRestoring.
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">event args</param>
        </member>
        <member name="M:Agilent.SA.Vsa.ProcessingExtension.OnSetupSaved(System.Object,System.EventArgs)">
            <summary>
            Default implementation of OnSetupSaved.
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">event args</param>
        </member>
        <member name="M:Agilent.SA.Vsa.ProcessingExtension.OnSetupSaving(System.Object,System.EventArgs)">
            <summary>
            Default implementation of OnSetupSaving.
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">event args</param>
        </member>
        <member name="M:Agilent.SA.Vsa.ProcessingExtension.CreateSteps">
            <summary>
            Default implementation of CreateSteps.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.ProcessingExtension.ConnectSteps">
            <summary>
            Default implementation of ConnectSteps.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.ProcessingExtension.RemoveSteps">
            <summary>
            Default implementation of RemoveSteps.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.ProcessingExtension.OnAfterAllSteps(System.Object,Agilent.SA.VsaInternal.StepActivityEventArgs)">
            <summary>
            Default implementation of OnAfterAllSteps.
            </summary>
            <param name="sender">The object sending the event</param>
            <param name="e">event args</param>
        </member>
        <member name="P:Agilent.SA.Vsa.ProcessingExtension.Parent">
            <summary>
            Gets the parent object for the processing extension.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.ProcessingExtension.Agilent#SA#VsaInternal#IInternalProcessingExtension#Priority">
            <summary>
            Gets priority.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.ProcessingExtension.Priority">
            <summary>
            Gets the default priority (default implementation).
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.ProcessingExtension.KeyContext">
            <summary>
            By default, decorate the key names for all processing extensions with the namespace of the
            extension to minimize the possibility of state key collisions.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.ProcessingExtension.Measurement">
            <summary>
            Gets a handle to the extension's measurement.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.ProcessingExtension.State">
            <summary>
            Gets a handle to the extension's measurement state.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.ProcessingExtension.Enabled">
            <summary>
            Gets a value indicating whether the extension is enabled.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.ProcessingExtension.Name">
            <summary>
            Gets the name of the extension.
            </summary>
            <remarks>
            The default value, if not overridden by the derived class, is determined as follows:
            <para/>
            * If the namespace of the public interface starts with the string "Agilent.SA.Vsa.ProcessingExtensions.",
            that string is removed and the extension name becomes whatever is left. For an extension with the type
            "Agilent.SA.Vsa.ProcessingExtensions.Sample.ProcessingExtension" would be named "Sample".
            <para/>
            * If the namespace of the public interface starts with any other string, the default extension name is
            the entire string. For an extension with the type "Company.Group.MyExtension.ProcessingExtension", the
            default name would be "Company.Group.MyExtension".
            </remarks>
            <version>16.00</version>
        </member>
        <member name="T:Agilent.SA.VsaComposition.ScopedExportAttribute">
            <summary>
            A class that defines an attribute to indicate the scoping of an MEF export within an object model hierarchy.
            </summary>
            <remarks>
            Note:  Keep this class backward compatible.  It is used by HardwareExtensions that can be developed
                   independent of the regular VSA build and release.  The VsaHardwareInterfaces project references
                   VsaComposition in order to reference this class.
            </remarks>
        </member>
        <member name="M:Agilent.SA.VsaComposition.ScopedExportAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.VsaComposition.ScopedExportAttribute"/> class.  
            A new container is created for new instances of the exported contract.
            </summary>
            <param name="contractType">The type being exported.</param>
        </member>
        <member name="M:Agilent.SA.VsaComposition.ScopedExportAttribute.#ctor(System.Type,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.VsaComposition.ScopedExportAttribute"/> class.
            New instances of the exported contract are created in an existing container of the specified parent contract type.
            </summary>
            <remarks>
            <para>
            This object cannot live any longer than the container that it is in.  Also any imports that the object has will first be satisfied from
            objects within the container and then secondarily from parent containers.
            </para>
            <para>
            If an object can exist in multiple types of containers by specifying more than one parent type.
            </para>
            </remarks>
            <param name="contractType">The type being exported.</param>
            <param name="parentScopeContractTypes">The exported type(s) of the container(s) in which this object should live.</param>
        </member>
        <member name="M:Agilent.SA.VsaComposition.ScopedExportAttribute.#ctor(System.Type,System.Boolean,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.VsaComposition.ScopedExportAttribute"/> class.
            The container in which the new instances are created can be specified.
            </summary>
            <param name="contractType">The contract type being exported.</param>
            <param name="contractIsScopeOwner">If true then a new container will be created for new instances of the contract type.  
            If false then new instances will be created in the parent container.</param>
            <param name="parentScopeContractTypes">The exported type(s) of the container(s) in which this object should live.</param>
        </member>
        <member name="P:Agilent.SA.VsaComposition.ScopedExportAttribute.ContractIsScopeOwner">
            <summary>
            Gets a value indicating whether a new container will be created for new instances of the contract type.
            </summary>
        </member>
        <member name="P:Agilent.SA.VsaComposition.ScopedExportAttribute.ParentScopeContractTypes">
            <summary>
            Gets a list of the possible parent container contract types.
            </summary>
        </member>
        <member name="T:Agilent.SA.VsaComposition.ScopedInheritedExportAttribute">
            <summary>
            A class that defines an attribute to indicate the scoping of an MEF export within an object model hierarchy.  
            This attribute can be inherited by sub-classes.
            </summary>
        </member>
        <member name="M:Agilent.SA.VsaComposition.ScopedInheritedExportAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.VsaComposition.ScopedInheritedExportAttribute"/> class.  
            A new container is created for new instances of the exported contract.
            </summary>
            <param name="contractType">The type being exported.</param>
        </member>
        <member name="M:Agilent.SA.VsaComposition.ScopedInheritedExportAttribute.#ctor(System.Type,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.VsaComposition.ScopedInheritedExportAttribute"/> class.
            New instances of the exported contract are created in an existing container of the specified parent contract type.
            </summary>
            <remarks>
            <para>
            This object cannot live any longer than the container that it is in.  Also any imports that the object has will first be satisfied from
            objects within the container and then secondarily from parent containers.
            </para>
            <para>
            If an object can exist in multiple types of containers by specifying more than one parent type.
            </para>
            </remarks>
            <param name="contractType">The type being exported.</param>
            <param name="parentScopeContractTypes">The exported type(s) of the container(s) in which this object should live.</param>
        </member>
        <member name="M:Agilent.SA.VsaComposition.ScopedInheritedExportAttribute.#ctor(System.Type,System.Boolean,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.VsaComposition.ScopedInheritedExportAttribute"/> class.
            The container in which the new instances are created can be specified.
            </summary>
            <param name="contractType">The contract type being exported.</param>
            <param name="contractIsScopeOwner">If true then a new container will be created for new instances of the contract type.  
            If false then new instances will be created in the parent container.</param>
            <param name="parentScopeContractTypes">The exported type(s) of the container(s) in which this object should live.</param>
        </member>
        <member name="P:Agilent.SA.VsaComposition.ScopedInheritedExportAttribute.ContractIsScopeOwner">
            <summary>
            Gets a value indicating whether a new container will be created for new instances of the contract type.
            </summary>
        </member>
        <member name="P:Agilent.SA.VsaComposition.ScopedInheritedExportAttribute.ParentScopeContractTypes">
            <summary>
            Gets a list of the possible parent container contract types.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.InputCorrection">
            <summary>User-configurable correction for physical input channels</summary>
            <remarks>
            	<para>This class has properties and methods that allow the user to apply gain, amplitude flatness, phase linearity, and other corrections to the input data. The
            correction may be applied separately to the I and Q inputs for I+jQ channels.</para>
            	<para>The calibration data and constants supplied are used to generate a time-domain correction filter appropriate to the specific center frequency and span being
            used. The filter is applied to the input data before any analysis is done.</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.InputCorrection.IsCorrectionConstantEnabled">
            <summary>
            Gets or sets a value indicating whether fixed calibration constants (Gain, Delay, DcOffset) are used to correct the measurement.  
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.InputCorrection.Gain">
            <summary>
            Gets or sets the gain multiplier applied to the specified input channel.  
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.InputCorrection.DCOffset">
            <summary>Gets or sets the DC offset added (in Volts) to an input channel.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.InputCorrection.Delay">
            <summary>
            Gets or sets the time delay added (in Sec) to the specified input channel.  
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.InputCorrection.IsIFExternalCorrectionEnabled">
            <summary>Gets or sets a value indicating whether the calibration data in IFExternalCalibrationFile is used to correct the input data.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.InputCorrection.IFExternalCalibrationFile">
            <summary>
             Gets or sets the file which contains the external IF calibration data. 
            </summary>
            <remarks>
             IF calibration data is used on a relative-frequency basis to develop a time-correction filter
             that is appropriate to the measurement span.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.InputCorrection.IsRFExternalCorrectionEnabled">
            <summary>Gets or sets a value indicating whether the calibration data in RFExternalCalibrationFile is used to correct the input data.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.InputCorrection.RFExternalCalibrationFile">
            <summary>
             Gets or sets the file which contains the external RF calibration data. 
            </summary>
            <remarks>
             RF calibration data is used on an absolute-frequency basis to develop a time-correction filter
             that is appropriate to the measurement span and center frequency. 
            </remarks>
        </member>
        <member name="T:Agilent.SA.Vsa.InputCorrectionCollection">
            <summary>Collection of Correction objects, indexed by logical channel</summary>
        </member>
        <member name="T:Agilent.SA.VsaInternal.ISpectrumRate">
            <summary>
            Allow programmatic access to the calculated spectrum rate value for benchmarking etc. Implemented
            on the MeasurementCollection class.
            </summary>
        </member>
        <member name="P:Agilent.SA.VsaInternal.ISpectrumRate.IsSpectrumRateEnabled">
            <summary>
            Gets or sets a value indicating whether to enable the spectrum rate indicator.
            </summary>
        </member>
        <member name="P:Agilent.SA.VsaInternal.ISpectrumRate.SpectrumRate">
            <summary>
            Gets the spectrum rate in Hz/sec.  This is the sum of all the spans for all measurements that 
            are running divided by the time it takes to run all of them.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.RemoteCollectionChangedEventArgs">
            <summary>
            This class is a serializable version of the <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> class, intended for
            internal use to propagate <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/> events across the .NET
            remoting boundary.
            </summary>
            <version>14.00</version>
        </member>
        <member name="M:Agilent.SA.Vsa.RemoteCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Collections.IList,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.RemoteCollectionChangedEventArgs"/> class.
            </summary>
            <param name="action">The action that caused the event.</param>
            <param name="newItems">The new items that are affected by the change.</param>
            <param name="newStartingIndex">The new index for the changed items.</param>
            <param name="oldItems">The old items that are affected by the change.</param>
            <param name="oldStartingIndex">The old index for the changed items.</param>
            <seealso cref="T:Agilent.SA.Vsa.NotifyCollectionChangedWrapper"/>
        </member>
        <member name="P:Agilent.SA.Vsa.RemoteCollectionChangedEventArgs.Action">
            <summary>
            Gets the action that caused the event. 
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.RemoteCollectionChangedEventArgs.NewItems">
            <summary>
            Gets the list of new items involved in the change.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.RemoteCollectionChangedEventArgs.NewStartingIndex">
            <summary>
            Gets the index at which the change occurred.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.RemoteCollectionChangedEventArgs.OldItems">
            <summary>
            Gets the list of items affected by a Replace, Remove, or Move action.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.RemoteCollectionChangedEventArgs.OldStartingIndex">
            <summary>
            Gets the index at which a Move, Remove, or Replace action occurred.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.NotifyCollectionChangedWrapper">
            <summary>
            This class implements a wrapper to allow <see cref="E:Agilent.SA.Vsa.NotifyCollectionChangedWrapper.CollectionChanged"/> events to be propagated across the .NET remoting
            boundary.
            </summary>
            <remarks>
            This wrapper is required as an intermediary between the client and server sides of the remoting
            boundary so that the server does not have to have type knowledge of the client.
            </remarks>
            <example>
            The following code snippet shows how to monitor the <see cref="T:Agilent.SA.Vsa.TraceCollection"/> object for <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged"/>
            events to detect when a new trace is added.
            <code lang="CS">
            using (var wrapper = new NotifyCollectionChangedWrapper(app.Display.Traces, OnTraceCollectionChanged))
            {
            	// other code....
            }
            
            void OnTraceCollectionChanged(object sender, PropertyChangedEventArgs e)
            {
            	if (e.Action == NotifyCollectionChangedAction.Add)
            	{
            		// other code...
            	}
            }
            </code>
            </example>
            <version>14.00</version>
        </member>
        <member name="M:Agilent.SA.Vsa.NotifyCollectionChangedWrapper.#ctor(Agilent.SA.Vsa.IRemoteNotifyCollectionChanged)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.NotifyCollectionChangedWrapper"/> class that will monitor the supplied
            remote object for <see cref="E:Agilent.SA.Vsa.NotifyCollectionChangedWrapper.CollectionChanged"/> events.
            </summary>
            <param name="obj">The remote object to monitor for <see cref="E:Agilent.SA.Vsa.NotifyCollectionChangedWrapper.CollectionChanged"/> events.</param>
            <remarks>
            When using this constructor, monitoring of the remote object will not start until a handler is connected
            to the <see cref="E:Agilent.SA.Vsa.NotifyCollectionChangedWrapper.CollectionChanged"/> event exposed by this wrapper.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.NotifyCollectionChangedWrapper.#ctor(Agilent.SA.Vsa.IRemoteNotifyCollectionChanged,System.Collections.Specialized.NotifyCollectionChangedEventHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.NotifyCollectionChangedWrapper"/> class that will monitor the supplied
            remote object for <see cref="E:Agilent.SA.Vsa.NotifyCollectionChangedWrapper.CollectionChanged"/> events and call the supplied delegate when such events occur.
            </summary>
            <param name="obj">The remote object to monitor for <see cref="E:Agilent.SA.Vsa.NotifyCollectionChangedWrapper.CollectionChanged"/> events.</param>
            <param name="callback">A delegate of type <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventHandler"/> that will be
            invoked when the collection referred to by <paramref name="obj"/> changes.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.NotifyCollectionChangedWrapper.InitializeLifetimeService">
            <summary>
            Controls the object lifetime.
            </summary>
            <returns>null (this object has to live "forever").</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.NotifyCollectionChangedWrapper.OnRemoteCollectionChanged(System.Object,Agilent.SA.Vsa.RemoteCollectionChangedEventArgs)">
            <summary>
            For internal use only.
            </summary>
            <param name="sender">The remote object sending the event.</param>
            <param name="e">The event details from the remote object.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.NotifyCollectionChangedWrapper.Dispose">
            <summary>
            Notify the wrapper object that it should disconnect from the remote object.
            </summary>
        </member>
        <member name="E:Agilent.SA.Vsa.NotifyCollectionChangedWrapper.CollectionChanged">
            <summary>
            Event that the collection changed.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.NotifyPropertyInfoChangedWrapper">
            <summary>
            This class implements a wrapper to allow <see cref="E:Agilent.SA.Vsa.IPropertyInfo.PropertyInfoChanged"/> events to be propagated across the .NET remoting
            boundary.
            </summary>
            <remarks>
            This wrapper is required as an intermediary between the client and server sides of the remoting
            boundary so that the server does not have to have type knowledge of the client.
            </remarks>
            <example>
            The following code snippet shows how to monitor the <see cref="T:Agilent.SA.Vsa.Frequency"/> object for <see cref="E:Agilent.SA.Vsa.IPropertyInfo.PropertyInfoChanged"/>
            events to detect when the <see cref="P:Agilent.SA.Vsa.Frequency.IsZoom"/> property is a enabled or not.
            <code lang="CS">
            using (var wrapper = new NotifyPropertyInfoChangedWrapper(app.Measurements.SelectedItem.Frequency, OnFrequencyPropertyInfoChanged))
            {
            	// other code....
            }
            
            void OnFrequencyPropertyInfoChanged(object sender, PropertyInfoChangedEventArgs e)
            {
            	if (e.PropertyName == "IsZoom")
            	{
            		Vsa.IPropertyInfo info = sender as Vsa.IPropertyInfo;
            		if (info.IsEnabled(e.PropertyName) == false)
            		{
            			// other code...
            		}
            	}
            }
            </code>
            </example>
            <version>14.00</version>
        </member>
        <member name="M:Agilent.SA.Vsa.NotifyPropertyInfoChangedWrapper.#ctor(Agilent.SA.Vsa.IRemoteNotifyPropertyInfoChanged)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.NotifyPropertyInfoChangedWrapper"/> class that will monitor the supplied
            remote object for <see cref="E:Agilent.SA.Vsa.NotifyPropertyInfoChangedWrapper.PropertyInfoChanged"/> events.
            </summary>
            <param name="obj">The remote object to monitor for <see cref="E:Agilent.SA.Vsa.NotifyPropertyInfoChangedWrapper.PropertyInfoChanged"/> events.</param>
            <remarks>
            When using this constructor, monitoring of the remote object will not start until a handler is connected
            to the <see cref="E:Agilent.SA.Vsa.NotifyPropertyInfoChangedWrapper.PropertyInfoChanged"/> event exposed by this wrapper.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.NotifyPropertyInfoChangedWrapper.#ctor(Agilent.SA.Vsa.IRemoteNotifyPropertyInfoChanged,System.EventHandler{Agilent.SA.Vsa.PropertyInfoChangedEventArgs})">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.NotifyPropertyInfoChangedWrapper"/> class that will monitor the supplied
            remote object for <see cref="E:Agilent.SA.Vsa.NotifyPropertyInfoChangedWrapper.PropertyInfoChanged"/> events and call the supplied delegate when such events occur.
            </summary>
            <param name="obj">The remote object to monitor for <see cref="E:Agilent.SA.Vsa.NotifyPropertyInfoChangedWrapper.PropertyInfoChanged"/> events.</param>
            <param name="callback">A delegate of type <see cref="T:System.EventHandler`1"/> that will be
            invoked when any public property on <paramref name="obj"/> changes.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.NotifyPropertyInfoChangedWrapper.InitializeLifetimeService">
            <summary>
            Control the object lifetime.
            </summary>
            <returns>null (live "forever")</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.NotifyPropertyInfoChangedWrapper.ObjectRemotePropertyChangedHandler(System.Object,Agilent.SA.Vsa.PropertyInfoChangedEventArgs)">
            <summary>
            For internal use only.
            </summary>
            <param name="sender">The remote object sending the event.</param>
            <param name="e">The event details from the remote object.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.NotifyPropertyInfoChangedWrapper.StepValue(System.String)">
            <summary>
            Gets a step value object for the specified property.
            </summary>
            <param name="propertyName">The property name.</param>
            <returns>A step value object.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.NotifyPropertyInfoChangedWrapper.ValidValues``1(System.String)">
            <summary>
            Gets an array of valid values for the specified property.
            </summary>
            <typeparam name="T">The type to convert the valid values to.</typeparam>
            <param name="propertyName">The property name.</param>
            <returns>An array of valid values.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.NotifyPropertyInfoChangedWrapper.IsEnabled(System.String)">
            <summary>
            Gets a value that indicates whether the specified property is currently enabled (usable).
            </summary>
            <param name="propertyName">The property name.</param>
            <returns>true if enabled; otherwise false</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.NotifyPropertyInfoChangedWrapper.Dispose">
            <summary>
            Notify the wrapper object that it should disconnect from the remote object.
            </summary>
        </member>
        <member name="E:Agilent.SA.Vsa.NotifyPropertyInfoChangedWrapper.PropertyInfoChanged">
            <summary>
            Event that indicates that information (<see cref="T:Agilent.SA.Vsa.IPropertyInfo"/>) about a property has changed.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.ProcessingExtensionCollection">
            <summary>
            The ProcessingExtensionCollection class contains a collection of all the processing extension objects for a measurement.
            </summary>
            <version>16.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.ProcessingExtensionCollection.Item(System.String)">
            <summary>
            Returns the named extension from the collection.
            </summary>
            <param name="name">The name of the extension to retrieve. The name is case sensitive.</param>
            <returns>The named extension, or null if no extension of the supplied name exists.</returns>
            <version>16.00</version>
        </member>
        <member name="T:Agilent.SA.VsaImplementation.PublicInterfaceProviderAttribute">
            <summary>
            An attribute to allow a type to be marked as a public interface.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.PowerSpectrumMeasurement">
            <summary>
            The class defines the basic Power Spectrum measurement.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.MeasurementExtension">
            <summary>
            Base class for measurement extensions.
            </summary>
            <summary>
            This class serves as a base class for all measurement extensions.
            </summary>
        </member>
        <member name="T:Agilent.SA.VsaInternal.IMeasurementBase2">
            <summary>
            An interface for measurement extensions to implement
            </summary>
        </member>
        <member name="T:Agilent.SA.VsaInternal.IMeasurementBase">
            <summary>
            An interface for measurement extensions to implement
            </summary>
        </member>
        <member name="P:Agilent.SA.VsaInternal.IMeasurementBase.HelpContext">
            <summary>
            Gets the help context for the measurement extension.
            </summary>
        </member>
        <member name="P:Agilent.SA.VsaInternal.IMeasurementBase.MeasurementStepsFileBase">
            <summary>
            Gets the base name for the file for the measurement step list to use. 
            </summary>
        </member>
        <member name="P:Agilent.SA.VsaInternal.IMeasurementBase.IncludeFirstStepResults">
            <summary>
            Gets a value indicating which results to include from the first steps when using this measurement.
            </summary>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IMeasurementBase2.IsFastUpdateKey(System.String)">
            <summary>
            Returns true if this state setting can be "fast" updated.
            </summary>
            <param name="key">state key</param>
            <returns>true if this change can be "fast" updated</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IMeasurementBase2.CanFastRestart">
            <summary>
            Returns true if measurement can be "fast" restarted.
            </summary>
            <returns>true if measurement can be "fast" restarted</returns>
        </member>
        <member name="P:Agilent.SA.VsaInternal.IMeasurementBase2.InputDomain">
            <summary>
            Gets a value indicating whether this measurement requires time data or frequency data.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.IMeasurementExtension">
            <summary>
            Defines a interface for measurement extensions.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.IMeasurementExtension.InterfaceType">
            <summary>
            Gets the type for the measurement extension.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementExtension.Agilent#SA#VsaInternal#IMeasurementBase2#IsFastUpdateKey(System.String)">
            <summary>
            Gets a value indicating whether this measurement setting currently supports an optimized measurement setup.
            </summary>
            <param name="key">State key name</param>
            <returns>True if supported, otherwise false.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementExtension.IsFastUpdateKey(System.String)">
            <summary>
            Gets a value indicating whether this measurement setting currently supports an optimized measurement setup.
            </summary>
            <param name="key">State key name</param>
            <returns>True if supported, otherwise false.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementExtension.Agilent#SA#VsaInternal#IMeasurementBase2#CanFastRestart">
            <summary>
            Gets a value indicating whether this measurement supports restart without a full setup.
            </summary>
            <returns>True if it supports faster restart, otherwise false.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementExtension.CanFastRestart">
            <summary>
            Gets a value indicating whether this measurement supports restart without a full setup.
            </summary>
            <returns>True if it supports faster restart, otherwise false.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementExtension.IsEnabled(System.String)">
            <summary>
            Gets a value indicating whether the specified property is currently enabled and functional.
            </summary>
            <param name="propertyName">The name of the property.</param>
            <returns>true if enabled; otherwise false</returns>
        </member>
        <member name="P:Agilent.SA.Vsa.MeasurementExtension.Parent">
            <summary>
            Gets the parent object for the measurement.
            </summary>
            <remarks>Overridden to allow the import type to grab the correct object.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.MeasurementExtension.Agilent#SA#VsaInternal#IMeasurementBase#HelpContext">
            <summary>
            Gets the help context for the measurement.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.MeasurementExtension.HelpContext">
            <summary>
            Gets the help context.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.MeasurementExtension.Agilent#SA#VsaInternal#IMeasurementBase#MeasurementStepsFileBase">
            <summary>
            Gets the base file name for the measurement step list for the measurement.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.MeasurementExtension.MeasurementStepsFileBase">
            <summary>
            Gets the base file name for the measurement step list.  
            </summary>
            <remarks>Each derived class must provide the base name of the .MES file it uses. The Measurement
            Control class will decorate this name according to the current hardware configuration in order to
            load the appropriate .MES file for the number of available channels.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.MeasurementExtension.Agilent#SA#VsaInternal#IMeasurementBase#IncludeFirstStepResults">
            <summary>
            Gets which first step results to include.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.MeasurementExtension.IncludeFirstStepResults">
            <summary>
            Gets which first step results to include.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.MeasurementExtension.Agilent#SA#VsaInternal#IMeasurementBase2#InputDomain">
            <summary>
            Gets the input domain for the measurement extension.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.MeasurementExtension.InputDomain">
            <summary>
            Gets the input domain for the measurement extension.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.MeasurementExtension.InterfaceType">
            <summary>
            Gets the interface type for the measurement.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.PowerSpectrumMeasurement.CastToExtensionType(System.Object)">
            <summary>
            This method casts the supplied object to the <see cref="T:Agilent.SA.Vsa.MeasurementExtension"/> type. Some
            tools are unable to use the generic methods provided on <see cref="T:Agilent.SA.Vsa.Measurement"/> class so
            this is provided as an alternative.
            </summary>
            <param name="extension">The object to be cast to the measurement extension type.</param>
            <returns>A correctly cast handle of type <see cref="T:Agilent.SA.Vsa.MeasurementExtension"/>, or
            null if the cast failed.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.PowerSpectrumMeasurement.ExtensionType">
            <summary>
            Returns the type for instances this measurement extension. Some
            tools are unable to use the generic methods provided on <see cref="T:Agilent.SA.Vsa.Measurement"/> class so
            this is provided as an alternative.
            </summary>
            <returns>A <see cref="T:System.Type"/> object for the <see cref="T:Agilent.SA.Vsa.MeasurementExtension"/> type.</returns>
        </member>
        <member name="T:Agilent.SA.VsaInternal.ScopeHelperCore">
            <summary>
            This class exists as a common base class for all scope helper classes. It allows for their
            identification and automatic cleanup in RemotableObject.DoDispose().
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.ScpiServer">
            <summary>The Average object provides access to the VSA's averaging features.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.ScpiServer.Address">
            <summary>
            Gets the address (normally the VISA address) that can be used to connect with SCPI to this application instance.
            </summary>
            <remarks>If Telnet then returns "Telnet,port".  If no server running then returns "".  Otherwise returns a VISA address.</remarks>
        </member>
        <member name="T:Agilent.SA.Vsa.Source">
            <summary>
            Contains properties and methods used for controlling a source configuration and downloading recording data.
            </summary>
            <version>15.00</version>
        </member>
        <member name="M:Agilent.SA.Vsa.Source.DownloadToSource(System.String)">
            <summary>
            This downloads previously recorded and saved analysis data to all source channels.
            </summary>
            <param name="fileName">the full path and file name of the recording</param>
            <remarks>
            <para>
            The recording file must have been saved (with headers) in one of these formats: 
            MAT (.mat), MAT4 (.mat), MAT7 (.mat, .hdf, .h5)
            </para>
            <para>
            Currently only single channel source configurations are supported. 
            If a multiple channel recording is selected, only the channel 1 data is used.
            </para>
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Source.DownloadCurrentRecording(System.Boolean,System.Boolean)">
            <summary>
            This downloads the current recording of the selected measurement to the source.
            </summary>
            <param name="atMeasurementSpan">If true, filter the downloaded data to the current measurement span</param>
            <param name="atPlaybackTime">If true, only download the data between the current playback start and stop times</param>
        </member>
        <member name="P:Agilent.SA.Vsa.Source.Amplitude">
            <summary>
            Gets or sets the source output power (dBm) for all channels.
            </summary>
            <remarks>
            Source amplitude may be controlled individually per channel.
            When queried, this property always returns the value for the first channel.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Source.Channels">
            <summary>
            Gets the collection of <see cref="T:Agilent.SA.Vsa.SourceChannel"/> objects allowing per-channel source  
            control.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Source.Enabled">
            <summary>
            Gets or sets a value indicating whether the source hardware configuration is currently controlled by the application.
            </summary>
            <remarks>
            <para>
            When Enabled is set true, the source hardware is reset and then set up according to the 
            other Source object properties. Some of the property values may be clipped to valid values
            depending on the source hardware capabilities.
            </para>
            <para>
            When Enabled is false, the state of the source hardware 
            may be changed by using its front panel, or by another program using the API,  
            so the Source properties do not necessarily reflect the state of the source hardware.
            </para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Source.Frequency">
            <summary>
            Gets or sets the source RF frequency (Hertz) of all channels.
            </summary>
            <remarks>
            RF frequency may be controlled individually per channel.
            When queried, this property always returns the value for the first channel.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Source.IsModulationOn">
            <summary>
            Gets or sets a value indicating whether I/Q modulation is on for all channels.
            </summary>
            <remarks>
            This turns on I/Q modulation using data that is downloaded from a recording
            to the source's dual arbitrary waveform generator.
            Modulation be controlled individually per channel.
            When queried, this property always returns the value for the first channel.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Source.IsRFOn">
            <summary>
            Gets or sets a value indicating whether to turn on RF output for all channels.
            </summary>
            <remarks>
            RF output on/off may be controlled individually per channel.
            When queried, this property always returns the value for the first channel.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Source.Name">
            <summary>
            Gets or sets the source name.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Source.SelectedHardware">
            <summary>
            Gets or sets the source hardware to use.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Source.CanDownloadCurrentRecording">
            <summary>
            Gets a value indicating whether DownloadCurrentRecording can be successfully called. 
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.SourceChannel">
            <summary>
            Represents a source channel.
            </summary>
            <version>15.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.SourceChannel.Amplitude">
            <summary>
            Gets or sets the source output power (dBm) for this channel.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.SourceChannel.Frequency">
            <summary>
            Gets or sets the source RF frequency (Hertz) of this channel.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.SourceChannel.IsModulationOn">
            <summary>
            Gets or sets a value indicating whether to turn on I/Q modulation for this channel.
            </summary>
            <remarks>
            This has effect only if an arbitrary I/Q modulation signal has been
            previously downloaded to the source channels and selected.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.SourceChannel.IsRFOn">
            <summary>
            Gets or sets a value indicating whether to true on RF output for this channel.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.SourceChannelCollection">
            <summary>
            This collection contains the set of <see cref="T:Agilent.SA.Vsa.SourceChannel"/> objects representing the
             settings for each channel of the source hardware configuration.
            </summary>
            <version>15.00</version>
        </member>
        <member name="T:Agilent.SA.Vsa.SourceCollection">
            <summary>
            Collection of Source objects
            </summary>
            <version>15.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.SourceCollection.Item(System.String)">
            <summary>
            Returns a handle to the named source.
            </summary>
            <param name="name">The name of the source to retrieve.</param>
            <returns>A handle to the source. If no source with the specified name exists then
            null is returned.</returns>
        </member>
        <member name="T:Agilent.SA.Vsa.Detectors">
            <summary>
            Defines the available detector types. Multiple detectors can be enabled simultaneously. The
            set of enabled detectors determines the data results that are available for display in a trace.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.Detectors.None">
            <summary>
            No detectors
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.Detectors.Normal">
            <summary>
            Min/Max detector
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.Detectors.Sample">
            <summary>
            Sample detector
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.Detectors.Peak">
            <summary>
            Peak (Max) detector
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.Detectors.NegativePeak">
            <summary>
            Negative Peak (Min) detector
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.Detectors.Average">
            <summary>
            Average detector
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.FrequencyConversion">
            <summary>
            Specifies the frequency conversion to use.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.FrequencyConversion.Auto">
            <summary>
            Use double conversion if supported, otherwise use double acquisition (high side and low side mixing with a min operation to combine them).
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.FrequencyConversion.PreferHighSide">
            <summary>
            Use single high side mixing if supported, otherwise use double conversion.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.FrequencyConversion.PreferLowSide">
            <summary>
            Use single low side mixing if supported, otherwise use double conversion.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.FrequencyConversion.PreferDoubleAcquisition">
            <summary>
            Use double acquisition (high side and low side mixing with a min operation to combine them).
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.ResolutionBandwidthMetric">
            <summary>
            Specifies the metric to use when specifying the resolution bandwidth
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ResolutionBandwidthMetric.EquivalentNoise">
            <summary>
            Equivalent noise bandwidth
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ResolutionBandwidthMetric.Minus3DB">
            <summary>
            -3 dB Bandwidth
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ResolutionBandwidthMetric.Minus6DB">
            <summary>
            -6 dB Bandwidth
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.Spectrum">
            <summary>The Spectrum object contains members for controlling the power spectrum measurement features.</summary>
            <remarks>
            The Spectrum object represents settings specific to power spectrum measurements, including center frequency, span,
            RBW, VBW and their related settings and detectors. Some of these settings are found in the Frequency
            sub-object.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Spectrum.FrequencyConversion">
            <summary>
            Gets or sets the frequency conversion mode to use.
            </summary>
            <remarks>Defaults to ImageProtect.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Spectrum.NoiseCorrection">
            <summary>
            Gets or sets a value indicating whether noise correction is enabled.
            </summary>
            <remarks>A noise reference measurement will be made when the setup changes, the measurement is restarted, or at each sweep.  The settings used
            for the noise reference measurement are the same as the current measurement setup except that the input is terminated.</remarks>
            <remarks>Defaults to false.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Spectrum.IsIFDitherEnabled">
            <summary>
            Gets or sets a value indicating whether IF frequency dither is used (useful for suppressing spurs and images).
            </summary>
            <remarks>The default (preset) state for this property may vary depending upon the hardware used.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Spectrum.Frequency">
            <summary>
            Gets a handle to the Frequency object for the measurement.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Spectrum.IsIFDitherAuto">
            <summary>
            Gets or sets a value indicating whether IF frequency dither is enabled or disabled automatically based upon the measurement setup.
            </summary>
            <remarks>If this is true then at high resolution bandwidths <see cref="P:Agilent.SA.Vsa.Spectrum.IsIFDitherEnabled"/> will be automatically set to
            false and at low resolution bandwidths it will be set to true.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Spectrum.Gate">
            <summary>
            Gets a reference to gate trigger setup.
            </summary>
            <version>18.50</version>
        </member>
        <member name="T:Agilent.SA.Vsa.SpectrumFrequency">
            <summary>The Frequency object contains members for controlling the power spectrum measurement frequency features.</summary>
            <remarks>
            The Spectrum object represents settings specific to power spectrum measurements, including center frequency, span,
            RBW, VBW and their related settings.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.SpectrumFrequency.SetStartStopFrequency(System.Double,System.Double)">
            <summary>
            Set the measurement Start and Stop frequency properties all at one time.
            </summary>
            <param name="startFrequency">Measurement start frequency in Hz.</param>
            <param name="stopFrequency">Measurement stop frequency in Hz.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.SpectrumFrequency.SetCenterSpan(System.Double,System.Double)">
            <summary>
            Set the measurement center frequency and span.
            </summary>
            <param name="center">Specifies the center frequency value, in Hertz.</param>
            <param name="span">Specifies the frequency span value, in Hertz.</param>
            <remarks>
            This method sets the measurement's center frequency and span all at one time with only a single
            measurement restart. That is faster than setting each property individually which would cause multiple
            measurement restarts.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.SpectrumFrequency.DefaultSpan">
            <summary>
            Sets the Span to its default value, which is the largest span supported by the current hardware.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.SpectrumFrequency.Center">
            <summary>
            Gets or sets the measurement center frequency, in Hertz.
            </summary>
            <remarks>
            	<para>You can set the frequency range with the Center and <see cref="P:Agilent.SA.Vsa.SpectrumFrequency.Span"/> properties, or with the <see cref="P:Agilent.SA.Vsa.SpectrumFrequency.StartFrequency"/> and <see cref="P:Agilent.SA.Vsa.SpectrumFrequency.StopFrequency"/> properties. You can also use the
            <see cref="M:Agilent.SA.Vsa.SpectrumFrequency.SetCenterSpan(System.Double,System.Double)"/> or <see cref="M:Agilent.SA.Vsa.SpectrumFrequency.SetStartStopFrequency(System.Double,System.Double)"/> methods to set the frequency range all at one time.</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.SpectrumFrequency.StartFrequency">
            <summary>
            Gets or sets the measurement start frequency, in Hertz.
            </summary>
            <remarks>
            	<para>You can set the frequency range with the <see cref="P:Agilent.SA.Vsa.SpectrumFrequency.Center"/> and <see cref="P:Agilent.SA.Vsa.SpectrumFrequency.Span"/> properties, or with the StartFrequency and <see cref="P:Agilent.SA.Vsa.SpectrumFrequency.StopFrequency"/> properties. You can also use the
            <see cref="M:Agilent.SA.Vsa.SpectrumFrequency.SetCenterSpan(System.Double,System.Double)"/> or <see cref="M:Agilent.SA.Vsa.SpectrumFrequency.SetStartStopFrequency(System.Double,System.Double)"/> methods to set the frequency range all at one time.</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.SpectrumFrequency.StopFrequency">
            <summary>
            Gets or sets the measurement stop frequency, in Hertz.
            </summary>
            <remarks>
            	<para>You can set the frequency range with the <see cref="P:Agilent.SA.Vsa.SpectrumFrequency.Center"/> and <see cref="P:Agilent.SA.Vsa.SpectrumFrequency.Span"/> properties, or with the StartFrequency and <see cref="P:Agilent.SA.Vsa.SpectrumFrequency.StopFrequency"/> properties. You can also use the
            <see cref="M:Agilent.SA.Vsa.SpectrumFrequency.SetCenterSpan(System.Double,System.Double)"/> or <see cref="M:Agilent.SA.Vsa.SpectrumFrequency.SetStartStopFrequency(System.Double,System.Double)"/> methods to set the frequency range all at one time.</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.SpectrumFrequency.Span">
            <summary>
            Gets or sets the measurement frequency span, in Hertz.
            </summary>
            <remarks>
            	<para>The <see cref="M:Agilent.SA.Vsa.SpectrumFrequency.SetCenterSpan(System.Double,System.Double)"/> method can be used to
            specify center and span all at the same time.</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.SpectrumFrequency.IsStepAuto">
            <summary>
            Gets or sets a value indicating whether the frequency step is fixed or automatically determined.
            </summary>
            <remarks>
            	<para>When IsStepAuto is set to false, the frequency step is determined by the <see cref="P:Agilent.SA.Vsa.SpectrumFrequency.StepSize"/> property. When IsStepAuto is set to true, then: </para>
            	<list type="bullet">
            		<item>span follows 1-2-5 steps and speed optimized spans</item>
            		<item>center frequency follows (span / 10) steps</item>
            		<item>start frequency follows 1-2-5 steps</item>
            	</list>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.SpectrumFrequency.StepSize">
            <summary>
            Gets or sets the frequency step for start, center, and stop incremental changes, in Hertz.
            </summary>
            <remarks>
            	<para>StepSize only affects the user interface when using the arrow key or mouse wheel to adjust start, center, or stop frequency settings.</para>
            	<para>This property is not used if the <see cref="P:Agilent.SA.Vsa.SpectrumFrequency.IsStepAuto"/> property is set to true.</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.SpectrumFrequency.Window">
            <summary>
            Gets or sets the window function applied to the time data.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.SpectrumFrequency.Detectors">
            <summary>
            Gets or sets the detectors for which results are currently available.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.SpectrumFrequency.Points">
            <summary>
            Gets or sets the number of points produced by each detector.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.SpectrumFrequency.ResolutionBandwidth">
            <summary>
            Gets or sets the resolution bandwidth (RBW), in Hertz.
            </summary>
            <remarks>
            Determines the resolution bandwidth, in Hertz, of the measurement.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.SpectrumFrequency.IsResolutionBandwidthAuto">
            <summary>
            Gets or sets a value indicating whether the resolution bandwidth property is automatically determined from other setup parameters.
            </summary>
            <remarks>
            When true, the RBW is chosen based upon the <see cref="P:Agilent.SA.Vsa.SpectrumFrequency.SpanToResolutionBandwidthRatio"/> and
            <see cref="P:Agilent.SA.Vsa.SpectrumFrequency.IsSpanToResolutionBandwidthRatioAuto"/> settings.  When false the RBW is 
            explicitly specified via the <see cref="P:Agilent.SA.Vsa.SpectrumFrequency.ResolutionBandwidth"/> property.  This property defaults to true.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.SpectrumFrequency.IsSpanToResolutionBandwidthRatioAuto">
            <summary>
            Gets or sets a value indicating whether the SpanToResolutionBandwidthRatio is automatically set.  
            </summary>
            <remarks>
            When true, the <see cref="P:Agilent.SA.Vsa.SpectrumFrequency.SpanToResolutionBandwidthRatio"/> property will be set to a value of 106.  
            This property defaults to true.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.SpectrumFrequency.SpanToResolutionBandwidthRatio">
            <summary>
            Gets or sets the ratio of span to resolution bandwidth.
            </summary>
            <remarks>
            This property will be coerced to a value of 106 when the <see cref="P:Agilent.SA.Vsa.SpectrumFrequency.IsSpanToResolutionBandwidthRatioAuto"/>
            property is set to true.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.SpectrumFrequency.VideoBandwidth">
            <summary>
            Gets or sets the video bandwidth in Hz.  This is the -3 dB bandwidth.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.SpectrumFrequency.IsVideoBandwidthAuto">
            <summary>
            Gets or sets a value indicating whether the video bandwidth is automatically set.
            </summary>
            <remarks>
            When true, the <see cref="P:Agilent.SA.Vsa.SpectrumFrequency.VideoBandwidth"/> is set equal to  
            <see cref="P:Agilent.SA.Vsa.SpectrumFrequency.ResolutionBandwidth"/> * <see cref="P:Agilent.SA.Vsa.SpectrumFrequency.VideoBandwidthToResolutionBandwidthRatio"/>.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.SpectrumFrequency.IsVideoBandwidthToResolutionBandwidthRatioAuto">
            <summary>
            Gets or sets a value indicating whether the VideoBandwidthToResolutionBandwidthRatio property is automatically set.
            </summary>
            <remarks>
            When true, the <see cref="P:Agilent.SA.Vsa.SpectrumFrequency.VideoBandwidthToResolutionBandwidthRatio"/> property is set to 1.0.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.SpectrumFrequency.VideoBandwidthToResolutionBandwidthRatio">
            <summary>
            Gets or sets the ratio of video bandwidth to resolution bandwidth.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.SpectrumFrequency.ResolutionBandwidthMetric">
            <summary>
            Gets or sets the resolution bandwidth metric to use for the resolution bandwidth.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.UserInputChangeBits">
            <summary>
            Flags indicate property changes related to <see cref="T:Agilent.SA.Vsa.UserInputData"/> properties.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.UserInputChangeBits.None">
            <summary>
            Indicates no changes (Default value).
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.UserInputChangeBits.RequestedBlockSize">
            <summary>
            Indicates change occurred to <see cref="P:Agilent.SA.Vsa.UserInputData.RequestedBlockSize"/>.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.UserInputChangeBits.IsTriggered">
            <summary>
            Indicates change occurred to <see cref="P:Agilent.SA.Vsa.UserInputData.IsTriggered"/>.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.UserInputChangeBits.RequestedTriggerDelay">
            <summary>
            Indicates change occurred to <see cref="P:Agilent.SA.Vsa.UserInputData.RequestedTriggerDelay"/>.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.UserInputChangeBits.SettlingSize">
            <summary>
            Indicates change occurred to <see cref="P:Agilent.SA.Vsa.UserInputData.SettlingSamples"/>.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.UserInputChangeBits.IsContinuous">
            <summary>
            Indicates change occurred to <see cref="P:Agilent.SA.Vsa.UserInputData.IsContinuous"/>.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.UserInputChangeBits.IsRequiredSamplesPositive">
            <summary>
            Indicates change occurred to make <see cref="P:Agilent.SA.Vsa.UserInputData.RequiredSamples"/> positive (which indicates data s requested by the data consuming <see cref="T:Agilent.SA.Vsa.Measurement"/>).
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.UserInputChangeRegister">
            <summary>
            Interface for providing property changed notifications (for <see cref="T:Agilent.SA.Vsa.UserInputData"/> properties) to a data source application.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputChangeRegister.Value">
            <summary>
            Gets which <see cref="T:Agilent.SA.Vsa.UserInputChangeBits"/> may have changed since the previous retrieval of this property.
            </summary>
            <remarks>
            Retrieving this property clears the value to <see cref="F:Agilent.SA.Vsa.UserInputChangeBits.None"/>. This behavior enables 
            atomic change event detection to prevent missed or duplicate handling of changed notifications by a data source application.
            Two approaches are available for a data source application to receive changed notifications.  <see cref="P:Agilent.SA.Vsa.UserInputChangeRegister.Value"/> may be 
            periodically polled to detect changes. Alternatively, a <see cref="P:Agilent.SA.Vsa.UserInputChangeRegister.Mask"/> may be provided to specify which changes the
            data source application is interested in, and the data source application can register for property changed events.
            Note that a set bit in the <see cref="P:Agilent.SA.Vsa.UserInputChangeRegister.Value"/> property only indicates the associated property may have changed, therefore 
            this indicator is best used to initiating a query of the associated property, with actions taken then based on the
            actual value of the associated property.
            Please see <see cref="T:Agilent.SA.Vsa.IRemoteNotifyPropertyChanged"/> for information about how to register for property changed events
            from a remote caller.
            Please see <see cref="T:System.ComponentModel.INotifyPropertyChanged"/> for information about how to register for property changed events
            from an in-process caller.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputChangeRegister.Mask">
            <summary>
            Gets or sets a bitmask for reducing the set of events which will trigger property changed events for the <see cref="P:Agilent.SA.Vsa.UserInputChangeRegister.Value"/> property.
            </summary>
            <seealso cref="P:Agilent.SA.Vsa.UserInputChangeRegister.Value"/>
        </member>
        <member name="T:Agilent.SA.Vsa.DataKeyAttribute">
            <summary>
            An indication of what key to use in the data dictionary for an enumeration.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.DataKeyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.DataKeyAttribute"/> class.
            </summary>
            <param name="dataKey">The data key to use.</param>
        </member>
        <member name="P:Agilent.SA.Vsa.DataKeyAttribute.DataKey">
            <summary>
            Gets the data key.
            </summary>
        </member>
        <member name="T:Agilent.SA.VsaInternal.IMeasurementInitialize">
            <summary>
            Defines an interface to initialize a measurement.
            </summary>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IMeasurementInitialize.SetForceInitialize">
            <summary>
            Force a measurement initialization.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.InputExtension">
            <summary>
            Definition for an input extension 
            </summary>
            <summary>
            Represents input settings that are unique to a given group of hardware instruments.
            </summary>
            <remarks>
            <para>
            An input extension class may be provided for specific models of hardware in order
            to allow for unique settings on that hardware.  This class provides base functionality and 
            will be subclassed to provide functionality specific to certain models of hardware.
            </para>
            <para>
            There will be one instance of an input extension for each <see cref="T:Agilent.SA.Vsa.HardwareGroup"/> hardware group
            in the currently selected analyzer (<see cref="P:Agilent.SA.Vsa.Measurement.SelectedAnalyzer">Measurement.SelectedAnalyzer</see>).
            </para>
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.InputExtension.OnImportsSatisfied">
            <summary>
            Called by MEF after imports have been satisfied for the object.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.InputExtension.SetValueToExtState(System.String,System.Object,System.Object,System.Boolean)">
            <summary>
            Sets a value to the input extension state. 
            </summary>
            <param name="key">The state key name.</param>
            <param name="value">The original value passed to the called member.  Used for macro recording.</param>
            <param name="convertedValue">The coerced value (use the same as the original if it was not coerced).  
            The actual value set to state.</param>
            <param name="initialize">Whether to force a measurement initialize after setting the value to state.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.InputExtension.SetValueToExtState(System.Reflection.MethodBase,System.Object,System.Object,System.Boolean)">
            <summary>
            Sets a value in state.
            </summary>
            <param name="caller">Identifies the calling member to be used both for macro recording as well as determining
            the state key. This parameter must be a valid member on the public, customer-facing interface of the extension.</param>
            <param name="value">The value to be used in the macro recording.</param>
            <param name="convertedValue">The value to be placed in state, which is not necessarily the same as the value
            used for macro recording.</param>
            <param name="initialize">Indicates whether a measurement initialization is required after the new value is
            placed in state.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.InputExtension.SetValueToExtState(System.Reflection.MethodBase,System.String,System.Object,System.Object,System.Boolean)">
            <summary>
            Sets a value in state.
            </summary>
            <param name="caller">Identifies the calling member to be used for macro recording. This parameter must either be
            a valid member on the public, customer-facing interface of the extension, or null. If the parameter is null, no
            macro recording is performed.</param>
            <param name="key">The state key for the value.</param>
            <param name="value">The value to be used in the macro recording.</param>
            <param name="convertedValue">The value to be placed in state, which is not necessarily the same as the value
            used for macro recording.</param>
            <param name="initialize">Indicates whether a measurement initialization is required after the new value is
            placed in state.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.InputExtension.SetParameter(Agilent.SA.Vsa.InstrumentType,System.String,System.Object)">
            <summary>
            Sets the named parameter on the specified instrument type to the value specified. 
            </summary>
            <remarks><strong>Note:</strong>  It is recommended to use the strongly typed methods and 
            properties on sub-classes of this class instead of this method.  See the specific Input Extension
            class for the hardware that is being used.</remarks>
            <param name="hwType">Which type of hardware within the <see cref="T:Agilent.SA.Vsa.HardwareGroup"/> this parameter should apply to.</param>
            <param name="name">The key name of the parameter.</param>
            <param name="value">The value to set the named parameter to.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>The hardware type is not <see cref="F:Agilent.SA.Vsa.InstrumentType.Adc"/> 
            (only Adc is currently supported).</para>
            <para>name is misspelled or not supported.</para></exception>
        </member>
        <member name="M:Agilent.SA.Vsa.InputExtension.GetParameter(Agilent.SA.Vsa.InstrumentType,System.String)">
            <summary>
            Gets the value of the named parameter on the specified instrument type. 
            </summary>
            <remarks><strong>Note:</strong>  It is recommended to use the strongly typed methods and 
            properties on sub-classes of this class instead of this method.  See the specific Input Extension
            class for the hardware that is being used.</remarks>
            <param name="hwType">Which type of hardware within the <see cref="T:Agilent.SA.Vsa.HardwareGroup"/> this parameter applies to.</param>
            <param name="name">The key name of the parameter.</param>
            <returns>The value of the specified parameter.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException"><para>The hardware type is not <see cref="F:Agilent.SA.Vsa.InstrumentType.Adc"/>.</para>
            <para>name is misspelled or not supported.</para></exception>
        </member>
        <member name="M:Agilent.SA.Vsa.InputExtension.ParameterNames(Agilent.SA.Vsa.InstrumentType)">
            <summary>
            Gets an array of strings representing the named parameters that can be configured on this hardware.
            </summary>
            <remarks>
            <para>
            <strong>Note:</strong>  It is recommended to use the strongly typed methods and 
            properties on sub-classes of this class instead of this method.  See the specific Input Extension
            class for the hardware that is being used.
            </para>
            <para>These parameter names can be used with the SetParameter or GetParameter property to set or get parameter Values.</para>
            </remarks>
            <param name="hwType">Which type of hardware within the <see cref="T:Agilent.SA.Vsa.HardwareGroup"/> this parameter should apply to.
            Only the Adc type is currently supported.</param>
            <returns>Array of parameter names.  Empty array if the hardware has no configurable input extension parameters.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The hardware type is is not <see cref="F:Agilent.SA.Vsa.InstrumentType.Adc"/></exception>
        </member>
        <member name="P:Agilent.SA.Vsa.InputExtension.Parent">
            <summary>
            Sets the parent for this object.
            </summary>
            <remarks>
            The base class has been overridden to allow the import type to grab the correct object.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.InputExtension.ExtensionState">
            <summary>
            Gets the input extension state object.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.InputExtension.Measurement">
            <summary>
            Gets the measurement associated with this object.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.InputExtension.KeyContext">
            <summary>
            Gets the context for generating a state key (to add a suffix per input extension object index). 
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.InputExtension.GroupIndex">
            <summary>
            Gets the index of the instrument group in the current hardware configuration that is associated with this input extension object.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.InputExtensionCollection">
            <summary>
            Represents a collection of input extensions.
            </summary>
            <remarks>The input extension collection contains a collection of input extension objects.  It contains
            one input extension object per <see cref="T:Agilent.SA.Vsa.HardwareGroup"/> in <see cref="T:Agilent.SA.Vsa.HardwareGroupCollection">Measurement.SelectedAnalyzer.Groups</see>.
            An input extension is unique to the specific kind of hardware used in that group and contains settings that
            are unique to that hardware.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.InputExtensionCollection.Preset">
            <summary>
            Preset all the input extension settings of all input extensions to default values.
            </summary>
        </member>
        <member name="T:Agilent.SA.VsaImplementation.ApplicationInstance">
            <summary>
            Represents an application instance.
            </summary>
        </member>
        <member name="P:Agilent.SA.VsaImplementation.ApplicationInstance.Application">
            <summary>
            Gets or sets a reference to the application instance in the current process.
            </summary>
        </member>
        <member name="T:Agilent.SA.VsaImplementation.CommandLineArguments">
            <summary>
            Implements processing of command line arguments.
            </summary>
        </member>
        <member name="T:Agilent.SA.VsaImplementation.ICommandLineArguments">
            <summary>
            Defines a command line arguments interface.
            </summary>
        </member>
        <member name="M:Agilent.SA.VsaImplementation.ICommandLineArguments.GetArgument(System.String)">
            <summary>
            Gets the argument for a specified command line option.
            </summary>
            <param name="commandOption">The command line option to find the argument for.</param>
            <returns>If found then the argument for the specified command line option; otherwise null or Empty string.</returns>
        </member>
        <member name="P:Agilent.SA.VsaImplementation.ICommandLineArguments.Arguments">
            <summary>
            Gets a collection of command line arguments.
            </summary>
        </member>
        <member name="M:Agilent.SA.VsaImplementation.CommandLineArguments.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.VsaImplementation.CommandLineArguments"/> class.
            </summary>
            <param name="args">The command line arguments.</param>
        </member>
        <member name="M:Agilent.SA.VsaImplementation.CommandLineArguments.ParseArgs">
            <summary>
            Parse the command line arguments.
            </summary>
            <remarks>
            This method parses each command line argument to determine the key and value for each.
            This must be called before accessing the members on this object.
            </remarks>
        </member>
        <member name="M:Agilent.SA.VsaImplementation.CommandLineArguments.GetArgument(System.String)">
            <summary>
            Finds the argument for the specified command line option.
            </summary>
            <param name="commandOption">Command line option name.</param>
            <returns>The argument if it is found; otherwise null.</returns>
        </member>
        <member name="P:Agilent.SA.VsaImplementation.CommandLineArguments.Arguments">
            <summary>
            Gets the parsed command line argument as key/value pairs.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.DigitalInputDataPart">
            <summary>
            Specifies how data is mapped from the Logic Analyzer data buses to 89600 data stream.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DigitalInputDataPart.Real">
            <summary>
            Chosen bus maps to real data.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DigitalInputDataPart.IQ">
            <summary>
            Two chosen buses map to the real (I) part and imaginary (Q) part.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DigitalInputDataPart.IQInterleave">
            <summary>
            Pairs of data from chosen bus are used as real and imaginary parts.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DigitalInputDataPart.QIInterleave">
            <summary>
            Pairs of data from chosen bus are used as real and imaginary parts,
            except that imaginary part comes first, followed by real.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DigitalInputDataPart.Phase">
            <summary>
            Chosen bus maps to phase.  Magnitude is set by Data Scale.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DigitalInputDataPart.MagnitudePhase">
            <summary>
            Two chosen buses map to signed magnitude and phase.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DigitalInputDataPart.MagnitudePhaseInterleave">
            <summary>
            Pairs of data from the chosen bus are used as signed magnitude and phase.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DigitalInputDataPart.PhaseMagnitudeInterleave">
            <summary>
            Pairs of data from the chosen bus are used as phase and signed magnitude.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.Digital">
            <summary>
            Digital input common setup properties
            </summary>
            <remarks>
            <para>This class and the DigitalChannel class are used to setup an 89600 measurement using data from 
            an Keysight Logic Analyzer. The user must have previously set up the logic analyzer configuration using
            Logic Analyzer Application.
            </para>
            <para>The Logic Analyzer configuration consists of one or more Analysis Modules and any optional software Tools attached to the modules.</para>
            <para>The outputs of analysis modules and tools are groups of digital signals called buses. 
            The names and configuration for data modules, tools, and buses can be freely assigned using the Logic Analyzer application.</para>
            <para>Measurement Procedure</para>
            <para>To analyze data from a Logic Analyzer application using the Vector Signal Analyzer</para>
            <list type="number">
             <item>First connect the VSA to a Logic Analyzer application (using the Hardware object)</item> 
             <item>Select the measurement input data module using the DigitalChannel.DataModule property. You only need to select this
                   for one channel. See note below.</item>
             <item>(optional) If software tools are connected to the data module in the logic analyzer configuration, you may select a 
                   software tool for each channel using the DigitalChannel.DataTool property. See note below.</item>
             <item>Use the DataPart property to specify the data format (e.g., real, I and Q on separate buses, interleaved I/Q, etc.)</item>
             <item>Specify the data bus or buses for each measurement channel using the DigitalChannel.DataBusPart1 and .DataBusPart2 properties.</item>
             <item>Use the DataSign property to select the binary data sign convention.</item>
             <item>(optional) Specify scaling using the DigitalChannel.DataScalePart1 and .DataScalePart2 properties.</item>
             <item>Set the SampleRate property to represent the data sample rate. This is not the bus data rate but the sample rate 
             when viewed as a discrete communications signal (e.g. its sample rate at a DAC input or an ADC output).</item>
             <item>(optional) Use the Center property to associate a center frequency with the data. The default is 0.</item>
            </list>
            NOTE:
            All channel data buses used in a measurement, whether input directly from a module or from a tool, 
            must be synchronous with each other, and the "sample 0" data point must represent the same instant 
            in time on all data buses. 
            Therefore there is a common SampleRate that applies to all channels, and all data must
            come from a common data module or from a tool connected with the module. 
            The software forces the DataModule property to be the same for all digital channels.
            Different tools may be used for each channel, but they must all connect to the same module.
            If any tools used in the measurement cause data compression, then the user must ensure that 
            all tools used compress the data equally and that data point 0 represents the same time for all
            data buses used.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Digital.Channels">
            <summary>
            Gets a collection of DigitalChannel objects.
            </summary>
            <remarks>Used to set properties for individual channels</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Digital.SampleRate">
            <summary>
            Gets or sets the sample rate of the digital input.  
            </summary>
            <remarks>
            <para>
            Along with Center, this determines the allowable range of measurement center/span frequencies.  
            This property sets the sample rate for all channels. 
            </para>
            <para>
            Digital data from the Logic Analyzer represents a numerical quantity sampled at periodic
            time intervals.  The VSA can not determine the true sample rate from the Logic Analyzer, so
            you must enter it.  The Sample Rate establishes the maximum measurement Span for the VSA as follows:
            <list type="table">
            <item><term>real data</term><description>Maximum Span = Sample Rate / 2.56</description></item>
            <item><term>complex data</term><description>Maximum Span = Sample Rate / 1.28</description></item>
            </list>
            </para>
            <para>
            The Span may be set to a value lower than Maximum Span.  The analysis software then filters and
            resamples the incoming data to reduce the span.  
            </para>
            <para>
            Whenever the SampleRate or Center properties are changed, the Span of the measurement 
            is reset to its maximum value and the Center Frequency of the measurement 
            is set to equal the Center property.  
            </para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Digital.Center">
            <summary>
            Gets or sets the implied center frequency of a digital input. 
            </summary>
            <remarks>
            <para>
            Along with SampleRate, this determines the allowable range of measurement center/span frequencies. 
            This property sets the implied center frequency for all channels.
            The Center property is ignored when DataPart is set to Real
            </para>
            <para>
            For complex digital input data, it is usual to regard the spectrum as centered at 0. 
            This property allows you to associate a different center frequency for the input data.
            The measurement Center Frequency may be set to any frequency in the range
            </para>
            <para>
            Center +/- (Maximum Span)/2
            </para>
            <para>
            Whenever the SampleRate or Center properties are changed, the Span of the measurement 
            is reset to its maximum value and the Center Frequency of the measurement 
            is set to equal the Center property. 
            </para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Digital.DataPart">
            <summary>
            Gets or sets how the data buses (e.g. I and Q) are combined to create a real or complex number.
            </summary>
            <remarks>
            <para>The DataPart property applies to all channels.</para> 
            <para>Data from a Logic Analyzer that is used by the VSA application can be either real or 
            complex. Real data comes from a single bus.
            Complex data may come from two parallel buses or, may be interleaved on a single bus, and 
            each pair of numbers may represent real and imaginary parts or magnitude and phase.</para> 
            <para>See the <see cref="T:Agilent.SA.Vsa.DigitalInputDataPart">DigitalInputDataPart</see> description for details how DataPart selection maps bus data to 89600 analysis data.</para>	 
            </remarks>
        </member>
        <member name="T:Agilent.SA.Vsa.DigitalChannelCollection">
            <summary>
            Collection of DigitalChannel objects.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.DigitalInputSignConvention">
            <summary>
            Specifies the sign convention for digital input (Logic Analyzer).
            </summary>
            <remarks>
            Note that an offset binary representation can be converted to two's complement 
            (and vice versa) by simply inverting the most significant bit.
            </remarks>
        </member>
        <member name="F:Agilent.SA.Vsa.DigitalInputSignConvention.TwosComplement">
            <summary>
            Two's complement convention.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DigitalInputSignConvention.OffsetBinary">
            <summary>
            Offset binary convention.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.DigitalChannel">
            <summary>
            Channel-specific digital input properties and methods
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.DigitalChannel.GetDataToolNames(System.String)">
            <summary>
            Returns a list of tool names available at the output of a given module.
            </summary>
            <remarks>
            This property returns an array of logic analyzer tool names attached to a given logic analyzer module. 
            When this module name is used to set the DataModule property, then any of these tool names 
            can be used to set the DataTools property. 
            The tool names are re-read from the logic analyzer each 
            time a VSA measurement is restarted following a call to Disconnect() on the HardwareConfiguration object used by the measurement.
            </remarks>
            <param name="dataModule">Module name for which tool names are requested</param>
            <returns>string array</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.DigitalChannel.GetDataBusNames(System.String)">
            <summary>
            Returns a list of data bus names at the output of the given module or tool.
            </summary>
            <remarks>
            This property returns an array of bus names that are available as output from a specified data module or tool.
            Bus names are used to set the DataBusPart1 or DataBusPart2 properties for a channel. 
            Valid DataModule names are given by the ValidValues("DataModule") function.
            Valid DataTool names for a given module are given by the GetDataToolNames(module) method. 
            The module and bus names are re-read from the logic analyzer each time a VSA 
            measurement is restarted following a call to Disconnect() on the HardwareConfiguration object used by the measurement.
            </remarks>
            <param name="moduleOrTool">Module or tool name for which output bus names are requested.</param>
            <returns>string array</returns>
        </member>
        <member name="P:Agilent.SA.Vsa.DigitalChannel.DataScalePart1">
            <summary>
            Gets or sets the data scaling factor for part 1 of the channel data.  
            </summary>
            <remarks>
            <para>
            Data from the logic analyzer starts as several digital signals grouped into named buses. 
            Each bus represents an n-bit signed number that is either a real number or part of a complex number.
            </para>
            <para>
            The full range of integer values taken on by DataBusPart1 is mapped to the
            interval (-1, +1) times DataScalePart1, except that it is mapped
            to (-pi, +pi) times DataScalePart1 when DataBusPart1 represents phase.
            </para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.DigitalChannel.DataScalePart2">
            <summary>
            Gets or sets the data scaling factor for part 2 of the channel data.  
            </summary>
            <remarks>
            <para>
            Data from the logic analyzer starts as several digital signals grouped into named buses. 
            Each bus represents an n-bit signed number that is either a real number or part of a complex number.
            </para>
            <para>
            The full range of integer values taken on by DataBusPart2 is mapped to the
            interval (-1, +1) times DataScalePart2, except that it is mapped
            to (-pi, +pi) times DataScalePart2 when DataBusPart2 represents phase.
            </para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.DigitalChannel.DataModule">
            <summary>
            Gets or sets the name of the logic analyzer module from which data will be taken.
            </summary>
            <remarks>
            <para>
            This property determines which module will be the data source, and is forced to be the same for all VSA digital channels. 
            Valid DataModule names are given by the ValidValues("DataModule") function.
            </para>
            <para>
            See the DataTool property help for information about selecting data from a tool 
            (e.g. a Signal Extractor) that is connected to the selected module. 
            See the Digital Object overview for more about selecting modules and tools.
            </para>
            <para>
            Changing the DataModule property on any channel will force all other channels' 
            DataModule properties to the same value, and will set all channels' 
            DataTool properties to the empty string (i.e., no tool selected). 
            DataBus names may also be cleared if they are not valid for the selected module.
            See the Digital Object overview for more about selecting modules and tools.
            </para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.DigitalChannel.DataTool">
            <summary>
            Gets or sets the name of the logic analyzer tool from which data will be taken.
            </summary>
            <remarks>
            <para>
            This property allows you to select a logic analyzer tool (e.g. Signal Extractor) to be the data source for a VSA channel. 
            A logic analyzer tool transforms data from the logic analyzer module it is connected to, 
            and presents the transformed data at its output as one or more named buses. 
            Valid values for DataTool, given a particular choice of DataModule, are given by the GetDataToolNames(module) method.
            The empty string ("") is always valid and denotes that the data will come directly from the chosen DataModule.
            </para>
            <para>
            The DataModule property must first be set before setting DataTool. Different channels may have different DataTool settings
            as long as the tools are all connected to the same module.
            </para>
            <para>
            If the DataModule property is changed, DataTool is set to the empty string. 
            See the Digital Object overview for more about selecting modules and tools.
            </para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.DigitalChannel.DataBusPart1">
            <summary>
            Gets or sets the data bus name used for part 1 of the channel data (e.g. I or Q).
            </summary>
            <remarks>
            <para>
            This property is used to set which logic analyzer data bus is used as the first part
            of real or complex data for a digital input channel. The interpretation of DataBusPart1 
            depends on the DataPart and DataSign properties, as well as DataBusScale1.
            </para>
            <para>
            You must set DataModule and (optionally) DataTool properties for a channel, 
            before setting DataBusPart1 or DataBusPart2.
            </para>
            <para>
            The valid values for this property are found by calling the GetDataBusNames(moduleOrTool) method,
            where moduleOrTool is the name of a logic analyzer module or tool from which you wish to get data. 
            </para>
            <para>See the Digital Object overview for more about selecting modules, tools, and buses.</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.DigitalChannel.DataBusPart2">
            <summary>
            Gets or sets the data bus name used for part 2 of the channel data (e.g. I or Q).
            </summary>
            <remarks>
            <para>
            This property is used to set which logic analyzer data bus is used as the second part
            of complex data for a digital input channel. The interpretation of DataBusPart2 
            depends on the DataPart and DataSign properties, as well as DataBusScale2.
            </para>
            <para>
            You must set DataModule and (optionally) DataTool properties for a channel, 
            before setting DataBusPart1 or DataBusPart2.
            </para>
            <para>
            The valid values for this property are found by calling the GetDataBusNames(moduleOrTool) method,
            where moduleOrTool is the name of a logic analyzer module or tool from which you wish to get data. 
            If a change to DataModule or DataTool invalidates the DataBusPart2 name, it is set to an empty string. 
            DataBusPart2 (when required) must derive from the same module as DataBusPart1, 
            i.e., directly from the module output or from a tool connected to the common module. 
            </para>
            <para>See the Digital Object overview for more about selecting modules, tools, and buses.</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.DigitalChannel.DataSign">
            <summary>
            Gets or sets how signed numbers are represented.  
            </summary>
            <remarks>
            <para>
            Supported sign conventions are two's complement and offset binary.
            The DataSign property applies to all channels.
            </para>
            <para>
            Data from the Logic Analyzer starts as several digital channels grouped into named buses. 
            Each bus represents an n-bit signed number that is either a real number or part of a complex number.
            The numbers are initially normalized (as shown in the tables below) so that the maximum absolute value is 1.
            This scaling is then modified by the DataPart and the digital channel DataScalePart1 and DataScalePart2 settings.
            </para>
            <para>
            The following tables illustrate the two sign conventions:
            </para>
            <list type="table">
            <listheader><term>Offset binary n-digit number:</term><description>Represents (when normalized):</description></listheader>
            <item><term>111...11</term><description>1 - 1/2^(n-1)</description></item>
            <item><term>100...01</term><description>+1/2^(n-1)</description></item>
            <item><term>100...00</term><description>0.0</description></item>
            <item><term>011...11</term><description>-1/2^(n-1)</description></item>
            <item><term>000...00</term><description>-1 + 1/2^(n-1)</description></item>
            </list>
            <para>
            </para>
            <list type="table">
            <listheader><term>Two's complement n-digit number:</term><description>Represents (when normalized):</description></listheader>
            <item><term>011...11</term><description>1 - 1/2^(n-1)</description></item>
            <item><term>000...01</term><description>+1/2^(n-1)</description></item>
            <item><term>000...00</term><description>0.0</description></item>
            <item><term>111...11</term><description>-1/2^(n-1)</description></item>
            <item><term>100...00</term><description>-1 + 1/2^(n-1)</description></item>
            </list>
            </remarks>
        </member>
        <member name="T:Agilent.SA.VsaInternal.IMeasurementObject">
            <summary>
            Defines an interface that indicates what measurement the implementer is associated with
            </summary>
        </member>
        <member name="P:Agilent.SA.VsaInternal.IMeasurementObject.Measurement">
            <summary>
            Gets the measurement the object is associated with.
            </summary>
        </member>
        <member name="T:Agilent.SA.VsaInternal.StateValueChangedHandler">
            <summary>
            Defines a delegate to be called when a state value changes.
            </summary>
            <param name="key">The name of the key whose value changed.</param>
        </member>
        <member name="T:Agilent.SA.VsaInternal.IState">
            <summary>
            Defines a dictionary (string_key and value) that contains settings for the application and extends <see cref="T:Agilent.SA.Vsa.IStateDictionary"/>
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.IStateDictionary">
            <summary>
            Defines a dictionary (string_key and value) that contains settings for the application	
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.IStateDictionary.Exists(System.String)">
            <summary>
            Gets a value indicating whether the specified key exists in state.
            </summary>
            <param name="key">The key name.</param>
            <returns>true if the key exists; otherwise false</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.IStateDictionary.Remove(System.String)">
            <summary>
            Removes the specified key/value pair from state.
            </summary>
            <param name="key">The key name.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.IStateDictionary.RemoveAll">
            <summary>
            Removes all key/value pairs from state.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.IStateDictionary.Value``1(System.String,``0)">
            <summary>
            Gets the value associated with a specified key.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="key">The key name.</param>
            <param name="defaultValue">The value to return if there is no value in state for the specified key.</param>
            <returns>The value in state if it exists; otherwise the defaultValue.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.IStateDictionary.Value(System.String,System.Int16)">
            <summary>
            Gets a short type value associated with a specified key.
            </summary>
            <param name="key">The key name.</param>
            <param name="defaultValue">The value to return if there is no value in state for the specified key.</param>
            <returns>The value in state if it exists; otherwise the defaultValue.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.IStateDictionary.Value(System.String,System.Int32)">
            <summary>
            Gets an integer type value associated with a specified key.
            </summary>
            <param name="key">The key name.</param>
            <param name="defaultValue">The value to return if there is no value in state for the specified key.</param>
            <returns>The value in state if it exists; otherwise the defaultValue.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.IStateDictionary.Value(System.String,System.Boolean)">
            <summary>
            Gets a boolean type value associated with a specified key.
            </summary>
            <param name="key">The key name.</param>
            <param name="defaultValue">The value to return if there is no value in state for the specified key.</param>
            <returns>The value in state if it exists; otherwise the defaultValue.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.IStateDictionary.Value(System.String,System.Single)">
            <summary>
            Gets a float type value associated with a specified key.
            </summary>
            <param name="key">The key name.</param>
            <param name="defaultValue">The value to return if there is no value in state for the specified key.</param>
            <returns>The value in state if it exists; otherwise the defaultValue.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.IStateDictionary.Value(System.String,System.Double)">
            <summary>
            Gets a double type value associated with a specified key.
            </summary>
            <param name="key">The key name.</param>
            <param name="defaultValue">The value to return if there is no value in state for the specified key.</param>
            <returns>The value in state if it exists; otherwise the defaultValue.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.IStateDictionary.Value(System.String,System.String)">
            <summary>
            Gets a string type value associated with a specified key.
            </summary>
            <param name="key">The key name.</param>
            <param name="defaultValue">The value to return if there is no value in state for the specified key.</param>
            <returns>The value in state if it exists; otherwise the defaultValue.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.IStateDictionary.Value(System.String,System.Object)">
            <summary>
            Gets an object type value associated with a specified key.
            </summary>
            <param name="key">The key name.</param>
            <param name="defaultValue">The value to return if there is no value in state for the specified key.</param>
            <returns>The value in state if it exists; otherwise the defaultValue.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.IStateDictionary.Value(System.String)">
            <summary>
            Gets an array type value associated with a specified key.
            </summary>
            <param name="key">The key name.</param>
            <returns>The value in state.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.IStateDictionary.CopyTo(Agilent.SA.Vsa.IStateDictionary)">
            <summary>
            Copy the current dictionary contents to the specified dictionary.
            </summary>
            <param name="dst">Destination dictionary to copy the current dictionary contents to.</param>
        </member>
        <member name="P:Agilent.SA.Vsa.IStateDictionary.Keys">
            <summary>
            Gets a list of keys that are in state.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.IStateDictionary.Item(System.String)">
            <summary>
            Gets or sets the value associated with a specified key.
            </summary>
            <param name="key">The key name.</param>
            <returns>The value associated with the key.</returns>
        </member>
        <member name="P:Agilent.SA.Vsa.IStateDictionary.ParentState">
            <summary>
            Gets or sets a parent state dictionary so that dictionaries can be chained together in a hierarchical way.
            </summary>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IState.IsPersistent(System.String)">
            <summary>
            Gets a value indicating whether the specified key gets persisted to a setup file.
            </summary>
            <param name="key">Name of the key.</param>
            <returns>true if it is persisted; otherwise false</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IState.SetPersistent(System.String,System.Boolean)">
            <summary>
            Sets a value for the specified key indicating whether it is persisted to a setup file.
            </summary>
            <param name="key">Name of the key</param>
            <param name="value">true to persist; otherwise false</param>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IState.SetEnableChanged(System.Boolean)">
            <summary>
            Sets a value indicating whether the ValueChangedHandler will be called when the value for a key changes.
            </summary>
            <param name="value">true to turn it on; false to turn it off</param>
            <returns>The previous value.</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IState.SetEnableRemoved(System.Boolean)">
            <summary>
            Sets a value indicating whether notifications are generated when a key is removed.  (Not functional because there is no handler defined that gets called).  
            </summary>
            <param name="value">true to turn it on;  false to turn it off</param>
            <returns>The previous value.</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IState.SetChanged(System.String)">
            <summary>
            Sets a value indicating that the key value has changed.
            </summary>
            <param name="key">The name of the key.</param>
            <seealso cref="M:Agilent.SA.VsaInternal.IState.IsChanged(System.String)"/>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IState.IsChanged(System.String)">
            <summary>
            Gets a value for the specified key indicating whether the value for that key has changed
            </summary>
            <param name="key">Name of the key</param>
            <returns>true if it has changed; otherwise false</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IState.RegisterForValueChangedEvents(Agilent.SA.VsaInternal.IObjectModel)">
            <summary>
            Register for value changed events.
            </summary>
            <param name="obj">An object within the object model that will monitor value changes.</param>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IState.UnregisterForValueChangedEvents(Agilent.SA.VsaInternal.IObjectModel)">
            <summary>
            Unregister for value changed events.
            </summary>
            <param name="obj">An object within the object model that was previously registered.</param>
        </member>
        <member name="P:Agilent.SA.VsaInternal.IState.ValueChangedHandler">
            <summary>
            Gets a delegate handler to be called for clients that wish to monitor value changes in state.
            </summary>
        </member>
        <member name="T:Agilent.SA.VsaInternal.IStateRef">
            <summary>
            Defines an interface to be implemented on an object in the object model to get the state dictionary associated with it.
            </summary>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IStateRef.NewChangeGroup">
            <summary>
            Creates a new change group for the state associated with this object.
            </summary>
            <returns>A change group.</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IStateRef.NewChangeGroup(System.Boolean)">
            <summary>
            Creates a new change group for the state associated with this object.
            </summary>
            <param name="canStopMeasurement">if true then the measurement will be stopped when the change group is created.</param>
            <returns>A change group.</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IStateRef.AddChangeNotify(System.Object,System.String)">
            <summary>
            Manually indicate the property to send a change notification for when the change group drops out of scope.  
            Normally the state key to member mapping handles this automatically.
            </summary>
            <param name="target">The object the property is on.</param>
            <param name="propertyName">The name of the property.</param>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IStateRef.AddChangeNotify(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Manually indicate the collection to send a change notification for when the change group drops out of scope.
            </summary>
            <param name="target">The object for the collection.</param>
            <param name="e">The event args to send with the notification.</param>
        </member>
        <member name="P:Agilent.SA.VsaInternal.IStateRef.State">
            <summary>
            Gets the state dictionary associated with this object.
            </summary>
        </member>
        <member name="P:Agilent.SA.VsaInternal.IStateRef.IsChangeGroup">
            <summary>
            Gets a value indicating whether there is already a change group in effect.
            </summary>
        </member>
        <member name="P:Agilent.SA.VsaInternal.IStateRef.IsChangePending">
            <summary>
            Gets or sets a value indicating whether there is a change pending in a change group.
            </summary>
        </member>
        <member name="T:Agilent.SA.VsaInternal.IStateRef2">
            <summary>
            Defines an interface to be implemented on an object in the object model to get the state dictionary associated with it.
            </summary>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IStateRef2.NewChangeGroup(System.Boolean,System.Boolean)">
            <summary>
            Creates a new change group for the state associated with this object.
            </summary>
            <param name="canStopMeasurement">if true then the measurement will be stopped when the change group is created.</param>
            <param name="isSetHardware">if true then the hardware will be set up to match this measurement.</param>
            <returns>A change group.</returns>
        </member>
        <member name="T:Agilent.SA.Vsa.PlayChannel">
            <summary>
            The PlayChannel class contains recording playback settings that may be different for each recording channel. 
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.PlayChannel.Center">
            <summary>Gets the current recording center frequency for this channel.</summary>
            <remarks>
            Returns the center frequency, in Hertz, for this channel of the current recording. 
            This corresponds to the measurement's input channel center frequency at the time the data was recorded. 
            </remarks>
        </member>
        <member name="T:Agilent.SA.Vsa.PlayChannelCollection">
            <summary>
            The PlayChannelCollection class is for channelized (on a per recording channel basis) recording playback settings.
            </summary>
        </member>
        <member name="T:Agilent.SA.VsaImplementation.PresetMethodAttribute">
            <summary>
            Defines an attribute that can be used on measurement extensions to indicate the method to call to do a measurement extension preset.
            </summary>
        </member>
        <member name="M:Agilent.SA.VsaImplementation.PresetMethodAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.VsaImplementation.PresetMethodAttribute"/> class.
            </summary>
            <param name="displayName">The text label to show a user for this preset (should be kept fairly short).</param>
        </member>
        <member name="P:Agilent.SA.VsaImplementation.PresetMethodAttribute.DisplayName">
            <summary>
            Gets the display name to show for the preset operation.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.StateDictionary">
            <summary>The StateDictionary class represents the description information associated with a <see cref="T:Agilent.SA.Vsa.MeasurementData"/>.</summary>
            <remarks>
            For more information and a list of the available keys, see the "Data Header Variables" topic in the 
            "Shared Data with Other Applications" book of the online help.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.StateDictionary.Exists(System.String)">
            <summary>Gets a value indicating whether the specified key exists in the StateDictionary</summary>
            <param name="key">A state key name.</param>
            <returns>Whether the key exists (true if it does).</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.StateDictionary.Value``1(System.String,``0)">
            <summary>Returns the enumeration value associated with the specified key.</summary>
            <typeparam name="T">The specified enumeration type for the returned value.</typeparam>
            <param name="key">The key.</param>
            <param name="defaultValue">The returned value if the key is not found or the value cannot be converted to the specified enumeration.</param>
            <returns>The enumeration value.</returns>
            <remarks>See <see cref="P:Agilent.SA.Vsa.StateDictionary.Item(System.String)"/> for more information about keys.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.StateDictionary.Value(System.String,System.Int16)">
            <summary>Returns the short value associated with the specified key.</summary>
            <param name="key">The key.</param>
            <param name="defaultValue">The returned value if the key is not found or the value cannot be converted to a short.</param>
            <returns>The short value.</returns>
            <remarks>See <see cref="P:Agilent.SA.Vsa.StateDictionary.Item(System.String)"/> for more information about keys.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.StateDictionary.Value(System.String,System.Int32)">
            <summary>Returns the integer value associated with the specified key.</summary>
            <param name="key">The key.</param>
            <param name="defaultValue">The returned value if the key is not found or the value cannot be converted to an integer.</param>
            <returns>The integer value.</returns>
            <remarks>See <see cref="P:Agilent.SA.Vsa.StateDictionary.Item(System.String)"/> for more information about keys.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.StateDictionary.Value(System.String,System.Boolean)">
            <summary>Returns the boolean value associated with the specified key.</summary>
            <param name="key">The key.</param>
            <param name="defaultValue">The returned value if the key is not found or the value cannot be converted to a boolean.</param>
            <returns>The boolean value.</returns>
            <remarks>See <see cref="P:Agilent.SA.Vsa.StateDictionary.Item(System.String)"/> for more information about keys.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.StateDictionary.Value(System.String,System.Single)">
            <summary>Returns the float value associated with the specified key.</summary>
            <param name="key">The key.</param>
            <param name="defaultValue">The returned value if the key is not found or the value cannot be converted to a float.</param>
            <returns>The float value.</returns>
            <remarks>See <see cref="P:Agilent.SA.Vsa.StateDictionary.Item(System.String)"/> for more information about keys.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.StateDictionary.Value(System.String,System.Double)">
            <summary>Returns the double value associated with the specified key.</summary>
            <param name="key">The key.</param>
            <param name="defaultValue">The returned value if the key is not found or the value cannot be converted to a double.</param>
            <returns>The double value.</returns>
            <remarks>See <see cref="P:Agilent.SA.Vsa.StateDictionary.Item(System.String)"/> for more information about keys.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.StateDictionary.Value(System.String,System.String)">
            <summary>Returns the string value associated with the specified key.</summary>
            <param name="key">The key.</param>
            <param name="defaultValue">The returned value if the key is not found or the value cannot be converted to a string.</param>
            <returns>The string value.</returns>
            <remarks>See <see cref="P:Agilent.SA.Vsa.StateDictionary.Item(System.String)"/> for more information about keys.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.StateDictionary.Value(System.String,System.Object)">
            <summary>Returns the object value associated with the specified key.</summary>
            <param name="key">The key.</param>
            <param name="defaultValue">The returned value if the key is not found.</param>
            <returns>The object value.</returns>
            <remarks>See <see cref="P:Agilent.SA.Vsa.StateDictionary.Item(System.String)"/> for more information about keys.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.StateDictionary.Value(System.String)">
            <summary>Returns the array value associated with the specified key.</summary>
            <param name="key">The key.</param>
            <returns>The array value.</returns>
            <remarks>Returns a null if the key is not found or the value is not an array.
            See <see cref="P:Agilent.SA.Vsa.StateDictionary.Item(System.String)"/> for more information about keys.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.StateDictionary.IndexedValueAsDouble(System.Enum)">
            <summary>Get the selected error/information.</summary>
            <param name="index">The specified enumeration index to the value</param>
            <returns>The error/information as a double</returns>
            <remarks>
            <para>
            Enumerations used for indexers must have the DataKey attribute.
            Value enumerations include <see cref="T:Agilent.SA.Vsa.TraceDataDemodInformation"/>,
            <see cref="T:Agilent.SA.Vsa.TraceDataOfdmInformation"/>, <see cref="T:Agilent.SA.Vsa.TraceData3GChanInformation"/>,
            and <see cref="T:Agilent.SA.Vsa.TraceData3GCompInformation"/>.
            </para>
            <para>
            This is only Valid for a symbol / error table measurement result (<see cref="P:Agilent.SA.Vsa.Trace.DataName"/> set to "Syms/Errs1").
            </para>
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.StateDictionary.SetPersistent(System.String,System.Boolean)">
            <summary>
            Sets a value indicating that the key value is persistent.
            </summary>
            <param name="key">The name of the key.</param>
            <param name="value">Whether the key is set to be persistent.</param>
            <seealso cref="M:Agilent.SA.Vsa.StateDictionary.IsPersistent(System.String)"/>
        </member>
        <member name="M:Agilent.SA.Vsa.StateDictionary.IsPersistent(System.String)">
            <summary>
            Gets a value for the specified key indicating whether the key is persistent
            </summary>
            <param name="key">Name of the key</param>
            <returns>true if it has persistent; otherwise false</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.StateDictionary.Remove(System.String)">
            <summary>Remove the specified key/value pair from the collection.</summary>
            <param name="key">The key.</param>
            <remarks>This method can only be used if <see cref="P:Agilent.SA.Vsa.StateDictionary.IsReadOnly"/> is False.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.StateDictionary.RemoveAll">
            <summary>Remove all key/value pairs from the collection.</summary>
            <remarks>This method can only be used if <see cref="P:Agilent.SA.Vsa.StateDictionary.IsReadOnly"/> is False.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.StateDictionary.CopyTo(Agilent.SA.Vsa.StateDictionary)">
            <summary>Copy this StateDictionary to the specified StateDictionary/&gt;.</summary>
            <param name="dst">Destination StateDictionary.</param>
            <remarks>This method can only be used if the destination StateDictionary <see cref="P:Agilent.SA.Vsa.StateDictionary.IsReadOnly"/> is False.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.StateDictionary.CopyRemoveTo(Agilent.SA.Vsa.StateDictionary)">
            <summary>Copy this StateDictionary to the specified StateDictionary, removing all keys in the destination that are not in this StateDictionary./&gt;.</summary>
            <param name="dst">Destination StateDictionary.</param>
            <remarks>This method can only be used if the destination StateDictionary <see cref="P:Agilent.SA.Vsa.StateDictionary.IsReadOnly"/> is False.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.StateDictionary.CopyPersistentTo(System.Boolean,Agilent.SA.Vsa.StateDictionary)">
            <summary>Copy the persistent items in the StateDictionary to the specified StateDictionary/&gt;.</summary>
            <param name="isPersistent">Copy only keys matching whose persistence matches this value.</param>
            <param name="dst">Destination StateDictionary.</param>
            <remarks>This method can only be used if the destination StateDictionary <see cref="P:Agilent.SA.Vsa.StateDictionary.IsReadOnly"/> is False.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.StateDictionary.IsReadOnly">
            <summary>Gets a value indicating whether this StateDictionary cannot be changed.</summary>
            <remarks>
            <para>
            A StateDictionary contains a collection of Key/Value pairs where the keys are unique (only occur once in the collection).
            The value for each key may be an enumeration, a short, integer, boolean, float, double, string, or an array of any of these types.
            </para>
            <para>
            A StateDictionary contained in a <see cref="T:Agilent.SA.Vsa.MeasurementData"/> from a <see cref="T:Agilent.SA.Vsa.Trace"/> cannot be changed.
            </para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.StateDictionary.Keys">
            <summary>Gets a list of all the string keys in the collection.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.StateDictionary.Item(System.String)">
            <summary>Returns the value associated with the specified key.</summary>
            <param name="key">The key.</param>
            <returns>The value.</returns>
            <exception caption="" cref="T:System.Collections.Generic.KeyNotFoundException">A KeyNotFoundException will be thrown
            if the specified key is not in the collection.</exception>
            <remarks>
            Returns selected information about the MeasurementData. 
            The returned Value is an object and may be a boolean, short, integer, float, double, string, or an array of numbers. 
            For example, use this["TrcLedStr"] to get the trace indicator string (e.g. "CAL?") and use 
            this[TrcLedReason"] to get the reason behind the indicator (e.g. "Calibration data is unavailable.").
            The available MeasurementData information is the same information as the saved Trace Data Header information. 
            For more information and a list of the available trace data header variables, 
            see the "Data Header Variables" topic in the "Shared Data with Other Applications" book of the online help.
            </remarks>
        </member>
        <member name="T:Agilent.SA.Vsa.StatusBits">
            <summary>The measurement status bits.</summary>
            <remarks>You can query the state of each of these status bits from the <see cref="P:Agilent.SA.Vsa.Measurement.Status"/> property.</remarks>
        </member>
        <member name="F:Agilent.SA.Vsa.StatusBits.None">
            <summary>No status bits are set.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.StatusBits.MeasurementDone">
            <summary>Measurement is done.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.StatusBits.Calibrating">
            <summary>Calibration is in progress.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.StatusBits.Acquiring">
            <summary>The measurement is acquiring data</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.StatusBits.Settling">
            <summary>The measurement is acquiring the settle data (before the measurement data).</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.StatusBits.WaitPreTrigger">
            <summary>The measurement is acquiring pre-trigger data.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.StatusBits.WaitTrigger">
            <summary>The measurement is waiting for the trigger event.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.StatusBits.ReadingData">
            <summary>The measurement is reading the acquisition data from the hardware.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.StatusBits.Recording">
            <summary>The measurement is recording data.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.StatusBits.WaitReferenceLock">
            <summary>The measurement is waiting for a frequency reference lock.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.StatusBits.AverageComplete">
            <summary>The measurement average is complete.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.StatusBits.SyncNotFound">
            <summary>No sync is found by the (demodulation) measurement.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.StatusBits.PulseNotFound">
            <summary>No pulse is found by the (demodulation) measurement.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.StatusBits.CalibrationNeeded">
            <summary>Calibration is needed.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.StatusBits.CalibrationWarmUp">
            <summary>Instrument is warming up; frequent calibration may be needed.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.StatusBits.ExternalReferenceLock">
            <summary>The hardware is locked to the external reference.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.StatusBits.InternalReferenceLock">
            <summary>The hardware is locked to the internal reference.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.StatusBits.GapData">
            <summary>There is a gap between the last scan and the current scan of data.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.StatusBits.EndData">
            <summary>Recording playback reached the end of the recording data.  This only happens when <see cref="P:Agilent.SA.Vsa.Recording.IsPlayLoop">playback looping</see> is disabled.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.StatusBits.TestFail">
            <summary>A test (e.g. <see cref="T:Agilent.SA.Vsa.LimitTest"/>) has failed.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.StatusBits.Visible">
            <summary>The application window is visible</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.StatusBits.AdcOverload">
            <summary>The measurement hardware input channel has over-ranged.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.StatusBits.PositiveMeasurementCount">
            <summary>Not used.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.StatusBits.StaleData">
            <summary>Restarting measurement acquisition because the data is stale (too old).</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.StatusBits.Measuring">
            <summary>The measurement is not paused (i.e. it is running).</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.StatusBits.Ranging">
            <summary>A measurement autorange is in progress.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.Status">
            <summary>The Status class contains properties and events that expose the running state of the measurement.</summary>
            <remarks>
            	<para>The <see cref="T:Agilent.SA.Vsa.StatusBits"/> enumeration contains the status bits that may be set or cleared by the measurement when the measurement is running (or stopped).</para>
            	<para>The <see cref="P:Agilent.SA.Vsa.Status.Value"/> property returns the current status.</para>
            	<para>
            		<see cref="P:Agilent.SA.Vsa.Status.PositiveMask"/> and <see cref="P:Agilent.SA.Vsa.Status.NegativeMask"/> are applied to the status as it changes to produce the current values of <see cref="P:Agilent.SA.Vsa.Status.PositiveValue"/> and
            <see cref="P:Agilent.SA.Vsa.Status.NegativeValue"/>. The changes in these Positive/Negative-Values are added into <see cref="P:Agilent.SA.Vsa.Status.PositiveSummary"/> and <see cref="P:Agilent.SA.Vsa.Status.NegativeSummary"/>.</para>
            	<para>The PositiveSummary and NegativeSummary values are cleared when they are read. This means you can watch for transitions of status bits (see second part of
            example below).</para>
            	<para>You can also get events on changes in the Summary values by attaching an <see cref="T:Agilent.SA.Vsa.NotifyPropertyChangedWrapper">property change</see> event handler for this
            class and looking for changes in <see cref="P:Agilent.SA.Vsa.Status.PositiveValue"/>, <see cref="P:Agilent.SA.Vsa.Status.NegativeValue"/> and <see cref="P:Agilent.SA.Vsa.Status.MeasurementError"/>.</para>
            	<para>See the <see cref="!:DotNetApi-CsharpStatusBitsDemo">C# Status Bits Demo</see> for an example of how to query the status bits.</para>
            </remarks>
            <example>
            	<code title="Polling example" description="This example shows you how to poll the Measurement Status for two different types of events." lang="CS">
            Measurement measurement = app.Measurements.SelectedItem;
            measurement.Pause();
             
            // --- Simple polling loop: for bits that toggle when an operation is finished ---
            // Example: wait for the recording to finish
            measurement.Record();
            System.Diagnostics.Trace.WriteLine("Waiting for recording to finish...");
            bool isRecording = true;
            while(isRecording)
            {
                System.Threading.Thread.Sleep(10);
                isRecording = measurement.Status.Value.HasFlag(StatusBits.Recording);
            }
            System.Diagnostics.Trace.WriteLine("Recording finished.");
            app.Measurements.SelectedItem.Input.DataFrom = DataSource.Hardware;
                     
             
            // --- Polling with masks: for bits that have multiple transitions once the measurement starts ---
            // Example: wait until the measurement hardware has triggered and then continue with code execution
             
            // The WaitTrigger bit will transition to positive some time after the measurement is 
            // started.  Once the measurement hardware has triggered, the VSA's WaitTrigger status
            // bit will transition to negative.  We want to catch this negative edge.
            measurement.Status.NegativeMask = StatusBits.WaitTrigger; // set mask to watch for negative transition
             
            // read NegativeSummary once to clear it
            measurement.Status.NegativeSummary.HasFlag(StatusBits.None);
             
            measurement.Restart();
             
            bool triggerHappened = false;
            System.Diagnostics.Trace.WriteLine("Waiting for trigger...");
            while(!triggerHappened)
            {
                System.Threading.Thread.Sleep(10);
                StatusBits negSum = measurement.Status.NegativeSummary; // in case you want to test for multiple bits
                triggerHappened = negSum.HasFlag(StatusBits.WaitTrigger);
            }
            System.Diagnostics.Trace.WriteLine("Triggered.");</code>
            </example>
        </member>
        <member name="P:Agilent.SA.Vsa.Status.Value">
            <summary>Gets the current status events value.</summary>
            <remarks>
            	<para>Returns the current Value of all measurement status bits. Typically, you use the status Value to determine the following:</para>
            	<list type="bullet">
            		<item>Measurement is in progress</item>
            		<item>Calibration is in progress</item>
            		<item>Recording is in progress</item>
            	</list>
            	<para></para>
            	<para>The measurement, calibration, and recording status bits are not as dynamic as other status bits and are easily monitored by looking at the status Value.
            Other status bits may transition several times during a measurement and should be checked using status masks and status events instead of the status Value.</para>
            	<para>Note:<br/>
            There are internal, undocumented status bits that also affect the status Value. The internal status bits may be a one or zero. Therefore, make sure you mask
            the status Value to exclude all bits except those you are interested in (using boolean &amp;) or use the <code>Enum.HasFlag</code> method.</para>
            </remarks>
            <value>bitwise-OR of <see cref="T:Agilent.SA.Vsa.StatusBits"/></value>
            <example>
            	<code title="Example" description="" lang="CS">
            bool isRecording = app.Measurements.SelectedItem.Status.Value.HasFlag(StatusBits.Recording);</code>
            </example>
        </member>
        <member name="P:Agilent.SA.Vsa.Status.PositiveValue">
            <summary>Gets the last masked positive event that has occurred.</summary>
            <remarks>
            	<para>Each time PositiveValue changes (masked by <see cref="P:Agilent.SA.Vsa.Status.PositiveMask"/>), it is summed into <see cref="P:Agilent.SA.Vsa.Status.PositiveSummary"/>.</para>
            	<para>You can get events on changes in the PositiveValue by attaching an <see cref="T:Agilent.SA.Vsa.NotifyPropertyChangedWrapper">property change</see> event handler for the <see cref="P:Agilent.SA.Vsa.Measurement.Status"/>
            object and watch for changes in this property.</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Status.NegativeValue">
            <summary>Gets the last masked negative event that has occurred.</summary>
            <remarks>
            	<para>Each time NegativeValue changes (masked by <see cref="P:Agilent.SA.Vsa.Status.NegativeMask"/>), it is summed into <see cref="P:Agilent.SA.Vsa.Status.NegativeSummary"/>.</para>
            	<para>You can get events on changes in the NegativeValue by attaching an <see cref="T:Agilent.SA.Vsa.NotifyPropertyChangedWrapper">property change</see> event handler for the <see cref="P:Agilent.SA.Vsa.Measurement.Status"/>
            object and then look for changes in this property.</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Status.PositiveSummary">
            <summary>Gets the sum of all <see cref="P:Agilent.SA.Vsa.Status.PositiveMask">masked positive events</see> that have occurred since the last time this property was read.</summary>
            <remarks>
            	<para>Reading the PositiveSummary property returns a value that corresponds to the summation of all the status bits in the <see cref="P:Agilent.SA.Vsa.Status.PositiveMask"/> property that
            transitioned from negative to positive since PositiveSummary was last read.</para>
            	<para>Reading the PositiveSummary property clears it as well so make sure you read it into a local variable if you want to test for multiple status bits.</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Status.NegativeSummary">
            <summary>Gets the sum of all <see cref="P:Agilent.SA.Vsa.Status.NegativeMask">masked negative events</see> that have occurred since the last time this property was read.</summary>
            <remarks>
            	<para>Reading the NegativeSummary property returns a value that corresponds to the summation of all the status bits in the <see cref="P:Agilent.SA.Vsa.Status.NegativeMask"/> property that
            transitioned from positive to negative since NegativeSummary was last read.</para>
            	<para>Reading the NegativeSummary property clears it as well so make sure you read it into a local variable if you want to test for multiple status bits.</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Status.PositiveMask">
            <summary>Gets or sets the status bits to include in PositiveValue when bit is set.</summary>
            <remarks>
            	<para>Whenever a bit in the PositiveMask property transitions from unset to set, the bit is added to the <see cref="P:Agilent.SA.Vsa.Status.PositiveSummary"/> property.</para>
            	<para>You can watch for this transition by polling the PositiveSummary property, or you can register for a property change event on the PositiveSummary property
            (subscribing to a <see cref="T:Agilent.SA.Vsa.NotifyPropertyChangedWrapper">property change</see> event handler for the <see cref="T:Agilent.SA.Vsa.Status">Measurement.Status</see> object and watching for <see cref="P:Agilent.SA.Vsa.Status.PositiveValue"/> to
            change).</para>
            	<para>For an example, see the description of the <see cref="T:Agilent.SA.Vsa.Status"/> class itself.</para>
            </remarks>
            <value>a bitwise-OR of <see cref="T:Agilent.SA.Vsa.StatusBits"/> enumeration values</value>
        </member>
        <member name="P:Agilent.SA.Vsa.Status.NegativeMask">
            <summary>Gets or sets the status bits to include in NegativeValue when bit is cleared.</summary>
            <remarks>
            	<para>Whenever a bit in the NegativeMask property transitions from set to unset, the bit is added to the <see cref="P:Agilent.SA.Vsa.Status.NegativeSummary"/> property.</para>
            	<para>You can watch for this transition by polling the NegativeSummary property, or you can register for a property change event on the NegativeSummary property
            (subscribing to a <see cref="T:Agilent.SA.Vsa.NotifyPropertyChangedWrapper">property change</see> event handler for the <see cref="T:Agilent.SA.Vsa.Status">Measurement.Status</see> object and watching for <see cref="P:Agilent.SA.Vsa.Status.NegativeValue"/> to
            change).</para>
            	<para>For an example, see the description of the <see cref="T:Agilent.SA.Vsa.Status"/> class itself.</para>
            </remarks>
            <value>a bitwise-OR of <see cref="T:Agilent.SA.Vsa.StatusBits"/> enumeration values</value>
        </member>
        <member name="P:Agilent.SA.Vsa.Status.MeasurementError">
            <summary>Gets the last measurement error that has occurred and clears the error.</summary>
            <remarks>
            	<para>If no error has occurred, then the string is empty.</para>
            	<para>You can get events on changes in the MeasurementError by subscribing to a <see cref="T:Agilent.SA.Vsa.NotifyPropertyChangedWrapper">property changeNotifyPropertyChangedWrapper</see> event handler for the
            Measurement's Status object and watch for changes in the MeasurementError property.</para>
            </remarks>
        </member>
        <member name="T:Agilent.SA.Vsa.Time">
            <summary>The Time object contains members for controlling time-related measurement features.</summary>
            <remarks>The Time object represents the frequency settings of the measurement, including time length, gating, overlap, etc.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Time.Channels">
            <summary>
            Gets the collection of <see cref="T:Agilent.SA.Vsa.TimeChannel"/> objects representing the per-channel time
            settings.
            </summary>
            <remarks>With the <see cref="T:Agilent.SA.Vsa.TimeChannel"/> objects in this collection, you can set certain Time properties separately per measurement channel.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Time.GateDelay">
            <summary>
            Gets or sets the time gate delay for all channels, in seconds.
            </summary>
            <remarks>
            	<para>This value is the delay from the beginning of the main time record to the start of the time gate.</para>
            	<para>Note that for multi-channel hardware, the gate delay can be set independently for each channel or all channels can be set to the same value. To set the gate
            delay for an individual channel, use the <see cref="P:Agilent.SA.Vsa.TimeChannel.GateDelay">TimeChannel.GateDelay</see> property on the appropriate channel. Individual channel settings are
            available via the <see cref="P:Agilent.SA.Vsa.Time.Channels"/> collection. To set the gate delay for all channels to the same value, set the GateDelay property on this object all the channels
            will be set to the same GateDelay.</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Time.GateLength">
            <summary>
            Gets or sets the time gate length, in seconds.
            </summary>
            <remarks>For each channel, the sum of the <see cref="P:Agilent.SA.Vsa.Time.GateDelay"/> plus the GateLength must be less than or equal to the main time <see cref="P:Agilent.SA.Vsa.Time.Length"/> property.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Time.IsGate">
            <summary>
            Gets or sets a value indicating whether time gating is enabled.
            </summary>
            <remarks>Time gating is only available in Vector and Analog Demod measurement types.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Time.IsResolutionAuto">
            <summary>
            Gets or sets a value indicating whether the span is adjusted to achieve specified main time length.
            </summary>
            <remarks>
            	<para>Instead of setting IsResolutionAuto to True, you can set <see cref="P:Agilent.SA.Vsa.Frequency.IsPointsAuto">Frequency.IsPointsAuto</see> to True. This will allow more freedom in setting
            the <see cref="P:Agilent.SA.Vsa.Time.Length"/> or <see cref="P:Agilent.SA.Vsa.Frequency.ResBW"/> by allowing the number of points in the FFT to change as you change these parameters.</para>
            	<para>This property is ignored except in Vector and Analog Demod measurement types.</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Time.Length">
            <summary>
            Gets or sets the main time length, in seconds.
            </summary>
            <remarks>
            	<para>If <see cref="P:Agilent.SA.Vsa.Time.IsResolutionAuto"/> is true, then the <see cref="P:Agilent.SA.Vsa.Frequency.Span"/> is adjusted to achieve the specified main time length (shown in Main Time trace in Vector mode). If
            <see cref="P:Agilent.SA.Vsa.Time.IsResolutionAuto"/> is false, then the resolution bandwidth (<see cref="P:Agilent.SA.Vsa.Frequency.ResBW"/>) is modified to achieve the main time length.</para>
            	<para dir="ltr">Note: most demodulation measurements set the time length automatically, usually based on a parameter called "Result Length" or "Search Length."</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Time.Overlap">
            <summary>
            Gets or sets the maximum amount of overlap processing when averaging is off, in percent.
            </summary>
            <remarks>
            	<para>The VSA lets you specify separate overlaps for averaged and non-averaged measurements. If averaging is off, the VSA uses the value of Overlap to determine
            the maximum potential overlap.</para>
            	<para>Overlap processing can dramatically reduce the time needed to compute RMS averages with a given variance. Overlap processing lets you overlap time records.
            In other words, some data from the first time record is re-used in the second time record, some data from the second time record is re-used in the third time
            record, and so forth.</para>
            	<para>Note that when using real hardware (instead of recordings), this real-time operation requires that the VSA processing time is shorter than the time record
            length captured from the instrument and that the hardware supports continuous time capture (currently only VXI).</para>
            </remarks>
            <seealso cref="P:Agilent.SA.Vsa.Time.OverlapAverage"></seealso>
        </member>
        <member name="P:Agilent.SA.Vsa.Time.OverlapAverage">
            <summary>Gets or sets the maximum amount of overlap processing when averaging is on, in percent.</summary>
            <remarks>
            	<para>The VSA lets you specify separate overlaps for averaged and non-averaged measurements. If averaging is on, the VSA uses the value of OverlapAverage to
            determine the maximum potential overlap.</para>
            	<para>Overlap processing can dramatically reduce the time needed to compute RMS averages with a given variance. Overlap processing lets you overlap time records.
            In other words, some data from the first time record is reused in the second time record, some data from the second time record is reused in the third time
            record, and so forth.</para>
            </remarks>
            <seealso cref="P:Agilent.SA.Vsa.Time.Overlap"></seealso>
        </member>
        <member name="P:Agilent.SA.Vsa.Time.Points">
            <summary>
            Gets or sets the number of main time points.
            </summary>
            <remarks>This property determines the number of main time points of data to acquire for each measurement scan. This is an alternate way of specifying the
            <see cref="P:Agilent.SA.Vsa.Frequency.Points">Frequency.Points</see> length and is equal to:
            <blockquote style="MARGIN-RIGHT: 0px" dir="ltr"><para>Time.Points = (Frequency.Points - 1) * 1.28</para></blockquote><para dir="ltr">Note: most demodulation measurements set the number of time/frequency points automatically, usually based on a parameter called "Result Length" or "Search
            Length."</para></remarks>
        </member>
        <member name="T:Agilent.SA.Vsa.PlaybackTrigger">
            <summary>
            Represents playback triggering of the measurement (when using a recording).
            </summary>
            <remarks>
            <para>
            This class may provide trigger capabilities in addition to the base class <see cref="T:Agilent.SA.Vsa.Trigger"/> capabilities.
            It is used with recordings whereas the <see cref="T:Agilent.SA.Vsa.InputTrigger"/> class is used with hardware.
            </para>
            </remarks>
        </member>
        <member name="T:Agilent.SA.Vsa.Trigger">
            <summary>
            Represents triggering of the measurement.
            </summary>
            <remarks>
            <para>The Trigger object represents the measurement triggering functionality. Only one input channel can control 
            triggering of the measurement. You can set the trigger level, hold off, delay, slope and the style of trigger. If the trigger style is free run, 
            then all the other property values are ignored. There are two trigger objects, one for the hardware 
            (<see cref="P:Agilent.SA.Vsa.Input.Trigger"/>) and one for the recording playback (<see cref="P:Agilent.SA.Vsa.Recording.Trigger"/>).
            </para>
            <para>Both the <see cref="T:Agilent.SA.Vsa.InputTrigger"/> and <see cref="T:Agilent.SA.Vsa.PlaybackTrigger"/> classes derive from this class.
            Therefore this base class may be used to control both the input and playback triggering for trigger functionality
            that is on this class in a polymorphic way.</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trigger.HoldoffStyle">
            <summary>
            Gets or sets the trigger holdoff style.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Trigger.Holdoff">
            <summary>
            Gets or sets the trigger holdoff in seconds.
            </summary>
            <remarks>
            <para>
            Determine the length of the trigger holdoff, in seconds.  The holdoff is the length
            of time that the trigger condition must not be satisfied before accepting a trigger. For
            a positive trigger slope, it is the length of time that the input signal amplitude must be
            less than the trigger level before a valid trigger can occur.  A larger trigger holdoff
            makes the trigger less susceptible to a momentary signal glitch.
            </para>
            </remarks>
            <seealso cref="P:Agilent.SA.Vsa.Trigger.HoldoffStyle"/>
        </member>
        <member name="P:Agilent.SA.Vsa.Trigger.Level">
            <summary>
            Gets or sets the trigger level in volts for the specified input channel.
            </summary>
            <remarks>
            <para>
            The maximum input trigger level is dependant upon hardware and range and may be changed when 
            the input range changes.
            </para>
            <para>
            This property is only used if the <see cref="P:Agilent.SA.Vsa.Trigger.Style">trigger style</see> is set to Level.
            </para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trigger.MagnitudeLevel">
            <summary>
            Gets or sets the magnitude trigger level for the specified input channel.
            </summary>
            <remarks>
            <para>
            This applies to both the Input and Recording trigger objects. For the InputChannel, 
            this is the magnitude at the IF. The maximum input trigger level is dependant upon the 
            input range (<see cref="P:Agilent.SA.Vsa.Analog.Range"/>) and may be changed when the input range changes.
            </para>
            <para>
            This property is only used if the <see cref="P:Agilent.SA.Vsa.Trigger.Style">trigger style</see> is set to MagnitudeLevel.
            </para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trigger.Slope">
            <summary>
            Gets or sets the trigger slope.
            </summary>
            <remarks>
            Determine the current trigger slope; either a positive transition from below the 
            trigger level to above it, or a negative transition from above the trigger level 
            to below it. The trigger slope is not used for the free run trigger type.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trigger.Channel">
            <summary>
            Gets or sets the input channel that is triggered (by specifying the index of the channel).
            </summary>
            <remarks>
            The Channel property determines the input channel (by index) that controls the measurement trigger. 
            The first channel corresponds to an index value of 0, where the index is the index of a channel
            in the <see cref="P:Agilent.SA.Vsa.Analog.Channels"/> collection. The trigger channel is irrelevant if the trigger 
            style is free run.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trigger.Style">
            <summary>
            Gets or sets the trigger style.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Trigger.Delay">
            <summary>
            Gets or sets the trigger delay in seconds.
            </summary>
            <remarks>A negative value is pre-trigger.  A positive value is post trigger.</remarks>
        </member>
        <member name="T:Agilent.SA.Vsa.InputTrigger">
            <summary>
            Represents input triggering of the measurement (when using hardware).
            </summary>
            <remarks>
            <para>
            This class provides trigger capabilities in addition to the base class <see cref="T:Agilent.SA.Vsa.Trigger"/> capabilities.
            It is used with hardware whereas the <see cref="T:Agilent.SA.Vsa.PlaybackTrigger"/> class is used for playback.
            </para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.InputTrigger.ExternalLevel">
            <summary>
            Gets or sets the external trigger level in volts.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.InputTrigger.PeriodicSyncDelay">
            <summary>
            Gets or sets the offset between the sync trigger and the periodic trigger.
            </summary>
            <remarks>
            Periodic ITrigger  is described in the PSA Setup help.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.InputTrigger.PeriodicPeriod">
            <summary>
            Gets or sets the period of the periodic trigger (in seconds).
            </summary>
            <remarks>
            Periodic is available only with PSA option 122 measurement hardware.  For
            information on this trigger type, see the PSA Setup help topic.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.InputTrigger.PeriodicSyncSource">
            <summary>
            Gets or sets the source of the periodic sync trigger.
            </summary>
            <remarks>
            Periodic ITrigger  is described under  in the PSA Setup help.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.InputTrigger.FrequencyMask">
            <summary>
            Gets the <see cref="T:Agilent.SA.Vsa.FrequencyMaskTrigger"/> object for trigger.
            </summary>
            <version>17.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.InputTrigger.RFBurstLevel">
            <summary>
            Gets or sets the trigger level in dBm for the RF Burst trigger
            </summary>
            <version>18.50</version>
        </member>
        <member name="T:Agilent.SA.VsaImplementation.RestoreAttribute">
            <summary>
            The RestoreAttribute class is used to mark classes or properties that need to be
            restored after recalling a setup from file, or after a preset.
            </summary>
            <remarks>
            <para>
            During a restore, all writable public properties are initialized by assigning the property
            to its current value (i.e. Property = Property;). While this may seem silly, it gives
            everyone a chance to apply any required limiting operations.
            </para>
            <para>
            During a restore, all read-only public properties, if their type derives from RemotableObject,
            are told to Restore(). This way the Restore operation cascades down the object model.
            </para>
            <para>
            When applied to a class, RestoreAttribute indicates that all the public properties in
            the class require a restore. If desired, individual properties can be excluded from
            restoration by marking them with SuppressRestoreAttribute. The optional restore order
            is ignored in this context. The order in which the properties are restored is undefined.
            </para>
            <para>
            When applied to a property, RestoreAttribute indicates that the marked property requires
            a restore. Optionally, the restore order can be specified by supplying a numeric order
            to the attribute. Individually marked properties are sorted using a simple numeric
            sort when determining the order in which restoration is performed. Large negative
            numbers precede smaller negative numbers and are followed by increasingly large positive
            numbers. The restoration order for identically numbered properties is indeterminate.
            </para>
            <para>
            If both the class and individual properties are marked with RestoreAttribute, all
            individually marked properties are restored first, in the indicated order, followed
            by all remaining public properties that are not excluded using SuppressRestoreAttribute.
            The restoration order of the unmarked properties is undefined.
            </para>
            <para>
            If both RestoreAttribute and SuppressRestoreAttribute are applied to the same property,
            the property is not restored.
            </para>
            </remarks>
        </member>
        <member name="M:Agilent.SA.VsaImplementation.RestoreAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.VsaImplementation.RestoreAttribute"/> class.
            </summary>
        </member>
        <member name="M:Agilent.SA.VsaImplementation.RestoreAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.VsaImplementation.RestoreAttribute"/> class.
            </summary>
            <param name="restoreOrder">The order in which the property should be restored.</param>
        </member>
        <member name="P:Agilent.SA.VsaImplementation.RestoreAttribute.RestoreOrder">
            <summary>
            Gets a value that indicates what order the decorated property should be called during restore relative to other properties.
            </summary>
        </member>
        <member name="T:Agilent.SA.VsaImplementation.SuppressRestoreAttribute">
            <summary>
            This class allows the restoration of individual properties to be suppressed in the case
            where an entire class is marked with the RestoreAttribute class. See the comments for 
            RestoreAttribute class for a more detailed description.
            </summary>
        </member>
        <member name="M:Agilent.SA.VsaImplementation.SuppressRestoreAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.VsaImplementation.SuppressRestoreAttribute"/> class.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.TriggerHoldoffStyle">
            <summary>
            Specifies the trigger holdoff style.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TriggerHoldoffStyle.Conventional">
            <summary>
            Specifies the conventional holdoff style which is the length of time after a trigger before the next trigger can occur 
            regardless of the trigger level set.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TriggerHoldoffStyle.BelowLevel">
            <summary>
            Specifies the below level holdoff style which is an amount of time that the analyzer's input signal must be a stable 
            low value (below trigger level) before the next trigger can occur.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TriggerHoldoffStyle.AboveLevel">
            <summary>
            Specifies the above level holdoff style which is an amount of time that the analyzer's input signal must be a stable 
            high value (above trigger level) before the next trigger can occur.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.TriggerStyle">
            <summary>
            Specifies the trigger style.
            </summary>
            Note:  Make sure the order and integer value of these trigger enums match the COM VsaTrigType enum
        </member>
        <member name="F:Agilent.SA.Vsa.TriggerStyle.Auto">
            <summary>
            Specifies the Free run trigger. The analyzer will process time records as quickly as possible.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TriggerStyle.Level">
            <summary>
            Specifies the Channel level trigger.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TriggerStyle.MagnitudeLevel">
            <summary>
            Specifies the IF Mag, Magnitude, or Channel Mag trigger which selects the specified IF signal as the trigger signal.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TriggerStyle.External">
            <summary>
            Specifies the External trigger #1.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TriggerStyle.ExternalTtl">
            <summary>
            Specifies the External TTL trigger.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TriggerStyle.Periodic">
            <summary>
            This is only available with PSA Option 122 or 140 measurement hardware. Specifies that triggering will occur at regularly spaced intervals.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TriggerStyle.FrequencyMask">
            <summary>
            Specifies the Frequency Mask trigger.
            </summary>
            <version>17.00</version>
        </member>
        <member name="F:Agilent.SA.Vsa.TriggerStyle.RFBurst">
            <summary>
            Specifies the RF Burst trigger.
            </summary>
            <version>18.50</version>
        </member>
        <member name="F:Agilent.SA.Vsa.TriggerStyle.Pxi">
            <summary>
            Specifies that a PXI backplane trigger line be used.
            </summary>
            <version>18.50</version>
        </member>
        <member name="F:Agilent.SA.Vsa.TriggerStyle.External2">
            <summary>
            Specifies external trigger #2.
            </summary>
            <version>18.50</version>
        </member>
        <member name="T:Agilent.SA.Vsa.TriggerSlope">
            <summary>
            Specifies the trigger slope.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TriggerSlope.Negative">
            <summary>
            Specifies a negative slope.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TriggerSlope.Positive">
            <summary>
            Specifies a positive slope.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.TriggerPeriodicSyncSource">
            <summary>
            Specifies the periodic trigger sync source (how first measurement is triggered).
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TriggerPeriodicSyncSource.FreeRun">
            <summary>
            Specifies measurement starts immediately.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TriggerPeriodicSyncSource.External">
            <summary>
            Specifies measurement waits for signal from external trigger.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.FrequencyChannelCollection">
            <summary>
            This collection contains the set of <see cref="T:Agilent.SA.Vsa.FrequencyChannel"/> objects representing the
            frequency settings for each logical input channel.
            </summary>
        </member>
        <member name="T:Agilent.SA.VsaImplementation.Extensions">
            <summary>
            Implements helper extension methods.
            </summary>
        </member>
        <member name="M:Agilent.SA.VsaImplementation.Extensions.GetPublicInterfaceType(System.Type)">
            <summary>
            A helper method for the PublicInterfaceType extension method. This method
            traverses up the inheritance hierarchy looking for a public, abstract type that is
            marked with the <see cref="T:Agilent.SA.VsaImplementation.PublicInterfaceProviderAttribute"/>, or resides in
            the Agilent.SA.Vsa namespace (for historical reasons). Such a type is defined to be
            the public interface for the original implementation class.
            </summary>
            <param name="type">The type being tested to see if it is a "public"
            interface.</param>
            <returns>The first type encountered that is public (in the .NET sense), abstract
            as well as either being marked with the <see cref="T:Agilent.SA.VsaImplementation.PublicInterfaceProviderAttribute"/>
            or residing in the public Agilent.SA.Vsa namespace. This method
            returns null if no "public" interface is found before encountering the
            RemotableObject type in the hierarchy.</returns>
        </member>
        <member name="M:Agilent.SA.VsaImplementation.Extensions.PublicInterfaceType(System.Type)">
            <summary>
            Returns the public interface type of the supplied type, if any. The public type
            is the first public base type that resides in the Agilent.SA.Vsa namespace.
            </summary>
            <param name="type">The type to be tested.</param>
            <returns>The public base type, or null if there is none.</returns>
            <version>14.00</version>
        </member>
        <member name="M:Agilent.SA.VsaImplementation.Extensions.PublicInterfaceType(Agilent.SA.Vsa.RemotableObject)">
            <summary>
            Returns the public interface type for the supplied object. This type is the
            type of the first public base type of the supplied object that resides in the
            Agilent.SA.Vsa namespace.
            </summary>
            <param name="implementation">A concrete object that derives from RemotableObject.</param>
            <returns>The public type.</returns>
        </member>
        <member name="M:Agilent.SA.VsaImplementation.Extensions.NotifyPropertyChanged``1(Agilent.SA.Vsa.RemotableObject,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Allows the caller to force an object to emit a PropertyChanged event for the
            indicated property reference.
            </summary>
            <typeparam name="T">The inferred type of the property. This does not need to be
            specified by the caller.</typeparam>
            <param name="obj">The object for which the PropertyChanged event is to be generated.</param>
            <param name="propertyReference">A reference to the property for which the PropertyChanged
            event is to be generated. It takes the form "() => PropertyName".</param>
        </member>
        <member name="P:Agilent.SA.VsaInternal.IChangeGroup2.IsEmbedded">
            <summary>
            Returns true if this change group is embedded inside of another change group
            </summary>
        </member>
        <member name="T:Agilent.SA.VsaInternal.IMeasurementChangeGroup">
            <summary>
            An interface that can be implemented on a measurement controller to control which traces require an update
            </summary>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IMeasurementChangeGroup.ChangeTraceMeasurementPending(System.Int32,System.Collections.ObjectModel.ReadOnlyCollection{System.Int32})">
            <summary>
            Sets the index of a trace that requires an update for the specified measurements.
            </summary>
            <param name="traceIndex">Index of the trace that requires an update.</param>
            <param name="measurementIndexes">Indexes of the measurements that this change applies to.</param>
        </member>
        <member name="P:Agilent.SA.VsaInternal.IMeasurementChangeGroup.ChangeOneTracePending">
            <summary>
            Sets the index of a trace that requires an update.  Applies to all measurements.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.HardwareGroupType">
            <summary>
            Types of HardwareGroups supported
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.HardwareGroupType.Analyzer">
            <summary>
            Hardware that provides input data to the application.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.HardwareGroupType.Source">
            <summary>
            Hardware that the application sends data to.
            </summary>
            <para>Note:  Not currently supported.</para>
        </member>
        <member name="T:Agilent.SA.Vsa.HardwareGroup">
            <summary>
            Class for containing information about a hardware group
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.HardwareGroup.Instruments">
            <summary>
            Gets a collection of the instruments in the group.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.HardwareGroup.GroupType">
            <summary>
            Gets the type of the group (source or analyzer)
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.HardwareGroup.Name">
            <summary>
            Gets the name of the group
            </summary>
            <remarks>This is for display purposes only.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.HardwareGroup.UserInput">
            <summary>
            Gets a reference to the interface for a data source application to send data into the analyzer. 
            </summary>
            <remarks>
            <para>
            This interface is intended to support data source applications and allow them to 
            provide time series data to the vector signal analyzer. The data source applications 
            are not actively controlled by the vector signal analyzer. 
            </para>
            <para>Direct access to this interface requires a license for option 101.</para>
            </remarks>
        </member>
        <member name="T:Agilent.SA.Vsa.HardwareGroupCollection">
            <summary>
            Class for holding a set of instrument groups for a HardwareConfiguration
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.HardwareGroupCollection.Create(System.String)">
            <summary>
            Creates a new HardwareGroup based on the address of an Adc instrument and adds it
            to the collection
            </summary>
            <param name="adcAddress">A string designating the VISA address of the Adc instrument.</param>
            <returns>A reference to the new HardwareGroup</returns>
            <remarks>
            <para>
            This method is a shortcut to creating a new HardwareGroup for a configuration if the
            group only consists of an Adc instrument.
            </para>
            <para>
            <strong>Note:</strong>  <see cref="M:Agilent.SA.Vsa.HardwareGroupCollection.ApplyChanges"/> must be called after you are done changing the groups in the configuration.  
            </para>
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.HardwareGroupCollection.Create(Agilent.SA.Vsa.InstrumentId[])">
            <summary>
            Creates a new HardwareGroup based on a set of InstrumentId's and adds it to the 
            collection.
            </summary>
            <remarks>
            <strong>Note:</strong>  <see cref="M:Agilent.SA.Vsa.HardwareGroupCollection.ApplyChanges"/> must be called after you are done changing the groups in the configuration.  
            </remarks>
            <param name="instrumentIds">List of InstrumentId references that make up the new group.</param>
            <returns>A reference to the new HardwareGroup.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.HardwareGroupCollection.Clear">
            <summary>
            Clears the collection of previous HardwareGroup items.
            </summary>
            <para>
            <strong>Note:</strong>  <see cref="M:Agilent.SA.Vsa.HardwareGroupCollection.ApplyChanges"/> must be called after you are done changing the groups in the configuration.  
            </para>
        </member>
        <member name="M:Agilent.SA.Vsa.HardwareGroupCollection.ApplyChanges">
            <summary>
            Indicate that hardware has changed.
            </summary>
            <remarks>This syncs the hardware configuration with the collection of instrument groups and 
            presets the hardware configuration (equivalent of creating a new hardware configuration). 
            This must be called if the Create, Clear, or Remove functions are used.
            </remarks>
        </member>
        <member name="T:Agilent.SA.Vsa.License">
            <summary>
            The License class represents the status of one license option.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.License.Key">
            <summary>Gets a unique identifier for this license.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.License.Code">
            <summary>Gets a 3 character code that identifies this license.</summary>
            <remarks>
            The option code is the same as it appears in the License Options dialog box.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.License.Description">
            <summary>Gets a description of this license.</summary>
            <remarks>
            The description is the same as it appears in the License Options dialog box.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.License.Version">
            <summary>Gets the version of the license.</summary>
            <remarks>
            The main software license is a date-based version (inf YYYY.MMDD format).
            All other options are version 1.0.  
            If this is not a valid license, then the version is an empty string.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.License.Server">
            <summary>Gets the computer hostname that contains this license.</summary>
            <remarks>
            Only floating licenses use the Server field.
            If this is a node-locked license or not a valid license, then
            server is an empty string.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.License.Expiration">
            <summary>Gets the expiration date of this license.</summary>
            <remarks>
            if this is a permanent license, then the expiration is DateTime.MaxValue.
            If this is not a valid license, then the expiration is DateTime.MinValue.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.License.IsValid">
            <summary>Gets a value indicating whether this is a valid license.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.License.Enabled">
            <summary>Gets a value indicating whether this license is enabled.</summary>
            <remarks>
            If this license is not enabled, then it cannot be valid.
            </remarks>
            <version>15.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.License.IsRestricted">
            <summary>Gets a value indicating whether this license is restricted.</summary>
            <remarks>
            If this license is restricted, then it might have less functionality than an unrestricted license.
            </remarks>
            <version>15.01</version>
        </member>
        <member name="T:Agilent.SA.Vsa.LicenseFeatureException">
            <summary>
            The following class is a custom exception thrown by licensing when a feature is not licensed.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.LicenseFeatureException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.LicenseFeatureException"/> class.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.LicenseFeatureException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.LicenseFeatureException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.LicenseFeatureException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.LicenseFeatureException"/> class.
            </summary>
            <param name="feature">The feature.</param>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.LicenseFeatureException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.LicenseFeatureException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="inner">An inner exception.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.LicenseFeatureException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.LicenseFeatureException"/> class.
            </summary>
            <param name="feature">The feature.</param>
            <param name="message">The exception message.</param>
            <param name="inner">An inner exception.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.LicenseFeatureException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a SerializationInfo object with the data needed to serialize the object.
            </summary>
            <param name="info">The serialization storage object.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="P:Agilent.SA.Vsa.LicenseFeatureException.Feature">
            <summary>
            Gets the feature.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.LicenseCollection">
            <summary>The LicenseCollection class contains a collection of <see cref="T:Agilent.SA.Vsa.License"/> objects.</summary>
            <remarks>
            The collection contains all the licenses available to the application.
            The valid licenses have <see cref="P:Agilent.SA.Vsa.License.IsValid"/> set to true.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.LicenseCollection.IsLicensed(System.String)">
            <summary>Returns whether the passed option is licensed.</summary>
            <param name="key">The <see cref="P:Agilent.SA.Vsa.License.Key"/> or <see cref="P:Agilent.SA.Vsa.License.Code"/> of the license to check.</param>
            <returns>Returns true if the option is licensed.</returns>
        </member>
        <member name="P:Agilent.SA.Vsa.LicenseCollection.Item(System.String)">
            <summary>Returns the named license from the collection.</summary>
            <param name="key">The <see cref="P:Agilent.SA.Vsa.License.Key"/> or <see cref="P:Agilent.SA.Vsa.License.Code"/> of the license to retrieve.</param>
            <returns>The named license, or null if no license of the supplied name exists.</returns>
        </member>
        <member name="P:Agilent.SA.Vsa.LicenseCollection.SoftwareKey">
            <summary>Gets the <see cref="P:Agilent.SA.Vsa.License.Key"/> of the license that is the main software option.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.LicenseCollection.MinimumVersion">
            <summary>Gets the minimum date-based version of the main software license.</summary>
            <remarks>
            The main software license is a date-based version (inf YYYY.MMDD format).
            </remarks>
            <version>14.00</version>
        </member>
        <member name="T:Agilent.SA.Vsa.LimitLineDisplay">
            <summary>Specifies what is to be displayed.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.LimitLineDisplay.Limit">
            <summary>Specifies a limit to be displayed.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.LimitLineDisplay.Margin">
            <summary>Specifies a margin to be displayed.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.LimitLineDisplay.Both">
            <summary>Specifies both a limit and a margin to be displayed.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.LimitLineDraw">
            <summary>Specifies whether the limit is one continuous line or a set of connected dots.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.LimitLineDraw.OneLine">
            <summary>Specifies one continuous line.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.LimitLineDraw.ConnectedPoints">
            <summary>Specifies set of connected dots.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.LimitLineTraceFail">
            <summary>Specifies the trace color for failed limit line regions.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.LimitLineTraceFail.InTraceColor">
            <summary>Draw the failure region in the trace color.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.LimitLineTraceFail.InFailColor">
            <summary>>Draw the failure region in the limit line fail color.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.LimitLineXReference">
            <summary>Specifies limit line points X reference.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.LimitLineXReference.Absolute">
            <summary>Absolute X value for limit line points.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.LimitLineXReference.Relative">
            <summary>Relative (to Center or Start) X value for limit line points.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.LimitLineYReference">
            <summary>Specifies limit line points Y reference.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.LimitLineYReference.Absolute">
            <summary>Absolute Y value for limit line points.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.LimitLineYReference.Relative">
            <summary>Relative to Reference Level Y value for limit line points.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.LimitLineYReference.User">
            <summary>Relative to User Reference Y value for limit line points.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.LimitLineYReference.Trace">
            <summary>Relative to Trace Reference Y value for limit line points.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.LimitLineYSide">
            <summary>Specifies an upper limit or a lower limit.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.LimitLineYSide.Upper">
            <summary>Upper limit.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.LimitLineYSide.Lower">
            <summary>Lower limit.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.LimitLineYUnit">
            <summary>Specifies Y axis units for limit line points.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.LimitLineYUnit.Auto">
            <summary>unit depends upon <see cref="T:Agilent.SA.Vsa.LimitLineXDomain"/>.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.LimitLineYUnit.Peak">
            <summary>Peak units.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.LimitLineYUnit.Rms">
            <summary>RMS units.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.LimitLineYUnit.Power">
            <summary>Power units.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.LimitLineYUnit.MilliRms">
            <summary>mRMS units.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.LimitLineYFormat">
            <summary>Specifies Y format.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.LimitLineYFormat.Linear">
            <summary>Linear (magnitude) format.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.LimitLineYFormat.Log">
            <summary>Log (dB) format.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.LimitLineXDomain">
            <summary>Specifies X domain.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.LimitLineXDomain.Time">
            <summary>Time domain.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.LimitLineXDomain.Frequency">
            <summary>Frequency domain.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.LimitLine">
            <summary>
            The LimitLine class represents one limit line contained in a limit test. 
            </summary>
            <remarks>
            There are methods to control limit line settings and contain the limit line points.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.LimitLine.AddPoint(System.Double,System.Double,System.Boolean)">
            <summary>Add a single point (X, Y, and Connect) to the limit line.</summary>
            <param name="x">X point value.</param>
            <param name="y">Y point value.</param>
            <param name="isConnect">Whether the point is connected or not.</param>
            <returns>The index of the new point.</returns>
            <remarks>
            The single point is inserted into the limit line in ascending X-value order. 
            This point is inserted after any existing point with the same X value. 
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.LimitLine.AddPoints(System.Double[],System.Double[],System.Boolean[])">
            <summary>Add multiple points (X, Y, and Connect arrays) to the limit line.</summary>
            <param name="x">X points.</param>
            <param name="y">Y points.</param>
            <param name="isConnect">Connect points.</param>
            <remarks>
            The points are inserted into the limit line in ascending X-value order. 
            Any new points are inserted after any existing points with the same X values. 
            The x, y, and isConnect arrays must all be the same size. 
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.LimitLine.SetPoint(System.Int32,System.Double,System.Double,System.Boolean)">
            <summary>Set a single new point (X, Y, and Connect) for the limit line and does not affect any other points.</summary>
            <param name="index">Index for the point of interest.</param>
            <param name="x">X point value</param>
            <param name="y">Y point value</param>
            <param name="isConnect">Whether the point is connected or not.</param>
            <returns>The index of the resultant point.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.LimitLine.SetPoints(System.Double[],System.Double[],System.Boolean[])">
            <summary>Set multiple points (X, Y, and Connect arrays) for the limit line (removing all previous points). </summary>
            <param name="x">X points.</param>
            <param name="y">Y points.</param>
            <param name="isConnect">Connect points.</param>
            <remarks>
            The x, y, and isConnect arrays must all be the same size. 
            If the X-values in the x array are not in ascending order, then the X-, Y- and Connect-arrays 
            are sorted before being added to the limit line. 
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.LimitLine.RemovePoint(System.Int32)">
            <summary>Remove the passed point from the limit line.</summary>
            <param name="index">Index for the point to be removed.</param>
            <remarks>
            The first point is at index 0. 
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.LimitLine.RemoveAllPoints">
            <summary>Remove all points in the limit line.</summary>
        </member>
        <member name="M:Agilent.SA.Vsa.LimitLine.RecallFile(System.String)">
            <summary>Load the limit line with values from the saved limit line file.</summary>
            <param name="fileName">The limit line file name.</param>
            <remarks>
            This will remove any previous attributes of the limit line. 
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.LimitLine.SaveFile(System.String)">
            <summary>Save the limit line to a file.</summary>
            <param name="fileName">The limit line file name.</param>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitLine.Name">
            <summary>Gets or sets the name of the limit line. The name does not have to be unique.</summary>
            <remarks>
            The name of each limit line is displayed in the marker area that shows the results of the limit line tests.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitLine.IsEnable">
            <summary>
            Gets or sets a value indicating whether this limit line is to be tested.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitLine.Enabled">
            <summary>Gets or sets a value indicating whether this limit line is to be tested (enabled).</summary>
            <version>15.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitLine.Display">
            <summary>Gets or sets how limit and/or margin lines are drawn.</summary>
            <remarks>
            You can display any combination of limit and margin lines. 
            Only displayed lines are tested against limits/margins. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitLine.LineDraw">
            <summary>Gets or sets whether a single line or just the connect points are drawn for the limit/margin lines.</summary>
            <remarks>
            If a single line is chosen, then the sections between the limit line segments are drawn as lines at the upper side 
            of the trace (if <see cref="P:Agilent.SA.Vsa.LimitLine.YSide"/> is LimitLineYSide.Upper) or the lower side of the trace 
            (if YSide is LimitLineYSide.Lower). 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitLine.TraceFail">
            <summary>Gets or sets how a limit/margin failure is drawn on the trace.</summary>
            <remarks>
            If TraceFail is LimitLineTraceFail.InFailColor, then the trace is drawn in a different color 
            than the normal trace color in the regions where the trace data fails the limit/margin test. 
            The DisplayColor.FailLimit and DisplayColor.FailMargin entries in the 
            Display.Color array determine the color of the Limit/Margin failure. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitLine.XReference">
            <summary>Gets or sets whether the X points in the limit line are absolute or relative.</summary>
            <remarks>
            If XReference is vsaLimLineXRefRelative, then reference point is determined by XDomain. 
            If <see cref="P:Agilent.SA.Vsa.LimitLine.XDomain"/> is LimitLineXDomain.Frequency, then the reference by is the center frequency. 
            If <see cref="P:Agilent.SA.Vsa.LimitLine.XDomain"/> is LimitLineXDomain.Time, then the reference is the start time. 
            When the limit line is applied to the data, the reference point X-value is added to all X-value limit line points. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitLine.YReference">
            <summary>Gets or sets whether the Y points in the limit line are absolute or relative.</summary>
            <remarks>
            If YReference is LimitLineYReference.Relative, then the reference value is <see cref="P:Agilent.SA.Vsa.Trace.YRefLevel"/>. 
            If YReference is LimitLineYReference.User, then the reference value is <see cref="P:Agilent.SA.Vsa.LimitLine.YReferenceUser"/>. 
            When the limit line is applied to the data, the reference value is added to all Y-value limit line points. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitLine.YSide">
            <summary>Gets or sets whether the limit line is on the upper or lower side of the trace.</summary>
            <remarks>
            If YSide is LimitLineYSide.Upper, then any trace data Y-values that are larger than the corresponding 
            limit line Y-values cause the limit line to fail. 
            If YSide is LimitLineYSide.Lower, then any trace data Y-values that are smaller than the corresponding 
            limit line Y-values cause the limit line to fail. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitLine.YUnit">
            <summary>Gets or sets the Y unit type (Power, Peak, RMS).</summary>
            <remarks>
            The value of YUnit along with <see cref="P:Agilent.SA.Vsa.LimitLine.XDomain"/> and <see cref="P:Agilent.SA.Vsa.LimitLine.YFormat"/> determine the Y unit of the limit line points. 
            See <see cref="P:Agilent.SA.Vsa.Trace.YUnit"/> to see more information about how this property affects the units. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitLine.YFormat">
            <summary>Gets or sets whether the Y units are log (e.g. dB) or linear. Get/set whether the Y units are log (e.g. dB) or linear.</summary>
            <remarks>
            The value of YFormat along with <see cref="P:Agilent.SA.Vsa.LimitLine.XDomain"/> and <see cref="P:Agilent.SA.Vsa.LimitLine.YUnit"/> determine the Y unit of the limit line points. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitLine.XDomain">
            <summary>Gets or sets whether the points are in the time or frequency domain.</summary>
            <remarks>
            The value of XDomain determines the X unit of the limit line points. 
            The limit line can only be applied to traces with a matching X unit. 
            The value of XDomain along with <see cref="P:Agilent.SA.Vsa.LimitLine.YFormat"/> and <see cref="P:Agilent.SA.Vsa.LimitLine.YUnit"/> determine the Y unit of the limit line points. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitLine.YMargin">
            <summary>Gets or sets the Y offset between the limit line and the margin line.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitLine.YReferenceUser">
            <summary>Gets or sets the User-specified Y reference.</summary>
            <remarks>
            The Y reference is used if <see cref="P:Agilent.SA.Vsa.LimitLine.YReference"/> is LimitLineYReference.User.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitLine.YReferenceTrace">
            <summary>Gets or sets the name of the data header variable that contains the measurement-generated Y reference.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitLine.XUnitName">
            <summary>Gets the unit name of the X points.</summary>
            <remarks>
            The XUnitName is determined by <see cref="P:Agilent.SA.Vsa.LimitLine.XDomain"/>. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitLine.YUnitNameAbsolute">
            <summary>Gets the unit name of the user Y reference.</summary>
            <remarks>
            The YUnitNameAbsolute string is determined by <see cref="P:Agilent.SA.Vsa.LimitLine.YFormat"/>, <see cref="P:Agilent.SA.Vsa.LimitLine.XDomain"/>, 
            and <see cref="P:Agilent.SA.Vsa.LimitLine.YUnit"/>. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitLine.YUnitName">
            <summary>Gets the unit name of the Y points.</summary>
            <remarks>
            The YUnitName string is determined by <see cref="P:Agilent.SA.Vsa.LimitLine.YFormat"/>, <see cref="P:Agilent.SA.Vsa.LimitLine.XDomain"/>, 
            and <see cref="P:Agilent.SA.Vsa.LimitLine.YUnit"/>. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitLine.YMarginUnitName">
            <summary>Gets the unit name of the Y margin.</summary>
            <remarks>
            The YMarginUnitName string is determined by <see cref="P:Agilent.SA.Vsa.LimitLine.YFormat"/>, <see cref="P:Agilent.SA.Vsa.LimitLine.XDomain"/>, 
            and <see cref="P:Agilent.SA.Vsa.LimitLine.YUnit"/>. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitLine.ConnectPoints">
            <summary>Gets or sets an array containing the Connect values for all points in the limit line.</summary>
            <remarks>
            ConnectPoints is an array of booleans that is <see cref="P:Agilent.SA.Vsa.LimitLine.Count"/> elements long. 
            This property returns an empty variant if Count is zero. 
            ConnectPoints is always the same size as <see cref="P:Agilent.SA.Vsa.LimitLine.XPoints"/> and <see cref="P:Agilent.SA.Vsa.LimitLine.YPoints"/>. 
            Use <see cref="M:Agilent.SA.Vsa.LimitLine.SetPoints(System.Double[],System.Double[],System.Boolean[])"/> to set the connect-values (along with X- and Y-values) of all points in the limit line.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitLine.XPoints">
            <summary>Gets or sets an array containing the X values for all points in the limit line. </summary>
            <remarks>
            XPoints is an array of booleans that is <see cref="P:Agilent.SA.Vsa.LimitLine.Count"/> elements long. 
            This property returns an empty variant if Count is zero. 
            XPoints is always the same size as <see cref="P:Agilent.SA.Vsa.LimitLine.ConnectPoints"/> and <see cref="P:Agilent.SA.Vsa.LimitLine.YPoints"/>. 
            Use <see cref="M:Agilent.SA.Vsa.LimitLine.SetPoints(System.Double[],System.Double[],System.Boolean[])"/> to set the X-values (along with connect- and Y-values) of all points in the limit line.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitLine.YPoints">
            <summary>Gets or sets an array containing the Y values for all points in the limit line. </summary>
            <remarks>
            YPoints is an array of booleans that is <see cref="P:Agilent.SA.Vsa.LimitLine.Count"/> elements long. 
            This property returns an empty variant if Count is zero. 
            YPoints is always the same size as <see cref="P:Agilent.SA.Vsa.LimitLine.XPoints"/> and <see cref="P:Agilent.SA.Vsa.LimitLine.YPoints"/>. 
            Use <see cref="M:Agilent.SA.Vsa.LimitLine.SetPoints(System.Double[],System.Double[],System.Boolean[])"/> to set the Y-values (along with connect- and X-values) of all points in the limit line.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitLine.Count">
            <summary>Gets the number of points in the limit line.</summary>
            <remarks>
            Use <see cref="P:Agilent.SA.Vsa.LimitLine.ConnectPoints"/>, <see cref="P:Agilent.SA.Vsa.LimitLine.XPoints"/>, and <see cref="P:Agilent.SA.Vsa.LimitLine.YPoints"/> to get the points in the limit line. 
            Use <see cref="M:Agilent.SA.Vsa.LimitLine.SetPoints(System.Double[],System.Double[],System.Boolean[])"/> to set the points in the limit line.
            </remarks>
        </member>
        <member name="T:Agilent.SA.Vsa.LimitLineCollection">
            <summary>The LimitLineCollection class contains a collection of <see cref="T:Agilent.SA.Vsa.LimitLine"/> objects.</summary>
            <remarks>
            In addition, you can set set the selected limit line, clear the collection, or move limit lines in the collection. 
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.LimitLineCollection.Clear">
            <summary>Remove all limit lines from the collection.</summary>
        </member>
        <member name="M:Agilent.SA.Vsa.LimitLineCollection.Contains(Agilent.SA.Vsa.LimitLine)">
            <summary>Returns true if the passes <see cref="T:Agilent.SA.Vsa.LimitLine"/> is in the collection.</summary>
            <param name="item">The LimitLine to find.</param>
            <returns>Return true if the LimitLine is in the collection</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.LimitLineCollection.Create">
            <summary>
            Creates a new <see cref="T:Agilent.SA.Vsa.LimitLine"/>.
            </summary>
            <returns>A handle to the new <see cref="T:Agilent.SA.Vsa.LimitLine"/>.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.LimitLineCollection.MoveTo(System.Int32,System.Int32)">
            <summary>Move the specified limit line to another position in the list.</summary>
            <param name="indexFrom">Current or "old" position of the limit line.</param>
            <param name="indexTo">Position the limit line is to be moved to.</param>
            <remarks>
            The indexes inxFrom and inxTo represent positions as they exist before moving the <see cref="T:Agilent.SA.Vsa.LimitLine"/>. 
            They must be in the range of 0 to Count-1. 
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.LimitLineCollection.Remove(Agilent.SA.Vsa.LimitLine)">
            <summary>
            Remove a <see cref="T:Agilent.SA.Vsa.LimitLine"/> from the collection.
            </summary>
            <param name="item"><see cref="T:Agilent.SA.Vsa.LimitLine"/> to remove from the collection</param>
            <returns>True, if the <see cref="T:Agilent.SA.Vsa.LimitLine"/> was removed from the collection.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.LimitLineCollection.RemoveAt(System.Int32)">
            <summary>
            Remove a <see cref="T:Agilent.SA.Vsa.LimitLine"/> from the collection.
            </summary>
            <param name="index">Zero-based index of <see cref="T:Agilent.SA.Vsa.LimitLine"/> to remove from the collection</param>
            <returns>True, if the <see cref="T:Agilent.SA.Vsa.LimitLine"/> was removed from the collection.</returns>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitLineCollection.SelectedIndex">
            <summary>Gets or sets the 0-based index of the selected <see cref="T:Agilent.SA.Vsa.LimitLine"/>.</summary>
            <remarks>
            The selected limit line is the one being edited. Returns -1 if no limit line is selected.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitLineCollection.SelectedItem">
            <summary>Gets or sets the selected <see cref="T:Agilent.SA.Vsa.LimitLine"/>.</summary>
            <remarks>
            The selected limit line is the one being edited. Returns null if no limit line is selected.
            </remarks>
        </member>
        <member name="T:Agilent.SA.Vsa.LimitTest">
            <summary>The LimitTest class contains a collection a <see cref="T:Agilent.SA.Vsa.LimitLineCollection">limit lines</see>.</summary>
        </member>
        <member name="M:Agilent.SA.Vsa.LimitTest.Save">
            <summary>Save any changes made to this limit test.</summary>
        </member>
        <member name="M:Agilent.SA.Vsa.LimitTest.RecallFile(System.String)">
            <summary>Recall this limit test from a file.</summary>
            <param name="fileName">The limit test file.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.LimitTest.SaveFile(System.String)">
            <summary>Save this limit test to a file.</summary>
            <param name="fileName">The limit test file.</param>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitTest.LimitLines">
            <summary>Gets the <see cref="T:Agilent.SA.Vsa.LimitLineCollection">limit line collection</see>.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitTest.Name">
            <summary>Gets or sets the name of this limit test.</summary>
            <remarks>
            The name must be unique about all the limit tests and must be a valid file name.
            </remarks>
        </member>
        <member name="T:Agilent.SA.Vsa.LimitTestCollection">
            <summary>
            This collection contains the set of <see cref="T:Agilent.SA.Vsa.LimitTest"/> objects currently loaded in the application.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.LimitTestCollection.Contains(Agilent.SA.Vsa.LimitTest)">
            <summary>Returns true if the passes <see cref="T:Agilent.SA.Vsa.LimitTest"/> is in the collection.</summary>
            <param name="item">The LimitTest to find.</param>
            <returns>Return true if the LimitTest is in the collection</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.LimitTestCollection.Create">
            <summary>
            Create a new, empty <see cref="T:Agilent.SA.Vsa.LimitTest">limit test</see>
            </summary>
            <returns>A handle to the newly created limit test.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.LimitTestCollection.Create(System.String)">
            <summary>
            Create a new, empty <see cref="T:Agilent.SA.Vsa.LimitTest">limit test</see> with the supplied name.
            </summary>
            <param name="name">The name for the new limit test.</param>
            <returns>A handle to the newly created limit test.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the supplied name already exists in the collection.</exception>
        </member>
        <member name="M:Agilent.SA.Vsa.LimitTestCollection.Remove(Agilent.SA.Vsa.LimitTest)">
            <summary>
            Remove a <see cref="T:Agilent.SA.Vsa.LimitTest">limit test</see> from the collection.
            </summary>
            <param name="item">The <see cref="T:Agilent.SA.Vsa.LimitTest">limit test</see> to remove from the collection</param>
            <returns>True, if the <see cref="T:Agilent.SA.Vsa.LimitTest">limit test</see> was removed from the collection.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.LimitTestCollection.RemoveAt(System.Int32)">
            <summary>
            Remove a <see cref="T:Agilent.SA.Vsa.LimitTest">limit test</see> from the collection.
            </summary>
            <param name="index">Zero-based index of the <see cref="T:Agilent.SA.Vsa.LimitTest">limit test</see> to remove from the collection</param>
            <returns>True, if the <see cref="T:Agilent.SA.Vsa.LimitTest">limit test</see> was removed from the collection.</returns>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitTestCollection.SelectedIndex">
            <summary>
            Gets or sets the index of the current limit test.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitTestCollection.SelectedItem">
            <summary>
            Gets or sets the current limit test.
            </summary>
            <remarks>
            This property is primarily used for the benefit of the user interface.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitTestCollection.Item(System.String)">
            <summary>
            Returns the named limit test from the collection.
            </summary>
            <param name="name">The name of the limit test to retrieve. The name is case sensitive.</param>
            <returns>The named limit test, or null if no limit test of the supplied name exists.</returns>
        </member>
        <member name="T:Agilent.SA.Vsa.FrequencyChannel">
            <summary>
            This class is for channelized frequency parameters.
            </summary>
            <remarks>
            The channels represented by this class are logical channels, which may be combinations of multiple
            physical hardware channels.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.FrequencyChannel.Center">
            <summary>
            Gets or sets the measurement center frequency for a single channel.
            </summary>
            <remarks>
            You can set the frequency range with the Center and <see cref="P:Agilent.SA.Vsa.Frequency.Span">Frequency.Span</see> properties, or with the 
            <see cref="P:Agilent.SA.Vsa.FrequencyChannel.StartFrequency"/> and <see cref="P:Agilent.SA.Vsa.FrequencyChannel.StopFrequency"/> properties.
            <para/>
            Note that for multi-channel hardware, the center frequency can be set independently for each channel
            or all channels can be set to the same value. To set the center frequency for all channels to the same 
            value use the <see cref="P:Agilent.SA.Vsa.Frequency.Center">Frequency.Center</see> property.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.FrequencyChannel.StartFrequency">
            <summary>
            Gets or sets the measurement start frequency (in Hertz) for a single channel.
            </summary>
            <remarks>
            Changing the start frequency on one channel will affect the frequency settings on other channels since
            all channels must have a common <see cref="P:Agilent.SA.Vsa.Frequency.Span">Span</see>.  Changing the start frequency
            on one channel will change the span on other channels to the same span (stop - start) as this channel, 
            the center frequency on other channels will be kept fixed if possible when this happens.  
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.FrequencyChannel.StopFrequency">
            <summary>
            Gets or sets the measurement stop frequency (in Hertz) for a single channel.
            </summary>
            <remarks>
            Changing the stop frequency on one channel will affect the frequency settings on other channels since
            all channels must have a common <see cref="P:Agilent.SA.Vsa.Frequency.Span">Span</see>.  Changing the stop frequency
            on one channel will change the span on other channels to the same span (stop - start) as this channel, 
            the center frequency on other channels will be kept fixed if possible when this happens.  
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.FrequencyChannel.SampleRate">
            <summary>
            Gets the sample rate of the data in the measurement.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.FrequencyChannel.InputSampleRate">
            <summary>
            Gets the sample rate of the data from the instrument.
            </summary>
        </member>
        <member name="T:Agilent.SA.VsaInternal.TraceType">
            <summary>
            Describes the different tracing categories available for obtaining trace information.
            </summary>
        </member>
        <member name="F:Agilent.SA.VsaInternal.TraceType.General">
            <summary>
            Used for tracing all activity not covered by any of the following categories
            </summary>
        </member>
        <member name="F:Agilent.SA.VsaInternal.TraceType.UI">
            <summary>
            Used for tracing user interface, excluding macro recording
            </summary>
        </member>
        <member name="F:Agilent.SA.VsaInternal.TraceType.Macro">
            <summary>
            Used exclusively for macro recording
            </summary>
        </member>
        <member name="F:Agilent.SA.VsaInternal.TraceType.Measurement">
            <summary>
            Used for tracing measurement activity
            </summary>
        </member>
        <member name="F:Agilent.SA.VsaInternal.TraceType.State">
            <summary>
            Used for tracing state activity
            </summary>
        </member>
        <member name="F:Agilent.SA.VsaInternal.TraceType.Boot">
            <summary>
            Used for tracing boot up activity
            </summary>
        </member>
        <member name="F:Agilent.SA.VsaInternal.TraceType.Hardware">
            <summary>
            Used for tracing hardware related activity
            </summary>
        </member>
        <member name="F:Agilent.SA.VsaInternal.TraceType.Debug">
            <summary>
            Used for debugging
            </summary>
        </member>
        <member name="F:Agilent.SA.VsaInternal.TraceType.Help">
            <summary>
            Used for messages relating to the help system.
            </summary>
        </member>
        <member name="T:Agilent.SA.VsaInternal.IndentOption">
            <summary>
            Describes the indent options for trace output.
            </summary>
        </member>
        <member name="F:Agilent.SA.VsaInternal.IndentOption.NoIndent">
            <summary>
            No indentation
            </summary>
        </member>
        <member name="F:Agilent.SA.VsaInternal.IndentOption.PushAfter">
            <summary>
            Indent after the trace output
            </summary>
        </member>
        <member name="F:Agilent.SA.VsaInternal.IndentOption.PopBefore">
            <summary>
            Indent before the trace output
            </summary>
        </member>
        <member name="T:Agilent.SA.VsaInternal.ILogService">
            <summary>
            Defines an application logging service
            </summary>
        </member>
        <member name="M:Agilent.SA.VsaInternal.ILogService.AddTraceListener(Agilent.SA.VsaInternal.TraceType,System.Diagnostics.TraceListener)">
            <summary>
            Allows a new TraceListener to be added to the indicated TraceSource. This is used to
            dynamically add the NamedPipeTraceListener when the application detects that it is
            being started by the xSA application.
            </summary>
            <param name="type">The TraceSource to which to add the listener.</param>
            <param name="listener">The listener to add.</param>
        </member>
        <member name="M:Agilent.SA.VsaInternal.ILogService.Close(Agilent.SA.VsaInternal.TraceType)">
            <summary>
            Closes the logger indicated by the <paramref name="type"/> parameter. Subsequent messages
            sent to this log are ignored.
            </summary>
            <param name="type">The logger to close. In general, it only makes sense to close loggers that are
            never going to be used again. The only one that comes to mind is the Boot logger. It must be closed
            in order to make the splash screen disappear.</param>
        </member>
        <member name="M:Agilent.SA.VsaInternal.ILogService.Debug(System.String,System.Object[])">
            <summary>
            Logs debug output (to the Debug category)
            </summary>
            <param name="format">The message to be logged, possibly containing positional substitutions as
            defined for string.Format().</param>
            <param name="args">A set of arguments to be inserted into the positional substitution fields of
            the <paramref name="format"/> parameter.</param>
            <returns>Returns the ILogService instance on which the method was invoked. This allows for
            chaining operations (i.e. Debug("someMessage").Verbose(TraceType.Boot, "otherMessage") ).</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.ILogService.Debug(System.Exception)">
            <summary>
            Logs an exception to debug output (to the Debug category)
            </summary>
            <param name="ex">The exception to be logged. The log includes the Message field and call stack information for the
            supplied exception, as well as similar information for the InnerException (recursively) or the InnerExceptions
            (recursively), where <paramref name="ex"/> is of type System.AggregateException".</param>
            <returns>Returns the ILogService instance on which the method was invoked. This allows for
            chaining operations (i.e. Debug(someException).Verbose(TraceType.Boot, "otherMessage") ).</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.ILogService.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            Logs an exception to debug output (to the Debug category)
            </summary>
            <param name="ex">The exception to be logged. The log includes the Message field and call stack information for the
            supplied exception, as well as similar information for the InnerException (recursively) or the InnerExceptions
            (recursively), where <paramref name="ex"/> is of type System.AggregateException".</param>
            <param name="format">The message to be logged, possibly containing positional substitutions as
            defined for string.Format().</param>
            <param name="args">A set of arguments to be inserted into the positional substitution fields of
            the <paramref name="format"/> parameter.</param>
            <returns>Returns the ILogService instance on which the method was invoked. This allows for
            chaining operations (i.e. Debug(someException).Verbose(TraceType.Boot, "otherMessage") ).</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.ILogService.ErrorMessage(System.String,System.Object[])">
            <summary>
            Logs an error to the General category
            </summary>
            <param name="format">The message to be logged, possibly containing positional substitutions as
            defined for string.Format().</param>
            <param name="args">A set of arguments to be inserted into the positional substitution fields of
            the <paramref name="format"/> parameter.</param>
            <returns>Returns the ILogService instance on which the method was invoked. This allows for
            chaining operations (i.e. ErrorMessage("someMessage").Verbose(TraceType.Boot, "otherMessage") ).</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.ILogService.ErrorMessage(Agilent.SA.VsaInternal.IndentOption,System.String,System.Object[])">
            <summary>
            Logs an error to the General category
            </summary>
            <param name="indent">Specifies what kind of indenting to use.</param>
            <param name="format">The message to be logged, possibly containing positional substitutions as
            defined for string.Format().</param>
            <param name="args">A set of arguments to be inserted into the positional substitution fields of
            the <paramref name="format"/> parameter.</param>
            <returns>Returns the ILogService instance on which the method was invoked. This allows for
            chaining operations (i.e. ErrorMessage(IndentOption.PushAfter, "someMessage").Verbose(TraceType.Boot, "otherMessage") ).</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.ILogService.ErrorMessage(Agilent.SA.VsaInternal.TraceType,System.String,System.Object[])">
            <summary>
            Used for logging an error to the category indicated by the <paramref name="type"/> parameter.
            </summary>
            <param name="type">The category to which to log the message.</param>
            <param name="format">The message to be logged, possibly containing positional substitutions as
            defined for string.Format().</param>
            <param name="args">A set of arguments to be inserted into the positional substitution fields of
            the <paramref name="format"/> parameter.</param>
            <returns>Returns the ILogService instance on which the method was invoked. This allows for
            chaining operations (i.e. ErrorMessage(TraceType.Boot, "someMessage").Verbose(TraceType.Boot, "otherMessage") ).</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.ILogService.ErrorMessage(Agilent.SA.VsaInternal.TraceType,Agilent.SA.VsaInternal.IndentOption,System.String,System.Object[])">
            <summary>
            Log an error to the category indicated by the <paramref name="type"/> parameter.
            </summary>
            <param name="type">The category to which to log the message.</param>
            <param name="indent">Specifies what kind of indenting to use.</param>
            <param name="format">The message to be logged, possibly containing positional substitutions as
            defined for string.Format().</param>
            <param name="args">A set of arguments to be inserted into the positional substitution fields of
            the <paramref name="format"/> parameter.</param>
            <returns>Returns the ILogService instance on which the method was invoked. This allows for
            chaining operations (i.e. ErrorMessage(TraceType.Boot, IndentOption.PushAfter, "someMessage").Verbose(TraceType.Boot, "otherMessage") ).</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.ILogService.Info(System.String,System.Object[])">
            <summary>
            Log information (not an error) to the General category
            </summary>
            <param name="format">The message to be logged, possibly containing positional substitutions as
            defined for string.Format().</param>
            <param name="args">A set of arguments to be inserted into the positional substitution fields of
            the <paramref name="format"/> parameter.</param>
            <returns>Returns the ILogService instance on which the method was invoked. This allows for
            chaining operations (i.e. Info("someMessage").Verbose(TraceType.Boot, "otherMessage") ).</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.ILogService.Info(Agilent.SA.VsaInternal.IndentOption,System.String,System.Object[])">
            <summary>
            Log information to the General category
            </summary>
            <param name="indent">Specifies what kind of indenting to use.</param>
            <param name="format">The message to be logged, possibly containing positional substitutions as
            defined for string.Format().</param>
            <param name="args">A set of arguments to be inserted into the positional substitution fields of
            the <paramref name="format"/> parameter.</param>
            <returns>Returns the ILogService instance on which the method was invoked. This allows for
            chaining operations (i.e. Info(IndentOption.PushAfter, "someMessage").Verbose(TraceType.Boot, "otherMessage") ).</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.ILogService.Info(Agilent.SA.VsaInternal.TraceType,System.String,System.Object[])">
            <summary>
            Log information to the category indicated by the <paramref name="type"/> parameter.
            </summary>
            <param name="type">The category to which to log the message.</param>
            <param name="format">The message to be logged, possibly containing positional substitutions as
            defined for string.Format().</param>
            <param name="args">A set of arguments to be inserted into the positional substitution fields of
            the <paramref name="format"/> parameter.</param>
            <returns>Returns the ILogService instance on which the method was invoked. This allows for
            chaining operations (i.e. Info(TraceType.Boot, "someMessage").Verbose(TraceType.Boot, "otherMessage") ).</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.ILogService.Info(Agilent.SA.VsaInternal.TraceType,Agilent.SA.VsaInternal.IndentOption,System.String,System.Object[])">
            <summary>
            Log information to the category indicated by the <paramref name="type"/> parameter.
            </summary>
            <param name="type">The category to which to log the message.</param>
            <param name="indent">Specifies what kind of indenting to use.</param>
            <param name="format">The message to be logged, possibly containing positional substitutions as
            defined for string.Format().</param>
            <param name="args">A set of arguments to be inserted into the positional substitution fields of
            the <paramref name="format"/> parameter.</param>
            <returns>Returns the ILogService instance on which the method was invoked. This allows for
            chaining operations (i.e. Info(TraceType.Boot, IndentOption.PushAfter, "someMessage").Verbose(TraceType.Boot, "otherMessage") ).</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.ILogService.IsErrorOn">
            <summary>
            Returns whether errors are being logged for the default trace source.
            </summary>
            <returns>True if turned on, false otherwise.</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.ILogService.IsErrorOn(Agilent.SA.VsaInternal.TraceType)">
            <summary>
            Returns whether errors are being logged for the indicated trace source.
            </summary>
            <param name="source">Indicates the trace source in question.</param>
            <returns>True if turned on, false otherwise.</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.ILogService.IsInfoOn">
            <summary>
            Returns whether informational messages are being logged for the default trace source.
            </summary>
            <returns>True if turned on, false otherwise.</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.ILogService.IsInfoOn(Agilent.SA.VsaInternal.TraceType)">
            <summary>
            Returns whether informational messages are being logged for the indicated trace source.
            </summary>
            <param name="source">Indicates the trace source in question.</param>
            <returns>True if turned on, false otherwise.</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.ILogService.IsVerboseOn">
            <summary>
            Returns whether verbose messages are being logged for the default trace source.
            </summary>
            <returns>True if turned on, false otherwise.</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.ILogService.IsVerboseOn(Agilent.SA.VsaInternal.TraceType)">
            <summary>
            Returns whether verbose messages are being logged for the indicated trace source.
            </summary>
            <param name="source">Indicates the trace source in question.</param>
            <returns>True if turned on, false otherwise.</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.ILogService.IsWarningOn">
            <summary>
            Returns whether warning messages are being logged for the default trace source.
            </summary>
            <returns>True if turned on, false otherwise.</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.ILogService.IsWarningOn(Agilent.SA.VsaInternal.TraceType)">
            <summary>
            Returns whether warning messages are being logged for the indicated trace source.
            </summary>
            <param name="source">Indicates the trace source in question.</param>
            <returns>True if turned on, false otherwise.</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.ILogService.Pop(Agilent.SA.VsaInternal.TraceType)">
            <summary>
            Pops the indent level for the indicated trace type. This undoes the effect of a previous
            Push() operation. If timing is enabled, the base time for subsequent elapsed time calculations
            is set back to what it was prior to the paired Push(). This allows for embedded elapsed time
            calculations (i.e. calculate the elapsed time for an entire operation as well as for all the
            steps within).
            </summary>
            <param name="type">The category to which to log the message.</param>
            <returns>Returns the ILogService instance on which the method was invoked. This allows for
            chaining operations (i.e. Info(TraceType.Boot, "someMessage").Verbose(TraceType.Boot, "otherMessage") ).</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.ILogService.Push(Agilent.SA.VsaInternal.TraceType)">
            <summary>
            Pushes the indent level for the indicated trace type. Subsequent messages will be indented and
            additional amount until a "Pop()" method is called for the same type. When timing is enabled
            the Push() operation also starts a new base time for future elapse time calculations.
            </summary>
            <param name="type">The category to which to log the message.</param>
            <returns>Returns the ILogService instance on which the method was invoked. This allows for
            chaining operations (i.e. Info(TraceType.Boot, "someMessage").Verbose(TraceType.Boot, "otherMessage") ).</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.ILogService.Verbose(System.String,System.Object[])">
            <summary>
            Log verbose information to the General category
            </summary>
            <param name="format">The message to be logged, possibly containing positional substitutions as
            defined for string.Format().</param>
            <param name="args">A set of arguments to be inserted into the positional substitution fields of
            the <paramref name="format"/> parameter.</param>
            <returns>Returns the ILogService instance on which the method was invoked. This allows for
            chaining operations (i.e. Verbose("someMessage").Verbose(TraceType.Boot, "otherMessage") ).</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.ILogService.Verbose(Agilent.SA.VsaInternal.IndentOption,System.String,System.Object[])">
            <summary>
            Log verbose information to the General category
            </summary>
            <param name="indent">Specifies what kind of indenting to use.</param>
            <param name="format">The message to be logged, possibly containing positional substitutions as
            defined for string.Format().</param>
            <param name="args">A set of arguments to be inserted into the positional substitution fields of
            the <paramref name="format"/> parameter.</param>
            <returns>Returns the ILogService instance on which the method was invoked. This allows for
            chaining operations (i.e. Verbose(IndentOption.PushAfter, "someMessage").Verbose(TraceType.Boot, "otherMessage") ).</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.ILogService.Verbose(Agilent.SA.VsaInternal.TraceType,System.String,System.Object[])">
            <summary>
            Log verbose information to the category indicated by the <paramref name="type"/> parameter.
            </summary>
            <param name="type">The category to which to log the message.</param>
            <param name="format">The message to be logged, possibly containing positional substitutions as
            defined for string.Format().</param>
            <param name="args">A set of arguments to be inserted into the positional substitution fields of
            the <paramref name="format"/> parameter.</param>
            <returns>Returns the ILogService instance on which the method was invoked. This allows for
            chaining operations (i.e. Verbose(TraceType.Boot, "someMessage").Verbose(TraceType.Boot, "otherMessage") ).</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.ILogService.Verbose(Agilent.SA.VsaInternal.TraceType,Agilent.SA.VsaInternal.IndentOption,System.String,System.Object[])">
            <summary>
            Log verbose information to the category indicated by the <paramref name="type"/> parameter.
            </summary>
            <param name="type">The category to which to log the message.</param>
            <param name="indent">Specifies what kind of indenting to use.</param>
            <param name="format">The message to be logged, possibly containing positional substitutions as
            defined for string.Format().</param>
            <param name="args">A set of arguments to be inserted into the positional substitution fields of
            the <paramref name="format"/> parameter.</param>
            <returns>Returns the ILogService instance on which the method was invoked. This allows for
            chaining operations (i.e. Verbose(TraceType.Boot, IndentOption.PushAfter, "someMessage").Verbose(TraceType.Boot, "otherMessage") ).</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.ILogService.Warning(System.String,System.Object[])">
            <summary>
            Log a warning to the General category
            </summary>
            <param name="format">The message to be logged, possibly containing positional substitutions as
            defined for string.Format().</param>
            <param name="args">A set of arguments to be inserted into the positional substitution fields of
            the <paramref name="format"/> parameter.</param>
            <returns>Returns the ILogService instance on which the method was invoked. This allows for
            chaining operations (i.e. Warning("someMessage").Verbose(TraceType.Boot, "otherMessage") ).</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.ILogService.Warning(Agilent.SA.VsaInternal.IndentOption,System.String,System.Object[])">
            <summary>
            Log a warning to the General category
            </summary>
            <param name="indent">Specifies what kind of indenting to use.</param>
            <param name="format">The message to be logged, possibly containing positional substitutions as
            defined for string.Format().</param>
            <param name="args">A set of arguments to be inserted into the positional substitution fields of
            the <paramref name="format"/> parameter.</param>
            <returns>Returns the ILogService instance on which the method was invoked. This allows for
            chaining operations (i.e. Warning(IndentOptions.PushAfter, "someMessage").Verbose(TraceType.Boot, "otherMessage") ).</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.ILogService.Warning(Agilent.SA.VsaInternal.TraceType,System.String,System.Object[])">
            <summary>
            Log a warning to the category indicated by the <paramref name="type"/> parameter.
            </summary>
            <param name="type">The category to which to log the message.</param>
            <param name="format">The message to be logged, possibly containing positional substitutions as
            defined for string.Format().</param>
            <param name="args">A set of arguments to be inserted into the positional substitution fields of
            the <paramref name="format"/> parameter.</param>
            <returns>Returns the ILogService instance on which the method was invoked. This allows for
            chaining operations (i.e. Warning(TraceType.Boot, "someMessage").Verbose(TraceType.Boot, "otherMessage") ).</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.ILogService.Warning(Agilent.SA.VsaInternal.TraceType,Agilent.SA.VsaInternal.IndentOption,System.String,System.Object[])">
            <summary>
            Log a warning to the category indicated by the <paramref name="type"/> parameter.
            </summary>
            <param name="type">The category to which to log the message.</param>
            <param name="indent">Specifies what kind of indenting to use.</param>
            <param name="format">The message to be logged, possibly containing positional substitutions as
            defined for string.Format().</param>
            <param name="args">A set of arguments to be inserted into the positional substitution fields of
            the <paramref name="format"/> parameter.</param>
            <returns>Returns the ILogService instance on which the method was invoked. This allows for
            chaining operations (i.e. Warning(TraceType.Boot, IndentOptions.PushAfter, "someMessage").Verbose(TraceType.Boot, "otherMessage") ).</returns>
        </member>
        <member name="P:Agilent.SA.VsaInternal.ILogService.BootLog">
            <summary>
            Gets the application boot log.
            </summary>
        </member>
        <member name="P:Agilent.SA.VsaInternal.ILogService.Timer">
            <summary>
            Gets a handle to the StopWatch instance used by the logger for timing.
            </summary>
        </member>
        <member name="T:Agilent.SA.VsaInternal.UserRequestedThreadStopException">
            <summary>
            The following class is a custom exception thrown by the macro recorder when it encounters
            activity on a thread for which a user-requested stop is pending.
            </summary>
        </member>
        <member name="M:Agilent.SA.VsaInternal.UserRequestedThreadStopException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.VsaInternal.UserRequestedThreadStopException"/> class.
            </summary>
        </member>
        <member name="M:Agilent.SA.VsaInternal.UserRequestedThreadStopException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.VsaInternal.UserRequestedThreadStopException"/> class.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Agilent.SA.VsaInternal.UserRequestedThreadStopException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.VsaInternal.UserRequestedThreadStopException"/> class.
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">An inner exception.</param>
        </member>
        <member name="M:Agilent.SA.VsaInternal.UserRequestedThreadStopException.#ctor(System.Threading.Thread)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.VsaInternal.UserRequestedThreadStopException"/> class.
            </summary>
            <param name="threadToStop">The thread to stop.</param>
        </member>
        <member name="M:Agilent.SA.VsaInternal.UserRequestedThreadStopException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.VsaInternal.UserRequestedThreadStopException"/> class by deserialization.
            </summary>
            <param name="info">The serializer storage.</param>
            <param name="context">The context of the serialization.</param>
        </member>
        <member name="P:Agilent.SA.VsaInternal.UserRequestedThreadStopException.ThreadToStop">
            <summary>
            Gets the thread to stop.
            </summary>
        </member>
        <member name="T:Agilent.SA.VsaInternal.IMacroRecordingService">
            <summary>
            Defines a macro recording service for recording code of API calls.
            </summary>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IMacroRecordingService.CheckStopThread">
            <summary>
            Check whether a calling thread should be stopped.
            </summary>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IMacroRecordingService.NewUsingBlock(Agilent.SA.VsaInternal.IObjectModel)">
            <summary>
            Create a new change group
            </summary>
            <param name="target">Object in the object model</param>
            <returns>A change group.</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IMacroRecordingService.Record(Agilent.SA.VsaInternal.IObjectModel,System.Reflection.MethodBase,System.Object[])">
            <summary>
            Start recording.
            </summary>
            <remarks>A property changed notification is not forced.</remarks>
            <param name="target">Object of the member to record.</param>
            <param name="caller">The member to be recorded.</param>
            <param name="args">Parameter values for the member that was called.</param>
            <returns>A macro recording change group</returns>
            <version>15.00</version>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IMacroRecordingService.Record(System.Boolean,Agilent.SA.VsaInternal.IObjectModel,System.Reflection.MethodBase,System.Object[])">
            <summary>
            Start recording.
            </summary>
            <param name="emitPropertyNotify">Whether to force a property changed notification.</param>
            <param name="target">Object of the member to record.</param>
            <param name="caller">The member to be recorded.</param>
            <param name="args">Parameter values for the member that was called.</param>
            <returns>A macro recording change group</returns>
            <version>15.00</version>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IMacroRecordingService.Record(Agilent.SA.VsaInternal.IChangeGroup,Agilent.SA.VsaInternal.IObjectModel,System.Reflection.MethodBase,System.Object[])">
            <summary>
            Start recording.
            </summary>
            <param name="embeddedChg">An embedded change group.</param>
            <param name="target">Object of the member to record.</param>
            <param name="caller">The member to be recorded.</param>
            <param name="args">Parameter values for the member that was called.</param>
            <returns>A macro recording change group</returns>
            <version>15.00</version>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IMacroRecordingService.Record(Agilent.SA.VsaInternal.IChangeGroup,System.Boolean,Agilent.SA.VsaInternal.IObjectModel,System.Reflection.MethodBase,System.Object[])">
            <summary>
            Start recording.
            </summary>
            <param name="embeddedChg">An embedded change group.</param>
            <param name="emitPropertyNotify">Whether to force a property changed notification.</param>
            <param name="target">Object of the member to record.</param>
            <param name="caller">The member to be recorded.</param>
            <param name="args">Parameter values for the member that was called.</param>
            <returns>A macro recording change group</returns>
            <version>15.00</version>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IMacroRecordingService.Record(Agilent.SA.VsaInternal.IChangeGroup,System.Boolean,Agilent.SA.VsaInternal.IObjectModel,System.Reflection.MethodBase,Agilent.SA.VsaInternal.IObjectModel,System.Object[])">
            <summary>
            Start recording.
            </summary>
            <param name="embeddedChg">An embedded change group.</param>
            <param name="emitPropertyNotify">Whether to force a property changed notification.</param>
            <param name="target">Object of the member to record.</param>
            <param name="caller">The member to be recorded.</param>
            <param name="alternateParent">An alternate parent instead of the normal one for the target.  
            Useful for specifying a preferred hierarchy path to the target object.</param>
            <param name="args">Parameter values for the member that was called.</param>
            <returns>A macro recording change group</returns>
            <version>15.00</version>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IMacroRecordingService.RecordMethodCall(Agilent.SA.VsaInternal.IChangeGroup,System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Allows the caller to record a method call to a method with no parameters.
            </summary>
            <param name="chg">A handle to the macro recording change group for the recording that is currently in progress.</param>
            <param name="code">A code expression representing the method call. Typically this is an Action of the form
            "() => Method()", where "Method" is the method call to be added to the recording.</param>
            <remarks>
            Some VSA operations are started by non-blocking method calls (i.e. "Measurement.Record()"). When recording such a call
            for a macro, it is necessary to cause the macro to await the completion of the operation prior to allowing macro execution
            to proceed. An interactive user executing such a non-blocking method would be blocked from further action because the
            entire UI is typically disabled until the operation is complete (usually with a modal "in progress" window). This method
            allows the non-blocking method to append a call to the appropriate "wait for XXX" method to allow the macro to operate
            correctly in a synchronous fashion.
            </remarks>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IMacroRecordingService.ResumeRecording">
            <summary>
            Resume recording after it has been suspended.
            </summary>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IMacroRecordingService.StopThread(System.Threading.Thread)">
            <summary>
            Stop the specified macro recording thread.
            </summary>
            <param name="threadToStop">A thread to stop.</param>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IMacroRecordingService.SubstituteArgs``1(System.Linq.Expressions.Expression{System.Func{``0}}[])">
            <summary>
            Override the argument(s) for the next recorded command.
            </summary>
            <remarks>
            <para>
            This is used to emit code that contains an expression representing a property on the right-hand side
            of a property assignment or as the parameter(s) to a method call, rather than the current
            value of the property.
            </para>
            <para>Sometimes you want to emit code of the form "obj1.property = obj2.property" rather
            than "obj1.property = 27.2". In other words, we want the recorded macro to use the value of
            "obj2.property" at the time the macro is run rather than when it is recorded. This method
            provides a means to do that. Simply wrap the following around the property assignment:
            </para>
            <code>
            	using (IChangeGroup chg = Macro.SubstituteArgs(() => obj2.property))
            	{
            		obj1.property = obj2.property;
            	}
            </code>
            Note that the property setter for obj1 will still record the assignment, but rather than using
            the current value of obj2.property, it will emit code to query that value at runtime.
            </remarks>
            <typeparam name="T">Specified type.</typeparam>
            <param name="args">One or more parameters of the form "() => obj.property" to be substituted
            in the following recording.</param>
            <returns>A handle to a change group. As long as the returned change group is in scope the
            substitutions remain on the change group stack.</returns>
        </member>
        <member name="M:Agilent.SA.VsaInternal.IMacroRecordingService.SuspendRecording">
            <summary>
            Suspend macro recording.
            </summary>
        </member>
        <member name="P:Agilent.SA.VsaInternal.IMacroRecordingService.Code">
            <summary>
            Gets the currently recorded macro code. Recording is turned off as
            a result of querying this value, and the recorded code is erased (i.e. you can only
            retrieve the code for a given recording once).
            </summary>
        </member>
        <member name="P:Agilent.SA.VsaInternal.IMacroRecordingService.CodeOutputLanguage">
            <summary>
            Gets or sets which language, if any, is used to emit trace code to the
            Output window. Valid choices are "c#", "vb" and "" (emit no trace code).
            </summary>
        </member>
        <member name="P:Agilent.SA.VsaInternal.IMacroRecordingService.IsRecordingEmpty">
            <summary>
            Gets a value indicating whether the recording is empty.
            </summary>
        </member>
        <member name="P:Agilent.SA.VsaInternal.IMacroRecordingService.IsRecording">
            <summary>
            Gets or sets a value indicating whether recording is on.
            </summary>
        </member>
        <member name="P:Agilent.SA.VsaInternal.IMacroRecordingService.References">
            <summary>
            Gets the required references for the currently recorded macro code.
            </summary>
            <remarks>
            Recording is turned off as a result of querying this value, and the references list
            is erased (i.e. you can only retrieve the references for a given recording once).
            </remarks>
        </member>
        <member name="T:Agilent.SA.Vsa.MathFunction">
            <summary>
            The Math Function object contains properties and members to control the math function features.
            </summary>
            <remarks>
            The MathFunction object represents an individual math function. This object's available methods permit you to save, delete, or set its name and text.
            The measurement uses a math function when it is selected for display on a trace using the Trace.DataName property. The list of available data names for math functions is returned by the TraceCollection.DataNamesMath property. The Trace.DataName for a math function is the math function name prefaced with "Fn ".
            The application stores math functions to files in the MyDocuments\Agilent\89600B VSA\MathFunctions directory and automatically appends the extension MTHX.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.MathFunction.Save">
            <summary>
            Save any changes made to this math function.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.MathFunction.RecallFile(System.String)">
            <summary>
            Recall specified math function file.  Legacy 89601A .MTH files may be recalled using the GUI or API and the recall operation will create a .MTHX file of the same name in MyDocuments\Agilent 89600B VSA\MathFunctions directory.  
            </summary>
            <param name="fileName">The name of the file to recall.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.MathFunction.SaveFile(System.String)">
            <summary>
            Save specified math function file.  
            </summary>
            <param name="fileName">The name of the file to save to.</param>
        </member>
        <member name="P:Agilent.SA.Vsa.MathFunction.Description">
            <summary>
            Gets or sets the math function description. 
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.MathFunction.Enabled">
            <summary>
            Gets or sets a value indicating whether the math function is enabled.  
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.MathFunction.Expression">
            <summary>
            Gets or sets the math function expression. 
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.MathFunction.FullPath">
            <summary>
            Gets the full file path for the saved math function.  
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.MathFunction.Name">
            <summary>
            Gets or sets the math function name. 
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.MathFunctionSyntaxResult">
            <summary>
            The MathFunctionSyntaxResult object contains information about the syntax error, if any, in a math expression.
            </summary>
            <remarks>
            The <see cref="M:Agilent.SA.Vsa.MathFunctionCollection.CheckSyntax(System.String)"/> method returns an object of this type indicating the
            syntax error message, if any, that has been found in the math expression, along with the position of the
            error in the expression.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.MathFunctionSyntaxResult.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.MathFunctionSyntaxResult"/> class with the specified error message and error position.
            </summary>
            <param name="errorMessage"> The error message. </param>
            <param name="errorPosition"> The position of the error. </param>
        </member>
        <member name="P:Agilent.SA.Vsa.MathFunctionSyntaxResult.ErrorMessage">
            <summary>
            Gets the error message.
            </summary>
            <remarks> 
            Empty string implies that there is no syntax error. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.MathFunctionSyntaxResult.ErrorPosition">
            <summary>
            Gets the position of the error.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.MathFunctionCollection">
            <summary>
            The MathFunctionCollection object contain properties and members to control the math functions measurement features. 
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.MathFunctionCollection.CheckSyntax(System.String)">
            <summary>
            Checks to see whether the expression represents a valid math function
            </summary>
            <param name="expression">The math expression whose syntax is to be checked. </param>
            <returns> The <see cref="T:Agilent.SA.Vsa.MathFunctionSyntaxResult"/> object containing the result of the syntax check. </returns>
        </member>
        <member name="M:Agilent.SA.Vsa.MathFunctionCollection.Contains(Agilent.SA.Vsa.MathFunction)">
            <summary>
            Determines whether the provided <see cref="T:Agilent.SA.Vsa.MathFunction"/> object is contained in the collection
            </summary>
            <param name="item"> The <see cref="T:Agilent.SA.Vsa.MathFunction"/> object whose presence in the collection is to be determined.</param>
            <returns>True if the provided <see cref="T:Agilent.SA.Vsa.MathFunction"/> object is present in the collection, false otherwise. </returns>
        </member>
        <member name="M:Agilent.SA.Vsa.MathFunctionCollection.Create">
            <summary>
            Creates a new <see cref="T:Agilent.SA.Vsa.MathFunction"/>.
            </summary>
            <returns>A handle to the new <see cref="T:Agilent.SA.Vsa.MathFunction"/>.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.MathFunctionCollection.Create(System.String)">
            <summary>
            Creates a new math function with specified name
            </summary>
            <param name="name">Name for the math function.</param>
            <returns>A handle to the new <see cref="T:Agilent.SA.Vsa.MathFunction"/>.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.MathFunctionCollection.Remove(System.Collections.Generic.IEnumerable{Agilent.SA.Vsa.MathFunction})">
            <summary>
            Remove the specified math functions.
            </summary>
            <param name="items">The math functions to remove.</param>
            <returns>true if it succeeded, otherwise false.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.MathFunctionCollection.Remove(Agilent.SA.Vsa.MathFunction)">
            <summary>
            Remove a <see cref="T:Agilent.SA.Vsa.MathFunction"/> from the collection.
            </summary>
            <param name="item"><see cref="T:Agilent.SA.Vsa.MathFunction"/> to remove from the collection</param>
            <returns>True, if the <see cref="T:Agilent.SA.Vsa.MathFunction"/> was removed from the collection.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.MathFunctionCollection.RemoveAt(System.Int32)">
            <summary>
            Remove a <see cref="T:Agilent.SA.Vsa.MathFunction"/> from the collection.
            </summary>
            <param name="index">Zero-based index of <see cref="T:Agilent.SA.Vsa.MathFunction"/> to remove from the collection</param>
            <returns>True, if the <see cref="T:Agilent.SA.Vsa.MathFunction"/> was removed from the collection.</returns>
        </member>
        <member name="P:Agilent.SA.Vsa.MathFunctionCollection.Item(System.String)">
            <summary>
            Gets the specified math function
            </summary>
            <param name="name">Name of the math function.</param>
            <returns>A handle to the <see cref="T:Agilent.SA.Vsa.MathFunction"/> or null.</returns>
        </member>
        <member name="T:Agilent.SA.VsaInternal.FirstStepResults">
            <summary>
            A flags enumeration of which step results to use.
            </summary>
        </member>
        <member name="F:Agilent.SA.VsaInternal.FirstStepResults.None">
            <summary>
            No step results.
            </summary>
        </member>
        <member name="F:Agilent.SA.VsaInternal.FirstStepResults.InstantaneousMainTime">
            <summary>
            Instantaneous Main Time results.
            </summary>
        </member>
        <member name="T:Agilent.SA.VsaInternal.RestoreModes">
            <summary>
            Indicate the context for a restore operation
            </summary>
        </member>
        <member name="F:Agilent.SA.VsaInternal.RestoreModes.None">
            <summary>
            Restore with no particular context
            </summary>
        </member>
        <member name="F:Agilent.SA.VsaInternal.RestoreModes.ApplicationPreset">
            <summary>
            Restore being performed due to a call to Application.Preset
            </summary>
        </member>
        <member name="F:Agilent.SA.VsaInternal.RestoreModes.MeasurementPreset">
            <summary>
            Restore being performed due to a call to Measurement.Preset
            </summary>
        </member>
        <member name="F:Agilent.SA.VsaInternal.RestoreModes.Preset">
            <summary>
            ApplicationPreset | MeasurementPreset
            </summary>
        </member>
        <member name="F:Agilent.SA.VsaInternal.RestoreModes.ChangingChannels">
            <summary>
            Restore being performed due to change in channel configuration
            </summary>
        </member>
        <member name="F:Agilent.SA.VsaInternal.RestoreModes.Boot">
            <summary>
            Restore being performed at boot time
            </summary>
        </member>
        <member name="F:Agilent.SA.VsaInternal.RestoreModes.RecallSetup">
            <summary>
            Restore being performed due to setup recall
            </summary>
        </member>
        <member name="F:Agilent.SA.VsaInternal.RestoreModes.HardwareIsDifferentKind">
            <summary>
            Restore being performed where hardware is different kind
            </summary>
        </member>
        <member name="F:Agilent.SA.VsaInternal.RestoreModes.SuppressTraceCreate">
            <summary>
            Do not auto-create default traces
            </summary>
        </member>
        <member name="F:Agilent.SA.VsaInternal.RestoreModes.MeasurementAnalyzerPreset">
            <summary>
            Restore being performed due to changing analyzer HW
            </summary>
            <version>15.00</version>
        </member>
        <member name="F:Agilent.SA.VsaInternal.RestoreModes.PresetPreferences">
            <summary>
            Display and other preferences preset
            </summary>
            <version>15.00</version>
        </member>
        <member name="T:Agilent.SA.Vsa.InstrumentType">
            <summary>
            Specifies the type of instrument.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.InstrumentType.None">
            <summary>
            No instrument type is specified.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.InstrumentType.Adc">
            <summary>
            Adc - provides time domain data.
            </summary>
            <remarks>
            <para>
            The Adc type is used for instruments from which time domain data is read.  That usually
            means an instrument that digitizes (A/D) the signal, but it could be from simulation software
            (such as for the User input functionality) or from a logic analyzer.  An
            instrument may contain tuner (down converter) or input (calibrator) functionality in addition
            to an A/D converter.  But, if that instrument will be performing the A/D operation then the
            type should be specified as Adc.  
            </para>
            </remarks>
        </member>
        <member name="F:Agilent.SA.Vsa.InstrumentType.Tuner">
            <summary>
            Tuner (or frequency converter) that includes both a downconverter and synthesizer.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.InstrumentType.Input">
            <summary>
            Input attenuation and/or calibration.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.InstrumentType.Source">
            <summary>
            Source (outputs a signal)
            </summary>
            <remarks>Outputs a signal.</remarks>
        </member>
        <member name="F:Agilent.SA.Vsa.InstrumentType.Downconverter">
            <summary>
            Downconverter instrument
            </summary>
            <remarks>Mixer to frequency down convert a signal but without the synthesizer.</remarks>
            <version>15.00</version>
        </member>
        <member name="F:Agilent.SA.Vsa.InstrumentType.Synthesizer">
            <summary>
            Synthesizer instrument
            </summary>
            <remarks>Synthesizer instrument.</remarks>
            <version>15.00</version>
        </member>
        <member name="F:Agilent.SA.Vsa.InstrumentType.Reference">
            <summary>
            Frequency reference.
            </summary>
            <remarks>Frequency reference.</remarks>
            <version>15.00</version>
        </member>
        <member name="T:Agilent.SA.Vsa.InstrumentId">
            <summary>
            Instrument identification used to specify a specific instrument and how it will be used.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.InstrumentId.#ctor(Agilent.SA.Vsa.InstrumentType,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.InstrumentId"/> struct that contains the specified instrument type and address. 
            </summary>
            <param name="instrumentType">The instrument type.  See <see cref="P:Agilent.SA.Vsa.InstrumentId.InstrumentType"/> for more details.</param>
            <param name="address">The VISA or TCPIP address of the instrument.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.InstrumentId.ToString">
            <summary>
            Returns a String representation of the InstrumentId. (Overrides <see cref="M:System.ValueType.ToString"/>.)
            </summary>
            <returns>A string representation of the current InstrumentId structure.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.InstrumentId.op_Equality(Agilent.SA.Vsa.InstrumentId,Agilent.SA.Vsa.InstrumentId)">
            <summary>
            Compares two InstrumentId structures for equality.
            </summary>
            <param name="left">The first instance of InstrumentId to compare.</param>
            <param name="right">The second instance of InstrumentId to compare.</param>
            <returns>true if the two instances of InstrumentId have the same InstrumentType and Address; otherwise, false.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.InstrumentId.op_Inequality(Agilent.SA.Vsa.InstrumentId,Agilent.SA.Vsa.InstrumentId)">
            <summary>
            Compares two InstrumentId structures to determine if they are not equal.
            </summary>
            <param name="left">The first instance of InstrumentId to compare.</param>
            <param name="right">The second instance of InstrumentId to compare.</param>
            <returns>true if the two instances of InstrumentId do not have the same InstrumentType and Address; otherwise, false.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.InstrumentId.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current InstrumentId instance. 
            (Overrides <see cref="M:System.ValueType.Equals(System.Object)"/>.)		 
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>true if the specified object has the same InstrumentType and Address as the current instance; otherwise, false.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.InstrumentId.GetHashCode">
            <summary>
            Gets a hash code for the InstrumentId. (Overrides <see cref="M:System.ValueType.GetHashCode"/>.)
            </summary>
            <returns>A hash code for the InstrumentId.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.InstrumentId.GetSchema">
            <summary>
            See <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema"/>.
            </summary>
            <returns>Returns null.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.InstrumentId.ReadXml(System.Xml.XmlReader)">
            <summary>
            Regenerates the InstrumentId structure from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.InstrumentId.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts the InstrumentId structure into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="P:Agilent.SA.Vsa.InstrumentId.InstrumentType">
            <summary>
            Gets the instrument type for this instrument.  A instrument may be capable of more than one type.
            </summary>
            <remarks>
            <para>
            The Adc type is used for instruments from which time domain data is read.  That usually
            means an instrument that digitizes (A/D) the signal, but it could be from simulation software
            (such as for the User input functionality) or from a logic analyzer.  An
            instrument may contain tuner (down converter) or input (calibrator) functionality in addition
            to an A/D converter.  But, if that instrument will be performing the A/D operation then the
            type should be specified as Adc.  
            </para>
            <para>
            An instrument may be capable of more than one type.  For example a Spectrum Analyzer 
            may be used as an Adc type or as a Tuner type depending upon whether that functionality is
            supported or not with that hardware.  When used as a tuner then it is just used as a down converter
            and some other instrument is used to digitize the signal.
            </para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.InstrumentId.Address">
            <summary>
            Gets the VISA or TCPIP address of the instrument.
            </summary>
        </member>
        <member name="T:Agilent.SA.VsaImplementation.EnumDisplayNameAttribute">
            <summary>
            Implements an attribute of information to use when displaying an enumeration value in a GUI.
            </summary>
        </member>
        <member name="M:Agilent.SA.VsaImplementation.EnumDisplayNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.VsaImplementation.EnumDisplayNameAttribute"/> class.
            </summary>
            <param name="displayName">The display name to use.</param>
        </member>
        <member name="P:Agilent.SA.VsaImplementation.EnumDisplayNameAttribute.DisplayName">
            <summary>
            Gets the display name.
            </summary>
        </member>
        <member name="P:Agilent.SA.VsaImplementation.EnumDisplayNameAttribute.DisplayGroup">
            <summary>
            Gets or sets the name of a group that the enumeration value should be grouped in.
            </summary>
        </member>
        <member name="P:Agilent.SA.VsaImplementation.EnumDisplayNameAttribute.ExcludeFromDisplay">
            <summary>
            Gets or sets a value indicating whether to hide the enumeration value in a GUI.
            </summary>
        </member>
        <member name="P:Agilent.SA.VsaImplementation.EnumDisplayNameAttribute.SortOrder">
            <summary>
            Gets or sets a number that indicates what order to show the enumeration value in relative to other enumeration values.  Lower numbers are shown first.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.AcpAdjacentChannel">
            <summary>
            The AcpAdjacentChannel class represents one adjacent channel in an ACP calculation 
            (<see cref="P:Agilent.SA.Vsa.MarkerCollection.AcpAdjacentChannels"/>). 
            </summary>
            <remarks>
            	<para>The AcpAdjacentChannel actually represents 2 bands; an upper and a lower band that is offset from the reference channel.</para>
            	<para>To get the result of an ACP measurement, query the ACP Summary table using the <see cref="M:Agilent.SA.Vsa.MeasurementData.Summary(System.String)"/> method as described in <see cref="!:DotNetApi-HowToProgrammaticallyQuerySummaryTables">How To Programmatically
            Query Summary Tables</see>.</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.AcpAdjacentChannel.IsEnable">
            <summary>
            Gets or sets a value indicating whether this adjacent channel power is calculated.  Obsolete.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.AcpAdjacentChannel.Enabled">
            <summary>Gets or sets a value indicating whether this adjacent channel power is calculated.</summary>
            <version>15.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.AcpAdjacentChannel.Offset">
            <summary>Gets or sets the offset, in Hz, from the center frequency for this adjacent channel.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.AcpAdjacentChannel.BW">
            <summary>Gets or sets the bandwidth for this adjacent channel.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.AcpAdjacentChannel.Alpha">
            <summary>Gets or sets the RRC filter alpha for this adjacent channel.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.AcpAdjacentChannelCollection">
            <summary>The AcpAdjacentChannelCollection class contains a collection of <see cref="T:Agilent.SA.Vsa.AcpAdjacentChannel"/> objects. </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.AcpAdjacentChannelCollection.IsRrcShape">
            <summary>Gets or sets a value indicating whether the ACP filters for the adjacent channels have an RRC shape 
            (true) or a rectangular shape (false).</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.Application">
            <summary>
            The Application class the "top-level" class for the Keysight 89600 VSA software application.
            </summary>
            <remarks>
            	<para>All features of the 89600 VSA are accessed from this class. For example, to access the contents of a trace, you will need to have access to an instance of
            the Application class.  For example, through a variable named "app", and then you could use the following syntax:</para>
            	<para>
            		<span class="code">app.Display.Traces.SelectedItem.MeasurementData</span>
            	</para>
            	<para>Programmatic clients obtain a handle to an instance of this class using the static <see cref="M:Agilent.SA.Vsa.ApplicationFactory.Create">ApplicationFactory.Create()</see> method.</para>
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Application.Preset">
            <summary>Set VSA state to default values.</summary>
            <remarks>Sets the measurement setup, display appearance, and state definitions to their default values. This is the same as clicking <strong>File &gt; Preset &gt;
            Preset All</strong> from the application's main menu.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Application.Quit">
            <summary>
            Exit the application.
            </summary>
            <remarks>
            This method causes the application to exit. The current setup is saved in the Current.setx file,
            and the hardware configuration is saved as well. The contents of unsaved data registers is lost.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Application.RecallDemo(System.String)">
            <summary>
            Recall the demo from the directory containing the file.
            </summary>
            <param name="fileName">Specifies a file name in the demo directory to recall demo files. The
            file can be an HTML file (with the .HTM extension), a setup file (with the .SETX or .SET extension),
            or a recording file (with the .SDF extension).</param>
            <remarks>
            	<para>This method allows a setup file, a recording, and optionally a description of the setup to be recalled in a single operation. All files must reside in the
            same directory and have the same base name. For example, when the setup file is called "sample.setx", then the recording file must be called "sample.sdf" and
            the description file called "sample.htm".</para>
            	<para>The recording is recalled first, followed by the setup file and finally the description file. The description file, when present, is displayed in a separate
            browser window.</para>
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Application.RecallSetup(System.String)">
            <summary>Recalls a VSA setup file the specified path, replacing the existing measurements.</summary>
            <param name="fileName">The path to the setup file to recall. Supported files include Keysight 89600 VSA Software setup files (.SETX extension) and Agilent 89601A setup files (.SET
            extension).</param>
            <remarks>This method overwrites the current VSA measurement setup with the one specified in the recalled file.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Application.RecallSetup(System.String,System.Boolean)">
            <summary>Recalls a VSA setup file from disk, possibly appending the measurements to the existing set of measurements.</summary>
            <version>15.00</version>
            <param name="fileName">The name of the file to recall. Supported files include Keysight 89600 VSA Software
            setup files (.SETX extension) and Agilent 89601A setup files (.SET extension).</param>
            <param name="append">When 'true', the setup information in the specified file is appended to the existing setup. Otherwise, when 'false', the setup information in the file replaces
            the existing setup.</param>
            <remarks>This method appends the setup information contained in the specified file to the existing setup if the <paramref name="append"/> parameter is 'true'.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Application.RecallSetup(System.String,System.Boolean,System.Boolean)">
            <summary>Recalls a VSA setup file from disk, possibly appending the measurements it contains to the existing set of measurements.</summary>
            <version>15.00</version>
            <param name="fileName">The name of the file to recall. Supported files include Keysight 89600 VSA Software
            setup files (.SETX extension) and Agilent 89601A setup files (.SET extension).</param>
            <param name="append">When 'true', the setup information in the specified file is appended to the existing setup. Otherwise, when 'false', the setup information in the file replaces
            the existing setup.</param>
            <param name="shareInput">This parameter is ignored unless <paramref name="append"/> is true and the setup file being recalled contains only a single measurement. When both these conditions are true and
            <paramref name="shareInput"/> is also 'true', the <see cref="P:Agilent.SA.Vsa.Measurement.IsShareEnabled"/> property of the currently selected measurement and the measurement being recalled are both set to
            'true', resulting in both measurements sharing the same analyzer or recording file.</param>
            <remarks>
            This method appends the setup information contained in the specified file to the existing setup if the
            <paramref name="append"/> parameter is 'true'.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Application.RecallSetup(System.String,System.Guid[])">
            <summary>Recalls a VSA setup file the specified path, replacing the existing measurements.</summary>
            <param name="fileName">The path to the setup file to recall. Supported files include Keysight 89600 VSA Software setup files (.SETX extension)
            and Agilent 89601A setup files (.SET extension).</param>
            <param name="requestedPropertyBags">One or more GUID's identifying the property bag(s) to be retrieved from the
            setup file. If <see cref="F:System.Guid.Empty"/> is supplied as an argument, all property bags contained in the setup file
            are returned.</param>
            <remarks>This method overwrites the current VSA measurement setup with the one specified in the recalled file.</remarks>
            <returns>This method returns a collection of dictionary objects that were persisted with the VSA setup information.
            Each dictionary is identified by a GUID to allow a client to identify its property bag(s) even if others are
            present.</returns>
            <version>17.00</version>
        </member>
        <member name="M:Agilent.SA.Vsa.Application.SaveSetup(System.String)">
            <summary>Saves the current VSA setup to a file.</summary>
            <param name="fileName">The path where you want the setup file to be saved. This file must have the .SETX extension.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.Application.SaveSetup(System.String,Agilent.SA.Vsa.Measurement)">
            <summary>Saves the measurement setup for the indicated measurement to a VSA setup file.</summary>
            <version>15.00</version>
            <param name="fileName">The path where you want the setup file to be saved. This file must have the .SETX extension.</param>
            <param name="measurementToSave">The measurement whose state is to be saved to disk.</param>
            <remarks>
            This method allows the caller to deconstruct a multi-measurement setup into a set of single measurement
            setup files that can be used to assemble other multi-measurement setups.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Application.SaveSetup(System.String,System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.Guid,System.Collections.Generic.IDictionary{System.String,System.Object}}})">
            <summary>Saves the measurement setup for the indicated measurement to a VSA setup file.</summary>
            <param name="fileName">The path where you want the setup file to be saved. This file must have the .SETX extension.</param>
            <param name="propertyBags">A collection of dictionaries whose contents are to be persisted to the VSA .SETX file.</param>
            <remarks>
            Each dictionary in the supplied collection is a set of string-object pairs, where the object can be any value type or array
            of value type. Each dictionary needs to be identified by a unique GUID, which allows a given client to retrieve the appropriate
            dictionary from the setup file./>
            </remarks>
            <version>17.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Application.Build">
            <summary>
            Gets a string describing the software revision.
            </summary>
            <remarks>
            	<para>The string is of the form M.N[_Name], where M is the (possibly multi-digit) major number, N is the minor number, and the optional "_Name" identifies special
            releases (Beta releases or other special builds). This information is also shown on the splash screen at startup time as well as on the <strong>Help &gt;
            About</strong> dialog.</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Application.DataRegisters">
            <summary>
            Gets the collection of <see cref="T:Agilent.SA.Vsa.DataRegister"/> objects.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Application.Display">
            <summary>
            Gets the <see cref="P:Agilent.SA.Vsa.Application.Display"/> object.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Application.Hardware">
            <summary>
            Gets the <see cref="P:Agilent.SA.Vsa.Application.Hardware"/> object.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Application.Is64Bit">
            <summary>
            Gets a value indicating whether the process is a 64-bit process (true) or a 32-bit process (false).
            </summary>
            <version>15.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Application.IsExitEnabled">
            <summary>
            Gets or sets a value indicating whether exiting the application from the User Interface is enabled.
            </summary>
            <remarks>
            	<para>This property determines what happens when the user attempts to exit the application using either the <strong>File &gt; Exit</strong> menu button or the
            Windows Close button. This is significant in the case where this application was started by another via the VSA's .NET API.</para>
            	<para>When IsExitEnabled is true (default), then exiting this application via <strong>File &gt; Exit</strong> or Windows Close button will cause the
            application to shut down completely.</para>
            	<para>When IsExitEnabled is set to false, exiting the application via <strong>File &gt; Exit</strong> or Windows Close button will simply hide the
            application main window, toggling the <see cref="P:Agilent.SA.Vsa.Application.IsVisible"/> property to false. The application will continue to run and be available to the entity that started the VSA
            programmatically. Setting the <see cref="P:Agilent.SA.Vsa.Application.IsVisible"/> property to true again will cause the main window to reappear.</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Application.IsMessageEnabled">
            <summary>Gets or sets a value indicating whether application message dialogs should be shown.</summary>
            <remarks>Determines whether the message dialogs generated by the application should be displayed. If the application is being automated by another application, you may
            not want the application to stall while waiting for the user to press OK for a dialog message. Setting this property to false inhibits any such dialog from
            being displayed. The most common type of message dialog shown is to indicate measurement or calibration errors. The
            <see cref="P:Agilent.SA.Vsa.Status.MeasurementError">Status.MeasurementError</see> property can be read to retrieve these errors.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Application.IsVisible">
            <summary>
            Gets or sets a value indicating whether the main application window is visible.
            </summary>
            <remarks>
            	<para>It is useful to hide the analyzer window when you are programming and do not need to see any displayed data or do not want a user to access the analyzer's
            user interface.</para>
            	<para>When you create the application object programmatically, IsVisible defaults to false. If you start the application by running the executable (e.g. by
            double-clicking the program shortcut), IsVisible defaults to true.</para>
            	<para>For the <see cref="T:Agilent.SA.Vsa.Spectrogram"/> object, this property sets or gets whether the spectrogram is turned on (true = on, false = off). The data in the spectrogram is
            cleared when the spectrogram is turned off.</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Application.Licenses">
            <summary>
            Gets the collection of <see cref="T:Agilent.SA.Vsa.License"/> objects.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Application.LimitTests">
            <summary>
            Gets the collection of <see cref="T:Agilent.SA.Vsa.LimitTest"/> objects.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Application.Macros">
            <summary>
            Gets the collection of <see cref="T:Agilent.SA.Vsa.Macro"/> objects.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Application.MathFunctions">
            <summary>
            Gets the collection of <see cref="T:Agilent.SA.Vsa.MathFunction"/> objects.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Application.Measurements">
            <summary>
            Gets the collection of <see cref="T:Agilent.SA.Vsa.Measurement"/> objects.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Application.Sources">
            <summary>Gets the collection of source control objects.</summary>
            <version>15.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Application.TcpPort">
            <summary>
            Gets the TCP port number through which the remote API is connected.
            </summary>
            <remarks>
            This information is also displayed in the boot log. The boot log is displayed in the splash
            window at startup and is available from the About dialog after startup.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Application.Title">
            <summary>Gets or sets the user-customizable part of the main application window's title.</summary>
            <remarks>
            	<para>The customizable part of the title is the text after the first dash (-). The part of the title before the dash shows the measurement type of the currently
            selected measurement (shown in the dropdown in the toolbar).</para>
            	<para>If the title is an empty string, then the VSA will display the default title.</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Application.Version">
            <summary>
            Gets a <see cref="P:Agilent.SA.Vsa.Application.Version"/> object representing the build information for the application.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Application.WindowHandle">
            <summary>
            Gets the Microsoft Windows handle of the main application window.
            </summary>
            <remarks>
            	<para>This property returns the Microsoft Windows handle (the hWnd) of the main application window. You can use this value in any Win32 API call to manipulate the
            window. For example, you may want to call a Win32 function to raise, lower, resize, or minimize the application window.</para>
            	<para>Note that until the application has been made visible, there is no window and hence no window handle. This property will return 0 until such time that the
            application has been made visible.</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Application.ScpiServer">
            <summary>
            Gets a reference to the SCPI Server.
            </summary>
            <version>18.50</version>
        </member>
        <member name="T:Agilent.SA.Vsa.AverageStyle">
            <summary>
            Specifies the type of averaging to be performed by the measurement.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.AverageStyle.Off">
            <summary>
            Specifies no averaging.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.AverageStyle.Rms">
            <summary>
            Specifies RMS (Video) averaging.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.AverageStyle.RmsExponential">
            <summary>
            Specifies RMS (Video) exponential averaging.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.AverageStyle.Time">
            <summary>
            Specifies Time averaging.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.AverageStyle.TimeExponential">
            <summary>
            Specifies Time Exponential averaging.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.AverageStyle.ContinuousPeakHold">
            <summary>
            Specifies Continuous Peak-hold averaging.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.AverageStyle.PeakHold">
            <summary>
            Specifies Peak-hold averaging.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.Average">
            <summary>The Average object provides access to the VSA's averaging features.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Average.Count">
            <summary>
            Gets or sets the number of averages.
            </summary>
            <remarks>The Count property sets or returns the number of measurement sweeps (1 to 99,999) to be used in calculating an average.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Average.IsFast">
            <summary>
            Gets or sets a value indicating whether fast averaging is enabled.
            </summary>
            <remarks>Fast averaging allows you to optimize speed of averaging measurements by not displaying every average calculated. Use the <see cref="P:Agilent.SA.Vsa.Average.UpdateRate"/> property to set how
            often to update the traces with averaged measurement results.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Average.IsRepeat">
            <summary>
            Gets or sets a value indicating whether the averaged measurement is repeated when the average is complete.
            </summary>
            <remarks>
            Determine whether the average measurement should be repeated or stopped. This property only applies to averaging
            styles that normally terminate after the stipulated number of averages (like <see cref="F:Agilent.SA.Vsa.AverageStyle.Rms">RMS Video</see>).
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Average.Style">
            <summary>
            Gets or sets the average style.
            </summary>
            <remarks>
            Determines the type of averaging to be performed by the measurement as described in <see cref="T:Agilent.SA.Vsa.AverageStyle"/>.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Average.UpdateRate">
            <summary>
            Gets or sets the update rate when fast averaging.
            </summary>
            <remarks>
            	<para>Determine the fast average update rate, which specifies how many averages to complete before updating the traces in the VSA window.</para>
            	<para>The setting of UpdateRate only affects fast averaging. For example, if you specify an update rate of 5, the VSA updates the display once every 5 averages.
            It can be beneficial to update the display less frequently for faster operation.</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Average.IsUpdateRateCount">
            <summary>
            Gets or sets a value indicating whether the <see cref="P:Agilent.SA.Vsa.Average.UpdateRate">update rate</see> is the same as the <see cref="P:Agilent.SA.Vsa.Average.Count">average count</see> (number of measurements in the average).
            </summary>
            <remarks>
            If this is set to true, then when the <see cref="P:Agilent.SA.Vsa.Average.Count"/> value is changed, the
            <see cref="P:Agilent.SA.Vsa.Average.UpdateRate"/> is changed to the same value.
            </remarks>
        </member>
        <member name="T:Agilent.SA.Vsa.CustomStepPositionType">
            <summary>
            Specifies where the custom step is to be positioned in the measurement processing
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.CustomStepPositionType.AfterAcquire">
            <summary>Place the step after the physical channels data acquisition at the beginning of the measurement section of the measurement list.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.CustomStepPositionType.AfterChannelMap">
            <summary>Do not use. Reserved for Future Use.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.CustomStepPositionType.AtInputNames">
            <summary>Place the step at a position in the measurement list determined by its InputNames.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.CustomStepPositionType.AfterMeasure">
            <summary>Place the step at the end of the measurement section (but before the display section) of the measurement list.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.CustomStepStatusCode">
            <summary>
            Specifies the success results for a step.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.CustomStepStatusCode.Ok">
            <summary>The measurement should process the rest of the measurement list.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.CustomStepStatusCode.MeasurementDone">
            <summary>The measurement should pause at the end of the measurement list.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.CustomStepStatusCode.DoUpdate">
            <summary>The measurement should update at the end of the measurement list.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.CustomStepStatusCode.UpdateNow">
            <summary>The measurement should update now and not process the rest of the measurement list.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.CustomStepStatusCode.AverageLoop">
            <summary>The measurement should not process the display part of the measurement list.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.CustomStepNamingEventArgs">
            <summary>
            Implements arguments for the custom step when updated valid DataNames are available.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.CustomStepNamingEventArgs.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.CustomStepNamingEventArgs"/> class.
            </summary>
            <param name="dataNames">The list of valid DataNames for this measurement.</param>
        </member>
        <member name="P:Agilent.SA.Vsa.CustomStepNamingEventArgs.DataNames">
            <summary>
            Gets the list of valid DataNames for this measurement.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.CustomStepConnectingEventArgs">
            <summary>
            Implements arguments for the custom step connecting (i.e. just added to the measurement list) event.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.CustomStepExecutingEventArgs">
            <summary>
            Implements arguments for the custom step executing event.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.CustomStepExecutingEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.CustomStepExecutingEventArgs"/> class.
            </summary>
            <param name="isRecomputing">Indicates whether the step is recomputing.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.CustomStepExecutingEventArgs.#ctor(System.Boolean,Agilent.SA.Vsa.StateDictionary)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.CustomStepExecutingEventArgs"/> class.
            </summary>
            <param name="isRecomputing">Indicates whether the step is recomputing.</param>
            <param name="state">The measurement state.</param>
        </member>
        <member name="P:Agilent.SA.Vsa.CustomStepExecutingEventArgs.State">
            <summary>
            Gets the measurement state.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.CustomStepExecutingEventArgs.IsRecomputing">
            <summary>
            Gets or sets a value indicating whether the step is recomputing.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.CustomStepExecutingEventArgs.StatusCode">
            <summary>
            Gets or sets a value indicating the success result of the step.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.CustomStepUpdatingEventArgs">
            <summary>
            Implements arguments for the custom step updating event.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.CustomStepUpdatingEventArgs.#ctor">
            <summary>
            Initializes a new instance of the CustomStepUpdatingEventArgs class.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.CustomStepUpdatingEventArgs.#ctor(Agilent.SA.Vsa.StateDictionary)">
            <summary>
            Initializes a new instance of the CustomStepUpdatingEventArgs class.
            </summary>
            <param name="state">The measurement state.</param>
        </member>
        <member name="P:Agilent.SA.Vsa.CustomStepUpdatingEventArgs.State">
            <summary>
            Gets the measurement state.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.CustomStepUpdatingRevPassEventArgs">
            <summary>
            Implements arguments for the custom step reverse pass event.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.CustomStepUpdatingPass1EventArgs">
            <summary>
            Implements arguments for the custom step pass 1 event.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.CustomStepUpdatingPass1EventArgs.#ctor">
            <summary>
            Initializes a new instance of the CustomStepUpdatingPass1EventArgs class.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.CustomStepUpdatingPass1EventArgs.#ctor(Agilent.SA.Vsa.StateDictionary)">
            <summary>
            Initializes a new instance of the CustomStepUpdatingPass1EventArgs class.
            </summary>
            <param name="state">The measurement state.</param>
        </member>
        <member name="P:Agilent.SA.Vsa.CustomStepUpdatingPass1EventArgs.State">
            <summary>
            Gets the measurement state.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.CustomStepResettingAverageEventArgs">
            <summary>
            Implements arguments for the custom step resetting average event.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.CustomStepLimitingEventArgs">
            <summary>
            Implements arguments for the custom step limiting event.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.CustomStepLimitingEventArgs.#ctor">
            <summary>
            Initializes a new instance of the CustomStepLimitingEventArgs class.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.CustomStepLimitingEventArgs.#ctor(Agilent.SA.Vsa.StateDictionary)">
            <summary>
            Initializes a new instance of the CustomStepLimitingEventArgs class.
            </summary>
            <param name="state">The measurement state.</param>
        </member>
        <member name="P:Agilent.SA.Vsa.CustomStepLimitingEventArgs.State">
            <summary>
            Gets the measurement state.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.ICustomStep">
            <summary>
            Interface for a custom measurement step.  Internal use only.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.ICustomStep.Input(System.Int32)">
            <summary>
            Gets the input data for a specified input.
            </summary>
            <param name="inx">Index of the input.</param>
            <returns>The data for the specified input.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.ICustomStep.Output(System.Int32)">
            <summary>
            Gets the output data for a specified output.
            </summary>
            <param name="inx">Index of the output.</param>
            <returns>The data for the specified output.</returns>
        </member>
        <member name="P:Agilent.SA.Vsa.ICustomStep.IsEnable">
            <summary>
            Gets or sets a value indicating whether the step is enabled.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.ICustomStep.Enabled">
            <summary>
            Gets or sets a value indicating whether the step is enabled.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.ICustomStep.Name">
            <summary>
            Gets or sets the name of the step.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.ICustomStep.Position">
            <summary>
            Gets or sets how to determine the position of this CustomStep in the measurement list.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.ICustomStep.InputCount">
            <summary>
            Gets or sets the number of inputs.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.ICustomStep.OutputCount">
            <summary>
            Gets or sets the number of outputs.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.ICustomStep.OutputNames">
            <summary>
            Gets or sets the names of the outputs.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.ICustomStep.InputNames">
            <summary>
            Gets or sets the names of the inputs.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.ICustomStep.IsConnect">
            <summary>
            Gets or sets a value indicating whether the step is connected.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.ICustomStep.IsConnected">
            <summary>
            Gets or sets a value indicating whether the step is connected.
            </summary>
        </member>
        <member name="E:Agilent.SA.Vsa.ICustomStep.Naming">
            <summary>
            Event just before the step is connected to the measurement list (before its InputNames are used).
            </summary>
        </member>
        <member name="E:Agilent.SA.Vsa.ICustomStep.Connecting">
            <summary>
            Event that indicates the step is connecting to the measurement list.
            </summary>
        </member>
        <member name="E:Agilent.SA.Vsa.ICustomStep.Executing">
            <summary>
            Event that indicates the step is executing.
            </summary>
        </member>
        <member name="E:Agilent.SA.Vsa.ICustomStep.Updating">
            <summary>
            Event that indicates the step is updating.
            </summary>
        </member>
        <member name="E:Agilent.SA.Vsa.ICustomStep.UpdatingRevPass">
            <summary>
            Event that indicates the step is updating reverse pass.
            </summary>
        </member>
        <member name="E:Agilent.SA.Vsa.ICustomStep.UpdatingPass1">
            <summary>
            Event that indicates the step is updating pass 1.
            </summary>
        </member>
        <member name="E:Agilent.SA.Vsa.ICustomStep.ResettingAverage">
            <summary>
            Event that indicates the step is resetting.
            </summary>
        </member>
        <member name="E:Agilent.SA.Vsa.ICustomStep.Limiting">
            <summary>
            Event that indicates the step is limiting.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.CustomStepEventWrapper">
            <summary>
            Implements a wrapper for an object that implements the <see cref="T:Agilent.SA.Vsa.ICustomStep"/> interface.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.CustomStepEventWrapper.#ctor(Agilent.SA.Vsa.ICustomStep)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.CustomStepEventWrapper"/> class.
            </summary>
            <param name="obj">An object to wrap that implements <see cref="T:Agilent.SA.Vsa.ICustomStep"/>.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.CustomStepEventWrapper.OnNaming(Agilent.SA.Vsa.CustomStepNamingEventArgs,System.Object)">
            <summary>
            Raise a Naming event.
            </summary>
            <param name="e">Argument for the event.</param>
            <param name="sender">The object raising the event.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.CustomStepEventWrapper.OnConnecting(Agilent.SA.Vsa.CustomStepConnectingEventArgs,System.Object)">
            <summary>
            Raise an connecting event.
            </summary>
            <param name="e">Argument for the event.</param>
            <param name="sender">The object raising the event.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.CustomStepEventWrapper.OnExecuting(Agilent.SA.Vsa.CustomStepExecutingEventArgs,System.Object)">
            <summary>
            Raise an executing event.
            </summary>
            <param name="e">Argument for the event.</param>
            <param name="sender">The object raising the event.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.CustomStepEventWrapper.OnLimiting(Agilent.SA.Vsa.CustomStepLimitingEventArgs,System.Object)">
            <summary>
            Raise an limiting event.
            </summary>
            <param name="e">Argument for the event.</param>
            <param name="sender">The object raising the event.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.CustomStepEventWrapper.OnUpdating(Agilent.SA.Vsa.CustomStepUpdatingEventArgs,System.Object)">
            <summary>
            Raise an updating event.
            </summary>
            <param name="e">Argument for the event.</param>
            <param name="sender">The object raising the event.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.CustomStepEventWrapper.OnUpdatingRevPass(Agilent.SA.Vsa.CustomStepUpdatingRevPassEventArgs,System.Object)">
            <summary>
            Raise an updating reverse event event.
            </summary>
            <param name="e">Argument for the event.</param>
            <param name="sender">The object raising the event.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.CustomStepEventWrapper.OnUpdatingPass1(Agilent.SA.Vsa.CustomStepUpdatingPass1EventArgs,System.Object)">
            <summary>
            Raise an updating pass 1 event.
            </summary>
            <param name="e">Argument for the event.</param>
            <param name="sender">The object raising the event.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.CustomStepEventWrapper.OnResettingAverage(Agilent.SA.Vsa.CustomStepResettingAverageEventArgs,System.Object)">
            <summary>
            Raise a resetting average event.
            </summary>
            <param name="e">Argument for the event.</param>
            <param name="sender">The object raising the event.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.CustomStepEventWrapper.InitializeLifetimeService">
            <summary>
            Controls the lifetime policy for this instance.
            </summary>
            <returns>Returns null.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.CustomStepEventWrapper.Dispose">
            <summary>
            Release allocated resources.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.CustomStepEventWrapper.Dispose(System.Boolean)">
            <summary>
            Release allocated resources.
            </summary>
            <param name="disposing">Use true if called by user code.  False will be used when called by the
            finalize (destructor) method.</param>
        </member>
        <member name="E:Agilent.SA.Vsa.CustomStepEventWrapper.Naming">
            <summary>
            Indicates when the custom step gets valid DataNames.
            </summary>
        </member>
        <member name="E:Agilent.SA.Vsa.CustomStepEventWrapper.Connecting">
            <summary>
            Indicates when the custom step is connecting.
            </summary>
        </member>
        <member name="E:Agilent.SA.Vsa.CustomStepEventWrapper.Executing">
            <summary>
            Indicates when the custom step is executing.
            </summary>
        </member>
        <member name="E:Agilent.SA.Vsa.CustomStepEventWrapper.Limiting">
            <summary>
            Indicates when the custom step is updating.
            </summary>
        </member>
        <member name="E:Agilent.SA.Vsa.CustomStepEventWrapper.Updating">
            <summary>
            Indicates when the custom step is updating.
            </summary>
        </member>
        <member name="E:Agilent.SA.Vsa.CustomStepEventWrapper.UpdatingRevPass">
            <summary>
            Indicates when the custom step is updating reverse pass.
            </summary>
        </member>
        <member name="E:Agilent.SA.Vsa.CustomStepEventWrapper.UpdatingPass1">
            <summary>
            Indicates when the custom step is updating pass 1.
            </summary>
        </member>
        <member name="E:Agilent.SA.Vsa.CustomStepEventWrapper.ResettingAverage">
            <summary>
            Indicates when the custom step is resetting average.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.CustomStepCollection">
            <summary>
            Contains a collection of custom steps.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.CustomStepCollection.Contains(Agilent.SA.Vsa.ICustomStep)">
            <summary>
            Gets a value indicating whether the specified custom step object is contained in the collection.
            </summary>
            <param name="item">A reference to a custom step object to find in the collection.</param>
            <returns>true if the object exists in the collection; otherwise, false</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.CustomStepCollection.Create(System.String)">
            <summary>
            Creates a new custom step with the specified name.
            </summary>
            <param name="name">Name for the custom step.</param>
            <returns>A reference to the created custom step.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.CustomStepCollection.Create">
            <summary>
            Creates a new ICustomStep.
            </summary>
            <returns>A handle to the new ICustomStep.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.CustomStepCollection.Remove(Agilent.SA.Vsa.ICustomStep)">
            <summary>
            Remove a ICustomStep from the collection.
            </summary>
            <param name="item">ICustomStep to remove from the collection</param>
            <returns>True, if the ICustomStep was removed from the collection.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.CustomStepCollection.RemoveAt(System.Int32)">
            <summary>
            Remove a ICustomStep from the collection.
            </summary>
            <param name="index">Zero-based index of ICustomStep to remove from the collection</param>
            <returns>True, if the ICustomStep was removed from the collection.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.CustomStepCollection.MoveTo(System.Int32,System.Int32)">
            <summary>Move the specified ICustomStep to another position in the list.</summary>
            <param name="indexFrom">Current or "old" position of the ICustomStep.</param>
            <param name="indexTo">Position the ICustomStep is to be moved to.</param>
            <remarks>
            The indexes inxFrom and inxTo represent positions as they exist before moving the ICustomStep. 
            They must be in the range of 0 to Count-1. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.CustomStepCollection.Item(System.String)">
            <summary>
            Gets a reference to the custom step in the collection with the specified name.
            </summary>
            <param name="name">The name of the custom step to find.</param>
            <returns>A reference to the custom step.</returns>
        </member>
        <member name="T:Agilent.SA.Vsa.DataRegisterResetType">
            <summary>A data template for the <see cref="M:Agilent.SA.Vsa.DataRegister.Reset(Agilent.SA.Vsa.DataRegisterResetType)"/>.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DataRegisterResetType.Time">
            <summary>Time-domain data</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DataRegisterResetType.Spectrum">
            <summary>Frequency-domain (Spectrum) data</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DataRegisterResetType.Summary">
            <summary>Summary table</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.DataRegister">
            <summary>A DataRegister contains a saved version of <see cref="P:Agilent.SA.Vsa.Trace.MeasurementData">measurement data</see>.</summary>
            <remarks>
            	<para>The software provides 20 data registers for storing and retrieving trace data. Data registers are stored in active memory for the current application
            session. The data registers are cleared when the application is closed. You can perform the following operations with data registers:</para>
            	<list type="bullet">
            		<item>Copy a trace into a data register</item>
            		<item>Recall a saved trace (from disk) into a data register</item>
            		<item>Display the contents of a data register</item>
            		<item>Remove a data register</item>
            	</list>
            	<para></para>
            	<para>The DataRegister object represents one of the data registers in the DataRegisters collection.<br/>
            There are eight data registers, D1 through D20. Each one holds a complete trace copied from a trace or recalled from a file. You can also determine whether a
            data register contains any data, and remove the register contents from memory.</para>
            	<para>The <see cref="M:Agilent.SA.Vsa.Trace.CopyToDataRegister(System.Int32)"/> and <see cref="M:Agilent.SA.Vsa.Trace.CopyToDataRegister(System.String)"/> methods copy trace data to a data register (by index or by name). The
            <see cref="M:Agilent.SA.Vsa.Trace.SaveFile(System.String,System.String,System.Boolean)"/> method saves data to a file in a number of formats, including text, MATLAB, and SDF (binary). The <see cref="M:Agilent.SA.Vsa.DataRegister.RecallFile(System.String,System.String)"/> method recalls a
            file into a data register.</para>
            	<para>A data register is selected for display on a trace by using the <see cref="P:Agilent.SA.Vsa.Trace.DataName"/> property. The list of available data names for data registers is returned
            by the <see cref="P:Agilent.SA.Vsa.TraceCollection.DataNamesDataRegister"/> property. The <see cref="P:Agilent.SA.Vsa.Trace.DataName"/> for a data register is the data register 1-based index prefaced with "D".</para>
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.DataRegister.RecallFile(System.String,System.String)">
            <summary>Recall the specified file into the data register. </summary>
            <param name="fileName">Specifies the file path.</param>
            <param name="format">Specifies the file format.</param>
            <remarks>
            	<para>This operation overwrites the previous contents of the data register.</para>
            	<para>Supported File Formats:</para>
            	<list type="table">
            		<listheader>
            			<term>Format</term>
            			<description>Description</description>
            		</listheader>
            		<item>
            			<term>"CSV"</term>
            			<description>CSV (Comma delimited) [*.csv]</description>
            		</item>
            		<item>
            			<term>"MAT"</term>
            			<description>MAT-File [*.mat]</description>
            		</item>
            		<item>
            			<term>"MAT7"</term>
            			<description>MAT-File (HDF5) [*.mat, *.hdf, *.h5]</description>
            		</item>
            		<item>
            			<term>"SDF"</term>
            			<description>SDF (Fast) [*.sdf, *.dat]</description>
            		</item>
            		<item>
            			<term>"TEXT"</term>
            			<description>Text (Tab delimited) [*.txt]</description>
            		</item>
            	</list>
            	<para></para>
            	<para>Note:<br/>
            MAT may be used instead of MAT7 for recall trace/recording (the matlab file format is auto detected for recall).</para>
            	<para>When the format is an empty string, then the application automatically determines the file format by looking at the file suffix. If this is not sufficient,
            then the file is scanned to determine the format. When the format cannot be determined or you specified an unknown format, then an error is raised.</para>
            	<para>For more information about file types, see the "Supported File Formats" topic in the VSA help.</para>
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.DataRegister.Reset(Agilent.SA.Vsa.DataRegisterResetType)">
            <summary>Initialize the data register to look like a time record, a spectrum, or a summary table.</summary>
            <param name="resetType">The data template specification.</param>
            <remarks>
            This method is useful to initialize the data register contents and then use the <see cref="P:Agilent.SA.Vsa.DataRegister.MeasurementData"/> object
            to modify the <see cref="T:Agilent.SA.Vsa.StateDictionary"/> or the data for this data register.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.DataRegister.Remove">
            <summary>Remove the contents of this data register.</summary>
            <remarks>
            While a data register may be loaded from a file, the remove method has no effect on the file; 
            it just removes the data register contents from memory. 
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.DataRegister.Update">
            <summary>Notify the measurement that this data register has been changed.</summary>
            <remarks>When you modify the data in this data register, the measurement is not notified of these changes until you call this method.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.DataRegister.IsEmpty">
            <summary>Gets a value indicating whether the data register contains any data.</summary>
            <remarks>
            The <see cref="M:Agilent.SA.Vsa.DataRegister.RecallFile(System.String,System.String)"/>, <see cref="M:Agilent.SA.Vsa.Trace.CopyToDataRegister(System.Int32)"/>, and <see cref="M:Agilent.SA.Vsa.Trace.CopyToDataRegister(System.String)"/>
            methods are used to load data into data registers. 
            The <see cref="M:Agilent.SA.Vsa.DataRegister.Remove"/> and <see cref="M:Agilent.SA.Vsa.DataRegisterCollection.Clear"/> methods are used to erase data registers. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.DataRegister.MeasurementData">
            <summary>Gets the measurement data (contains the unformatted measurement data) for this data register.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.DataRegister.Name">
            <summary>Gets the name ("D1" through "D20") for this data register.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.DataRegisterCollection">
            <summary>The DataRegisterCollection class contains a collection of <see cref="T:Agilent.SA.Vsa.DataRegister"/> objects. </summary>
            <remarks>
            	<para></para>
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.DataRegisterCollection.Clear">
            <summary>Erase the contents of all of the data registers.</summary>
            <remarks>The Clear method removes the contents of all the data registers. While data registers may be loaded from files, the clear method has no effect on the files; it
            just removes the data register contents from memory.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.DataRegisterCollection.Item(System.String)">
            <summary>
            Returns the named data register from the collection.
            </summary>
            <param name="name">The name of the data register to retrieve ("D1" through "D20").</param>
            <returns>The named data register, or null if no data register of the supplied name exists.</returns>
            <example>
            	<code title="Example" description="" lang="CS">
            DataRegister d2 = app.DataRegisters["D2"];</code>
            </example>
        </member>
        <member name="P:Agilent.SA.Vsa.DataRegisterCollection.Names">
            <summary>Gets a list of all of the data register names.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.DataRegisterCollection.UsedNames">
            <summary>Gets a list of all of data register names of data registers that contain data.</summary>
            <remarks>
            A data register is empty if <see cref="P:Agilent.SA.Vsa.DataRegister.IsEmpty"/> is true.
            </remarks>
        </member>
        <member name="T:Agilent.SA.Vsa.HardwareInstrument">
            <summary>
            Class with information for an instrument.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.HardwareInstrument.Id">
            <summary>
            Gets the InstrumentId of the instrument.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.HardwareInstrument.Model">
            <summary>
            Gets the Model number of the instrument.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.HardwareInstrument.DriverRevision">
            <summary>
            Gets the revision of the software driver used to communicate with the instrument.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.HardwareInstrument.FirmwareRevision">
            <summary>
            Gets the revision of the firmware loaded in the instrument.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.HardwareInstrument.SerialNumber">
            <summary>
            Gets the serial number of the instrument.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.HardwareInstrument.Name">
            <summary>
            Gets a descriptive name for the instrument.
            </summary>
            <remarks>This is for display purposes only.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.HardwareInstrument.Slot">
            <summary>
            Gets the slot number (if any) of the instrument.
            </summary>
            <remarks>
            If the instrument is part of a modular system, this value specifies the slot that the 
            instrument is in. Otherwise, -1 is returned.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.HardwareInstrument.Manufacturer">
            <summary>
            Gets the name of the manufacturer of the instrument.
            </summary>
            <version>15.00</version>
        </member>
        <member name="T:Agilent.SA.Vsa.HardwareInstrumentCollection">
            <summary>
            Class to contain a list of instruments in its HardwareGroup
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.MeasurementDataStatus">
            <summary>Specifies the trace indicator messages.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MeasurementDataStatus.None">
            <summary>Indicates no status messages.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MeasurementDataStatus.NoData">
            <summary>Indicates no valid data associated with this trace.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MeasurementDataStatus.Questionable">
            <summary>Indicates data is questionable relative to the current setup.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MeasurementDataStatus.Overload">
            <summary>Indicates trace contains an ADC overload.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MeasurementDataStatus.Uncalibrated">
            <summary>Indicates that the data in the trace is uncorrected or not fully corrected.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MeasurementDataStatus.NoPulse">
            <summary>Indicates a pulse is not found. ("Pulse Not Found" status bit only applies to Digital Modulation Analysis (Option AYA).)</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MeasurementDataStatus.NoSync">
            <summary>Indicates a sync is not found. ("Sync Not Found" status bit only applies to Digital Modulation Analysis (Option AYA) 
            and LTE analysis (Option BHD or BHE).)</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MeasurementDataStatus.CarrierUnlocked">
            <summary>Indicates that the hardware is unable to lock to the signal.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MeasurementDataStatus.Equalized">
            <summary>Indicates the digital demodulation equalizer is on.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MeasurementDataStatus.Range">
            <summary>Indicates a PDF or CDF found a sample with a magnitude greater than 100% of the input range.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MeasurementDataStatus.AllPoints">
            <summary>Indicates "Show All Frequency Points" is turned on.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MeasurementDataStatus.MeasurementOffset">
            <summary>Indicates the measurement offset parameter is non-zero or the measurement interval parameter 
            is greater than one. Applicable for W-CDMA or cdma2000 measurements.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MeasurementDataStatus.ChannelInactive">
            <summary>Indicates the currently selected channel is not active. Applicable for W-CDMA or cdma2000 measurements.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.MeasurementData">
            <summary>
            The MeasurementData class represents the results from a measurement calculation, including the data array and 
            its associated StateDictionary of descriptive information.
            </summary>
            <remarks>
            There is MeasurementData for each <see cref="T:Agilent.SA.Vsa.Trace"/>, <see cref="T:Agilent.SA.Vsa.DataRegister"/>, and zero or more for each <see cref="T:Agilent.SA.Vsa.ICustomStep"/>.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementData.Summary(System.Int32)">
            <summary>Gets the value of a data result for the Summary Table using an index.</summary>
            <param name="index0">The index specifies a particular Summary Table data result.</param>
            <returns>The Summary value or null if the index is not in the table.</returns>
            <remarks>See <see cref="P:Agilent.SA.Vsa.MeasurementData.SummaryNames"/> for a description of how to read the Summary Table data results.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementData.Summary(System.String)">
            <summary>Gets the value of a data result for the Summary Table using an summary name.</summary>
            <param name="name">The summary name specifies a particular Summary Table data result.</param>
            <returns>The Summary value or null if the name is not in the table.</returns>
            <remarks>See <see cref="P:Agilent.SA.Vsa.MeasurementData.SummaryNames"/> for a description of how to read the Summary Table data results.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementData.SummaryUnit(System.Int32)">
            <summary>Gets the measurement unit (secs, dbm, etc.) of a data result for the Summary Table using an index.</summary>
            <param name="index0">The index specifies a particular Summary Table data result.</param>
            <returns>The Summary unit or null if the name is not in the table.</returns>
            <remarks>See <see cref="P:Agilent.SA.Vsa.MeasurementData.SummaryNames"/> for a description of how to read the Summary Table data results.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementData.SummaryUnit(System.String)">
            <summary>Gets the measurement unit (secs, dbm, etc.) of a data result for the Summary Table using an index.</summary>
            <param name="name">The summary name specifies a particular Summary Table data result.</param>
            <returns>The Summary unit or null if the index is not in the table.</returns>
            <remarks>See <see cref="P:Agilent.SA.Vsa.MeasurementData.SummaryNames"/> for a description of how to read the Summary Table data results.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementData.CopyTo(Agilent.SA.Vsa.MeasurementData)">
            <summary>Copy this MeasurementData to the specified <see cref="T:Agilent.SA.Vsa.DataRegister"/> or <see cref="T:Agilent.SA.Vsa.ICustomStep"/>.</summary>
            <param name="dst">Destination MeasurementData that is writeable (DataRegister or CustomStep).</param>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementData.Allocate(System.Int32,System.Boolean)">
            <summary>Change the size of the <see cref="P:Agilent.SA.Vsa.MeasurementData.Data"/> array</summary>
            <param name="points">Number of data <see cref="P:Agilent.SA.Vsa.MeasurementData.Points"/>.</param>
            <param name="isComplex">Whether this data is <see cref="P:Agilent.SA.Vsa.MeasurementData.IsComplex">complex</see>.</param>
            <remarks>
            You can only resize the Data only if this MeasurementData is not <see cref="P:Agilent.SA.Vsa.MeasurementData.IsReadOnly"/>.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementData.Allocate(System.Type,System.Int32,System.Boolean)">
            <summary>Change the <see cref="P:Agilent.SA.Vsa.MeasurementData.Capacity"/> of the <see cref="P:Agilent.SA.Vsa.MeasurementData.Data"/> array.</summary>
            <param name="type">Type of data <see cref="P:Agilent.SA.Vsa.MeasurementData.Points"/>.</param>
            <param name="points">Number of data <see cref="P:Agilent.SA.Vsa.MeasurementData.Points"/>.</param>
            <param name="isComplex">Whether this data is <see cref="P:Agilent.SA.Vsa.MeasurementData.IsComplex">complex</see>.</param>
            <remarks>
            You can only resize the Data only if this MeasurementData is not <see cref="P:Agilent.SA.Vsa.MeasurementData.IsReadOnly"/>.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementData.MinimumCapacity(System.Type,System.Int32,System.Boolean)">
            <summary>Change the <see cref="P:Agilent.SA.Vsa.MeasurementData.Capacity"/> of the <see cref="P:Agilent.SA.Vsa.MeasurementData.Data"/> array if it is not large enough or the same <see cref="P:Agilent.SA.Vsa.MeasurementData.DataType"/>.</summary>
            <param name="type">Type of data <see cref="P:Agilent.SA.Vsa.MeasurementData.Points"/>.</param>
            <param name="points">Number of data <see cref="P:Agilent.SA.Vsa.MeasurementData.Points"/>.</param>
            <param name="isComplex">Whether this data is <see cref="P:Agilent.SA.Vsa.MeasurementData.IsComplex">complex</see>.</param>
            <remarks>
            You can only resize the Data only if this MeasurementData is not <see cref="P:Agilent.SA.Vsa.MeasurementData.IsReadOnly"/>.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementData.GetData(System.Array,System.Int32,System.Int32,System.Int32)">
            <summary>Gets a portion of the Y data points as a float or double array</summary>
            <param name="destinationArray">array to return the Y data points</param>
            <param name="destinationIndex">offset into the destination array.</param>
            <param name="sourceIndex">offset into the Y data points</param>
            <param name="length">length of the Y data points to return</param>
            <remarks>
            The data is filled starting with the first element in the passed data array.
            No data is initialized in the passed data array after the specified length.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementData.SetData(System.Array,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Sets a portion of the Y data points from a float or double array</summary>
            <param name="sourceArray">source data array</param>
            <param name="sourceIndex">offset into the source data array.</param>
            <param name="destinationIndex">offset into the destination array.</param>
            <param name="length">length of source data array to copy.</param>
            <param name="destinationSize">length of the destination array.</param>
            <remarks>
            The destination array is resized to the destinationSize, retaining any old data in the array.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.MeasurementData.IsReadOnly">
            <summary>Gets a value indicating whether this MeasurementData cannot be changed.</summary>
            <remarks>MeasurementData from a <see cref="T:Agilent.SA.Vsa.Trace"/> cannot be changed.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.MeasurementData.IsComplex">
            <summary>Gets or sets a value indicating whether the <see cref="P:Agilent.SA.Vsa.MeasurementData.Data"/> is complex.</summary>
            <remarks>Complex data is interleaved real followed by imaginary for each point.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.MeasurementData.Points">
            <summary>Gets or sets the number of points in the <see cref="P:Agilent.SA.Vsa.MeasurementData.Data"/>.</summary>
            <remarks>
            Returns the number of points (real or complex) that is returned by the Data property.
            The <see cref="P:Agilent.SA.Vsa.MeasurementData.IsComplex"/> property returns whether the trace data is complex.
            If the trace contains spectrum data, then the non-alias protected data is also included in the returned data. 
            You can use State["FreqValidMin"] and State["FreqValidMax"] to determine the minimum 
            and maximum valid frequencies for the data. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.MeasurementData.Data">
            <summary>Gets or sets the Y data points</summary>
            <remarks>Returns the data in its native format. 
            <see cref="P:Agilent.SA.Vsa.MeasurementData.FloatData"/> and <see cref="P:Agilent.SA.Vsa.MeasurementData.DoubleData"/> returns the data in the specified format.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.MeasurementData.FloatData">
            <summary>Gets or sets the Y data points as a float array</summary>
            <remarks><see cref="P:Agilent.SA.Vsa.MeasurementData.DoubleData"/> returns the data as a double array.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.MeasurementData.DoubleData">
            <summary>Gets or sets the Y data points as a double array</summary>
            <remarks><see cref="P:Agilent.SA.Vsa.MeasurementData.FloatData"/> returns the data as a float array.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.MeasurementData.XStart">
            <summary>Gets or sets the start X for the <see cref="P:Agilent.SA.Vsa.MeasurementData.Data"/>.</summary>
            <remarks>
            <para>
            Returns the X start for the Data. 
            The XStart and <see cref="P:Agilent.SA.Vsa.MeasurementData.XDelta"/> properties can be used together to reconstruct the time/frequency axis for the data.
            </para>
            <para>
            If the trace contains spectrum data, then the non-alias protected data is also included in the returned data. 
            You can use State["FreqValidMin"] and State["FreqValidMax"] to determine the minimum 
            and maximum valid frequencies for the data. 
            </para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.MeasurementData.XDelta">
            <summary>Gets or sets the delta X for the Data.</summary>
            <remarks>
            <para>
            Returns the X start for the Data. 
            The <see cref="P:Agilent.SA.Vsa.MeasurementData.XStart"/> and XDelta properties can be used together to reconstruct the time/frequency axis for the data.
            </para>
            <para>
            If the trace contains spectrum data, then the non-alias protected data is also included in the returned data. 
            You can use State["FreqValidMin"] and State["FreqValidMax"] to determine the minimum 
            and maximum valid frequencies for the data. 
            </para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.MeasurementData.Status">
            <summary>Gets the Status of the Data.</summary>
            <remarks>
            Returns the status of the data, which may indicate measurement inaccuracies or error conditions. 
            The returned value is a sum of the MeasurementDataStatus bits. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.MeasurementData.IndicatorReason">
            <summary>Gets additional information about the <see cref="P:Agilent.SA.Vsa.MeasurementData.Indicator"/>.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.MeasurementData.Indicator">
            <summary>Gets the highest priority measurement <see cref="P:Agilent.SA.Vsa.MeasurementData.Status"/> string.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.MeasurementData.SummaryNames">
            <summary>Gets an array of all available result names if this MeasurementData contains a Summary Table.</summary>
            <remarks>
            <para>
            The SummaryNames, Summary(integer), and SummaryUnit(integer) properties are used to programmatically query Summary Table results. 
            Each property is required to return a complete data result value. 
            </para>
            <para>
            Their specific function is described below:
            <list type="number">
            	<item><see cref="P:Agilent.SA.Vsa.MeasurementData.SummaryNames"/> returns an array containing a list of all available data result names for the 
            	Summary Table.</item>
            	<item><see cref="M:Agilent.SA.Vsa.MeasurementData.Summary(System.Int32)"/> gets the value of a data result at the specified index in the Summary Table.</item>
            	<item><see cref="M:Agilent.SA.Vsa.MeasurementData.Summary(System.String)"/> gets the value of a data result for the specified summary name in the Summary Table.</item>
            	<item><see cref="M:Agilent.SA.Vsa.MeasurementData.SummaryUnit(System.Int32)"/> gets the measurement units (secs, dbm, etc.) of a data result at the specified index in 
            	the Summary Table.</item>
            	<item><see cref="M:Agilent.SA.Vsa.MeasurementData.SummaryUnit(System.String)"/> gets the measurement units (secs, dbm, etc.) of a data result for the specified summary name in 
            	the Summary Table.</item>
            </list>
            </para>
            <para>
            The <see cref="P:Agilent.SA.Vsa.MeasurementData.SummaryNames"/> property returns an array containing a list of the available Summary Table data result names for the 
            Summary Table.  This list is used to assign unique index numbers for each data result in the Summary Table. 
            The indexes are used in the <see cref="M:Agilent.SA.Vsa.MeasurementData.Summary(System.Int32)"/> and <see cref="M:Agilent.SA.Vsa.MeasurementData.SummaryUnit(System.Int32)"/> methods to query a 
            corresponding data result value and unit. 
            Alternately, you can use the summary names with <see cref="M:Agilent.SA.Vsa.MeasurementData.Summary(System.String)"/> and <see cref="M:Agilent.SA.Vsa.MeasurementData.SummaryUnit(System.String)"/> methods to query a 
            corresponding data result value and unit.
            </para>
            <para>
            Not all modulation formats can be used with these properties. Also, each modulation format has a unique set of Summary 
            Table Traces and data results. 
            The "Available Summary Table Results" topic provides all the specific information needed to use these properties including; 
            the supported modulation formats, available Summary Tables traces and list of data results with corresponding index values.
            </para>
            <para>
            To learn how to use these properties to programmatically query Summary Table results. see 
            "How to Query Summary Table Data Results".
            </para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.MeasurementData.IsRecorded">
            <summary>Gets a value indicating whether this data is measured from a <see cref="T:Agilent.SA.Vsa.Recording"/>.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.MeasurementData.State">
            <summary>Gets the StateDictionary of descriptive information for this MeasurementData.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.MeasurementData.DataType">
            <summary>
            Gets the Type of the numbers contained in the <see cref="P:Agilent.SA.Vsa.MeasurementData.Data"/> array.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.MeasurementData.Capacity">
            <summary>
            Gets the maximum # of numbers that can be contained in the <see cref="P:Agilent.SA.Vsa.MeasurementData.Data"/> array.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.Result">
            <summary>
            Defines a class to represent the result of an operation.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Result.Name">
            <summary>
            Gets or sets the name of the result.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Result.Value">
            <summary>
            Gets or sets the value for the result.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.ResultCollection">
            <summary>
            Implements a collection of <see cref="T:Agilent.SA.Vsa.Result"/> objects.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.ResultCollection.Contains(Agilent.SA.Vsa.Result)">
            <summary>
            Gets a value that indicates whether the collection contains the specified result.
            </summary>
            <param name="item">The item to find in the collection.</param>
            <returns>true if the collection contains the result; otherwise false</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.ResultCollection.Create">
            <summary>
            Create a new instance of the <see cref="T:Agilent.SA.Vsa.Result"/> class and add it to the collection.
            </summary>
            <returns>A handle to the new <see cref="T:Agilent.SA.Vsa.Result"/>.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.ResultCollection.Create(System.String)">
            <summary>
            Create a new instance of the <see cref="T:Agilent.SA.Vsa.Result"/> class and add it to the collection.
            </summary>
            <param name="name">The name of the result.</param>
            <returns>A handle to the new result.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.ResultCollection.Remove(Agilent.SA.Vsa.Result)">
            <summary>
            Remove a <see cref="T:Agilent.SA.Vsa.Result"/> from the collection.
            </summary>
            <param name="item"><see cref="T:Agilent.SA.Vsa.Result"/> to remove from the collection</param>
            <returns>True, if the <see cref="T:Agilent.SA.Vsa.Result"/> was removed from the collection.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.ResultCollection.RemoveAt(System.Int32)">
            <summary>
            Remove a <see cref="T:Agilent.SA.Vsa.Result"/> from the collection.
            </summary>
            <param name="index">Zero-based index of <see cref="T:Agilent.SA.Vsa.Result"/> to remove from the collection</param>
            <returns>True, if the <see cref="T:Agilent.SA.Vsa.Result"/> was removed from the collection.</returns>
        </member>
        <member name="P:Agilent.SA.Vsa.ResultCollection.Item(System.String)">
            <summary>
            Gets a reference to the specified result (by name) in the collection.
            </summary>
            <param name="name">The name of the result to find.</param>
            <returns>A handle to the result.</returns>
        </member>
        <member name="T:Agilent.SA.Vsa.DisplayFontInfo">
            <summary>Serializable information about a font.</summary>
        </member>
        <member name="M:Agilent.SA.Vsa.DisplayFontInfo.#ctor(System.String,System.Double,System.Windows.FontStyle,System.Windows.FontStretch,System.Windows.FontWeight)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.DisplayFontInfo"/> struct.
            </summary>
            <param name="fontFamily">Font family</param>
            <param name="fontSize">Font size in pixels (96/inch).</param>
            <param name="fontStyle">Font style</param>
            <param name="fontStretch">Font stretch</param>
            <param name="fontWeight">Font weight</param>
        </member>
        <member name="M:Agilent.SA.Vsa.DisplayFontInfo.GetHashCode">
            <summary>
            Generates a hash code for the DisplayFontInfo (Overrides <see cref="M:System.ValueType.GetHashCode"/>.) 
            </summary>
            <returns>A hash code for the DisplayFontInfo.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.DisplayFontInfo.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current DisplayFontInfo instance. 
            (Overrides <see cref="M:System.ValueType.Equals(System.Object)"/>.)		 
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>true if the specified object has the same information as the current instance; otherwise, false.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.DisplayFontInfo.ToString">
            <summary>
            Returns a string that represents the display font information.
            </summary>
            <returns>A string representation of the display font information.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.DisplayFontInfo.op_Equality(Agilent.SA.Vsa.DisplayFontInfo,Agilent.SA.Vsa.DisplayFontInfo)">
            <summary>
            Compares two DisplayFontInfo structures for equality.
            </summary>
            <param name="font1">The first instance of DisplayFontInfo to compare.</param>
            <param name="font2">The second instance of DisplayFontInfo to compare.</param>
            <returns>true if the two instances contain the same information; otherwise, false.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.DisplayFontInfo.op_Inequality(Agilent.SA.Vsa.DisplayFontInfo,Agilent.SA.Vsa.DisplayFontInfo)">
            <summary>
            Compares two DisplayFontInfo structures to determine if they are not equal.
            </summary>
            <param name="font1">The first instance of DisplayFontInfo to compare.</param>
            <param name="font2">The second instance of DisplayFontInfo to compare.</param>
            <returns>true if the two instances do not have the same information; otherwise, false.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.DisplayFontInfo.Equals(Agilent.SA.Vsa.DisplayFontInfo)">
            <summary>
            Determines whether the specified object is equal to the current DisplayFontInfo instance.
            </summary>
            <param name="other">The object to compare with the current instance.</param>
            <returns>true if the specified object has the same information as the current instance; otherwise, false.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.DisplayFontInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.DisplayFontInfo"/> struct by deserializing it from a serialization stream.
            </summary>
            <param name="info">The object to deserialize the data from.</param>
            <param name="context">The context for the serialization stream.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.DisplayFontInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Serialize the current instance of DisplayFontInfo.
            </summary>
            <param name="info">The object to serialize the data to.</param>
            <param name="context">The context for the serialization stream.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.DisplayFontInfo.GetSchema">
            <summary>
            See <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema"/>.
            </summary>
            <returns>Returns null.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.DisplayFontInfo.ReadXml(System.Xml.XmlReader)">
            <summary>
            Regenerates the DisplayFontInfo structure from its XML representation.
            </summary>
            <param name="reader">The <see cref="T:System.Xml.XmlReader"/> stream from which the object is deserialized.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.DisplayFontInfo.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts the DisplayFontInfo structure into its XML representation.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> stream to which the object is serialized.</param>
        </member>
        <member name="P:Agilent.SA.Vsa.DisplayFontInfo.FontFamily">
            <summary>Gets or sets the font family</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.DisplayFontInfo.FontSize">
            <summary>Gets or sets the font size in pixels (96/inch).</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.DisplayFontInfo.FontStyle">
            <summary>Gets or sets the font style.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.DisplayFontInfo.FontStretch">
            <summary>Gets or sets the font stretch (not used)</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.DisplayFontInfo.FontWeight">
            <summary>Gets or sets the font weight.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.DisplayFont">
            <summary>Specifies which element to set the font.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayFont.Annotation">
            <summary>Font for Trace windows.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayFont.Marker">
            <summary>Font for Marker window.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.DisplayColor">
            <summary>Specifies which element to set the color.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.Trace">
            <summary>Color for specified trace and its annotation.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.TraceBackground">
            <summary>Color for the background of the trace data (behind the graticule).</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.Grid">
            <summary>Color for the graticule lines.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.Annotation">
            <summary>Color for the trace annotation (text outside of the graticule).</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.AnnotationBackground">
            <summary>Color for background of area outside of the trace graticule.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.Symbol">
            <summary>Color for demodulation symbols in the trace.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.Pilot">
            <summary>Color for the OFDM demodulation pilot bits in the trace.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.Average">
            <summary>Color for the average line in the trace.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.Indicator">
            <summary>Color for messages that appear in upper right corner of each trace.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.SpectrogramMarker">
            <summary>Color for the spectrogram marker on the trace.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.TraceSelect">
            <summary>Color for spectrogram trace select line.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.AcpAnnotation">
            <summary>Color for ACP annotation on the trace when ACP marker is enabled.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.Acp">
            <summary>Color for ACP Bandwidth background bars on the trace when ACP marker is enabled.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.ObwAnnotation">
            <summary>Color for OBW annotation on the trace when OBW marker is enabled.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.Obw">
            <summary>Color for OBW background bar on the trace when OBW marker is enabled.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.Limit">
            <summary>Color for a limit line on the trace.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.FailLimit">
            <summary>Color for trace color at limit line fail points.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.Margin">
            <summary>Color for margin line on the trace.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.FailMargin">
            <summary>Color for trace color at margin line fail points.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.CodeLayer9">
            <summary>Color for demodulation Code Layer 9 symbols.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.CodeLayer8">
            <summary>Color for demodulation Code Layer 8 symbols.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.CodeLayer7">
            <summary>Color for demodulation Code Layer 7 symbols.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.CodeLayer6">
            <summary>Color for demodulation Code Layer 6 symbols.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.CodeLayer5">
            <summary>Color for demodulation Code Layer 5 symbols.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.CodeLayer4">
            <summary>Color for demodulation Code Layer 4 symbols.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.CodeLayer3">
            <summary>Color for demodulation Code Layer 3 symbols.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.CodeLayer2">
            <summary>Color for demodulation Code Layer 2 symbols.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.CodeLayer1">
            <summary>Color for demodulation Code Layer 1 symbols.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.CodeLayer0">
            <summary>Color for demodulation Code Layer 0 symbols.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.SlotAnnotation">
            <summary>Color for the TD-SCDMA and 1xEV-DO trace annotation.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.SlotSelected">
            <summary>Color for the TD-SCDMA time slot specified as analysis times lot.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.SlotPreamble">
            <summary>Color for background of preamble portion of 1xEV-DO forward link measurements.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.SlotPilot">
            <summary>Color for background of pilot portion of 1xEV-DO forward link measurements.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.SlotPilotUp">
            <summary>Color for the uplink section of the TD-SCDMA pilot time slot.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.SlotPilotDown">
            <summary>Color for downlink section of the TD-SCDMA pilot time slot.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.SlotMac">
            <summary>Color for background of MAC portions of 1xEV-DO forward link measurements.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.SlotData">
            <summary>color for background arrow in TD-SCDMA slots, indicating whether slot is uplink or downlink. 
            Also sets color for background of Data portions of 1xEV-DO forward link measurements.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.SlotMidamble">
            <summary>Color for midamble portion of Composite TD-SCDMA display.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.ModType1">
            <summary>symbol color for modulation type 1 when Uniform Modulation Analysis mode is 
            selected in 802.16 OFDM, 802.11n HT or 802.16 OFDMA.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.ModType2">
            <summary>symbol color for modulation type 2 when Uniform Modulation Analysis mode is 
            selected in 802.16 OFDM, 802.11n HT or 802.16 OFDMA.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.ModType3">
            <summary>symbol color for modulation type 3 when Uniform Modulation Analysis mode is 
            selected in 802.16 OFDM, 802.11n HT or 802.16 OFDMA.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.ModType4">
            <summary>symbol color for modulation type 4 when Uniform Modulation Analysis mode is 
            selected in 802.16 OFDM, 802.11n HT or 802.16 OFDMA.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.ModType5">
            <summary>symbol color for modulation type 5 when Uniform Modulation Analysis mode is 
            selected in 802.16 OFDM, 802.11n HT or 802.16 OFDMA.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.ModType6">
            <summary>symbol color for modulation type 6 when Uniform Modulation Analysis mode is 
            selected in 802.16 OFDM, 802.11n HT or 802.16 OFDMA.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.ModType7">
            <summary>Symbol color for modulation type 7 for LTE demodulation</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.ModType8">
            <summary>Symbol color for modulation type 8 for LTE demodulation</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.ModType9">
            <summary>Symbol color for modulation type 9 for LTE demodulation</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.ModType10">
            <summary>Symbol color for modulation type 10 for LTE demodulation</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.ModType11">
            <summary>Symbol color for modulation type 11 for LTE demodulation</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.ModType12">
            <summary>Symbol color for modulation type 12 for LTE demodulation</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.MarkerBackground">
            <summary>Color for marker background in the marker window.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.SelectedMarker">
            <summary>Color for active marker.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.NotSelectedMarker">
            <summary>Color for inactive markers.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.ModType13">
            <summary>Symbol color for modulation type 13 for LTE demodulation</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.ModType14">
            <summary>Symbol color for modulation type 14 for LTE demodulation</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DisplayColor.ModType15">
            <summary>Symbol color for modulation type 15 for LTE demodulation</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.View">
            <summary>
            Each View object represents a printable window.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.View.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.View.Title">
            <summary>
            Gets the title.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.ViewCollection">
            <summary>
            This collection contains the set of <see cref="T:Agilent.SA.Vsa.View"/> objects representing the set of printable windows.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.ViewCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:Agilent.SA.Vsa.View"/> object with the indicated title.
            </summary>
            <param name="title">The title of the View to retrieve.</param>
            <returns>The View corresponding to the supplied title, or null if no match was found.</returns>
        </member>
        <member name="T:Agilent.SA.Vsa.Display">
            <summary>
            The Display class contains objects/methods that control the visual aspects of the application. 
            </summary>
            <remarks>
            The objects include the Traces collection, the Views collection (used for printing), and the Printer.
            The properties include fonts, colors, and themes used by the display.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Display.Preset">
            <summary>Preset the display properties to a default state.</summary>
            <remarks>
            The colors, fonts, the theme, windows scaling are preset by this method.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Display.IsColorByTrace(Agilent.SA.Vsa.DisplayColor)">
            <summary>Returns true if this color index can be different for each trace.</summary>
            <param name="colorIndex">The color index.</param>
            <returns>Whether the code can be different for each trace.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.Display.Color(Agilent.SA.Vsa.DisplayColor,System.Int32)">
            <summary>Get the color (as a string) for the color index.</summary>
            <param name="colorIndex">The color index.</param>
            <param name="traceIndex">The trace index.</param>
            <returns>The color in a serializable form (as a string).</returns>
            <remarks>
            If this color is not <see cref="M:Agilent.SA.Vsa.Display.IsColorByTrace(Agilent.SA.Vsa.DisplayColor)"/>, then the traceIndex is ignored.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Display.Color(Agilent.SA.Vsa.DisplayColor,System.Int32,System.String)">
            <summary>Set the color (as a string) for the color index.</summary>
            <param name="colorIndex">The color index.</param>
            <param name="traceIndex">The trace index.</param>
            <param name="value">The color in a serializable form (as a string).</param>
            <remarks>
            If this color is not <see cref="M:Agilent.SA.Vsa.Display.IsColorByTrace(Agilent.SA.Vsa.DisplayColor)"/>, then the traceIndex is ignored.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Display.SaveMapUserColors(System.String)">
            <summary>Save the spectrogram user color map colors to a file. </summary>
            <param name="fileName">The file name.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.Display.RecallMapUserColors(System.String)">
            <summary>Recall the spectrogram user color map colors from a file.</summary>
            <param name="fileName">The file name.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.Display.Font(Agilent.SA.Vsa.DisplayFont)">
            <summary>Get the font for the font index.</summary>
            <param name="typefaceIndex">The font index.</param>
            <returns>Information about the font.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.Display.Font(Agilent.SA.Vsa.DisplayFont,Agilent.SA.Vsa.DisplayFontInfo)">
            <summary>Set the passed font for the specified font index.</summary>
            <param name="typefaceIndex">The Font index.</param>
            <param name="fontInfo">Information about the font.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.Display.RecallLayout(System.String)">
            <summary>Recall the application window layout from a file.</summary>
            <param name="fileName">The file name.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.Display.SaveLayout(System.String)">
            <summary>Save the application window layout to a file.</summary>
            <param name="fileName">The file name.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.Display.RecallFile(System.String)">
            <summary>Recall the display attributes from a file.</summary>
            <param name="fileName">The file name.</param>
            <remarks>
            These are the same attributes affected by <see cref="M:Agilent.SA.Vsa.Display.Preset"/>.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Display.SaveFile(System.String)">
            <summary>Save the display attributes to a file.</summary>
            <param name="fileName">The file name.</param>
            <remarks>
            These are the same attributes affected by <see cref="M:Agilent.SA.Vsa.Display.Preset"/>.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Display.Printer">
            <summary>
            Gets the <see cref="P:Agilent.SA.Vsa.Display.Printer"/> object.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Display.Traces">
            <summary>
            Gets the <see cref="T:Agilent.SA.Vsa.TraceCollection"/> object.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Display.Views">
            <summary>
            Gets the <see cref="T:Agilent.SA.Vsa.ViewCollection"/> collection.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Display.Results">
            <summary>
            Gets the results collection (For internal use only)
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Display.TraceColorCount">
            <summary>Gets the number of traces (20) for which colors are remembered.</summary>
            <remarks>
            If you have more than 20 traces, the trace colors are recycled (i.e. trace 0 and 20 have the same colors).
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Display.ColorCount">
            <summary>Gets the number of colors used by the Color methods.</summary>
            <remarks>
            The ColorCount property returns the number of color indexes available to the Color methods 
            (<see cref="M:Agilent.SA.Vsa.Display.Color(Agilent.SA.Vsa.DisplayColor,System.Int32)"/> and <see cref="M:Agilent.SA.Vsa.Display.Color(Agilent.SA.Vsa.DisplayColor,System.Int32,System.String)"/>)
            and the <see cref="M:Agilent.SA.Vsa.Display.IsColorByTrace(Agilent.SA.Vsa.DisplayColor)"/> method. 
            Each color index identifies a displayed element in either the trace window or markers window. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Display.MapUserColorNames">
            <summary>Gets or sets all the colors (as strings) in the spectrogram user color map.</summary>
            <remarks>
            The colors are in a serializable form (as strings).
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Display.MapUserDefaultColorNames">
            <summary>Gets the default colors (as strings) for a spectrogram user color map.</summary>
            <remarks>
            The colors are in a serializable form (as strings).
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Display.FontCount">
            <summary>Gets the number of fonts used by the Font methods.</summary>
            <remarks>
            The FontCount property returns the number of font indexes available to the Font methods 
            (<see cref="M:Agilent.SA.Vsa.Display.Font(Agilent.SA.Vsa.DisplayFont)"/> and <see cref="M:Agilent.SA.Vsa.Display.Font(Agilent.SA.Vsa.DisplayFont,Agilent.SA.Vsa.DisplayFontInfo)"/>).
            Each font index identifies a font in either the trace window or markers window. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Display.LayoutString">
            <summary>Gets or sets the application window layout.</summary>
            <remarks>
            The layout string is the same text that is in the layout file
            (see <see cref="M:Agilent.SA.Vsa.Display.SaveLayout(System.String)"/> and <see cref="M:Agilent.SA.Vsa.Display.RecallLayout(System.String)"/>).
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Display.WindowScaleFactor">
            <summary>
            Gets or sets the scaling factor applied to all window contents.
            </summary>
            <remarks>
            The WindowScaleFactor is a number between 0.8 and 2.0 that controls the amount of scaling applied
            to the contents of all windows. A value of 1.0 is the default. A value of 2.0 means that all contents
            are rendered twice as large as when the WindowScaleFactor is 1.0.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Display.Theme">
            <summary>
            Gets or sets the color theme to be applied to all windows.
            </summary>
            <remarks>
            The supplied value can currently be any of the following:
            <list type="bullet">
            	<item>AeroNormalColor</item>
            	<item>Classic</item>
            	<item>HighContrast</item>
            	<item>LunaHomestead</item>
            	<item>LunaMetallic</item>
            	<item>LunaNormalColor</item>
            	<item>Office2007Black</item>
            	<item>Office2007Blue</item>
            	<item>Office2007Silver</item>
            	<item>Office2010Black</item>
            	<item>Office2010Blue</item>
            	<item>Office2010Silver</item>
            	<item>RoyaleNormalColor</item>
            </list>
            At any time, the list of valid values can be obtained using the <see cref="T:Agilent.SA.Vsa.IPropertyInfo"/> interface as follows:
            <code lang="CS">
            IPropertyInfo propInf = app.Display as IPropertyInfo;
            string[] validThemes = propInf.ValidValues&lt;string&gt;("Theme");
            </code>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Display.IsFixedSizePropertyDialogs">
            <summary>
            Gets or sets a value indicating whether property dialogs are fixed size.
            </summary>
            <remarks>
            If true, property dialogs will be sized large enough to display the largest tab regardless of which tab
            is currently visible. If false, property dialogs will resize to be just large enough to display the current
            tab.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Display.IsDialogAboveMainWindow">
            <summary>
            Gets or sets a value indicating whether property dialogs are always above the main window.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.Hardware">
            <summary>
            Root class for hardware configuration and information
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.Hardware.Discover">
            <summary>
            Discover instruments.  
            </summary>
            <remarks>
            This method will re-run the hardware discovery process that was done at startup. 
            When invoked this method will disconnect from hardware, re-scan for hardware
            instruments, and repopulate the hardware configurations with the discovered hardware 
            instruments.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Hardware.Configurations">
            <summary>
            Gets a collection of the currently defined hardware configurations.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.ConnectionStateType">
            <summary>
            The state of the connection with the hardware.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ConnectionStateType.Disconnected">
            <summary>
            Application not communicating with the hardware, ok to change hardware state
            </summary>
            <remarks>
            Measurements associated with the hardware are paused and do not communicate with the hardware until the 
            measurement is restarted (assumes state may be changed while disconnected).
            </remarks>
        </member>
        <member name="F:Agilent.SA.Vsa.ConnectionStateType.Suspended">
            <summary>
            Application not communicating with the hardware, do not change hardware state
            </summary>
            <remarks>Measurements associated with the hardware are paused and do not communicate with the hardware until the 
            measurement is restarted (assumes state of hardware will not be changed while suspended)
            </remarks>
        </member>
        <member name="F:Agilent.SA.Vsa.ConnectionStateType.Acquired">
            <summary>
            Application is communicating with the hardware
            </summary>
            <remarks>Measurements associated with the hardware may be in progress and communicating with the hardware.
            </remarks>
        </member>
        <member name="T:Agilent.SA.Vsa.HardwareConfigurationType">
            <summary>
            Possible hardware types of a configuration
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.HardwareConfigurationType.Analyzer">
            <summary>
            Hardware that provides input data to the application.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.HardwareConfigurationType.Source">
            <summary>
            Hardware that the application sends data to.
            </summary>
            <para>Note:  Not currently supported.</para>
        </member>
        <member name="T:Agilent.SA.Vsa.HardwareConfiguration">
            <summary>
            Represents a specific configuration of hardware instruments.   The <see cref="P:Agilent.SA.Vsa.Measurement.SelectedAnalyzer"/> property of a 
            Measurement points to an instance of this class which then determines what hardware will be used by the measurement.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.HardwareConfiguration.Suspend">
            <summary>
            Pauses all measurements associated with this hardware and suspends communications 
            with the hardware.  
            </summary>
            <remarks>
            Hardware communications are resumed when you perform an operation that requires the 
            hardware, such as Measurement.Restart or Measurement.Resume.  Note:  Starting the 
            measurement after a suspend does not do all the hardware initialization that is done 
            after a Disconnect.  As a result, you must guarantee that the hardware configuration 
            and/or setup is not changed between the time Suspend is called and when the 
            measurement is resumed.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.HardwareConfiguration.Disconnect">
            <summary>
            Pauses all measurements associated with this hardware and disconnects from the hardware.  
            </summary>
            <remarks>
            This method stops the measurements associated with this hardware. The measurement is 
            stopped (if it is running) and does not communicate with the input channel hardware 
            until the measurement is restarted. The input channel hardware is reinitialized when 
            the measurement is restarted, because the state of the hardware is now unknown. This 
            method is used if you want to access the input channel hardware directly.
            </remarks>
            <exception cref="T:System.InvalidOperationException">An InvalidOperationException will be thrown 
            if an error occurs while disconnecting from the hardware.</exception>
        </member>
        <member name="M:Agilent.SA.Vsa.HardwareConfiguration.Overlaps(Agilent.SA.Vsa.HardwareConfiguration)">
            <summary>
            Indicates whether this configuration has real instruments in it that are also in the specified configuration.  
            </summary>
            <param name="configuration">The configuration to compare this configuration to.</param>
            <returns>False if the configuration is simulated one.  True if an instrument with the same address exists in both configurations.  Otherwise, it returns false.</returns>
            <version>15.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.HardwareConfiguration.Name">
            <summary>
            Gets or sets the name of the hardware configuration.  
            </summary>
            <exception cref="T:System.ArgumentNullException">If the specified value is set to null.</exception>
            <exception cref="T:System.ArgumentException">If the specified value is set to white space.</exception>
        </member>
        <member name="P:Agilent.SA.Vsa.HardwareConfiguration.Groups">
            <summary>
            Gets the collection of hardware groups in the configuration.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.HardwareConfiguration.ConnectionState">
            <summary>
            Gets the current state of the connection to the hardware within the configuration.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.HardwareConfiguration.ConfigurationType">
            <summary>
            Gets the type of hardware in this configuration (source or analyzer)
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.HardwareConfiguration.IsSimulated">
            <summary>
            Gets a value indicating whether the configuration uses simulated instruments
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.HardwareConfiguration.ExternalReferenceFrequency">
            <summary>
            Gets or sets the frequency of the external reference signal
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.HardwareConfiguration.ExternalReferenceMaster">
            <summary>
            Gets or sets the instrument in the configuration that will accept an external reference
            signal and provide a reference source for the configuration.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.HardwareConfiguration.EnableExternalReferenceLock">
            <summary>
            Gets or sets a value indicating whether the configuration should lock to the external reference signal or not.
            </summary>
            <remarks>
            Some hardware configurations can sense an external reference signal being applied and
            automatically lock to it. In these configurations, this property is ignored.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.HardwareConfiguration.Calibration">
            <summary>
            Gets a handle to the Calibration object for this hardware configuration.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.HardwareConfigurationCollection">
            <summary>
            This collection contains the set of <see cref="T:Agilent.SA.Vsa.HardwareConfiguration"/> objects representing the hardware configurations.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.HardwareConfigurationCollection.Remove(System.String)">
            <summary>
            Removes the given configuration
            </summary>
            <param name="name">The name of the configuration to remove.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.HardwareConfigurationCollection.Remove(Agilent.SA.Vsa.HardwareConfiguration)">
            <summary>
            Removes the given configuration
            </summary>
            <param name="item">The configuration to remove.</param>
            <returns>True, if the configuration is removed.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.HardwareConfigurationCollection.Create(System.String)">
            <summary>
            Creates a new HardwareConfiguration object and adds it to the collection.
            </summary>
            <param name="name">The name of the new configuration.  
            If a configuration of the same name already exists then the name will automatically 
            be modified to make it unique (the root part of the name will be preserved)... the
            <see cref="P:Agilent.SA.Vsa.HardwareConfiguration.Name"/> property may be checked on the object that is returned
            from this method.</param>
            <returns>A reference to the created configuration.</returns>
        </member>
        <member name="P:Agilent.SA.Vsa.HardwareConfigurationCollection.Item(System.String)">
            <summary>
            Returns a HardwareConfiguration reference of the given name.
            </summary>
            <param name="name">The name of the desired configuration.</param>
            <returns>HardwareConfiguration reference of the given name.</returns>
        </member>
        <member name="T:Agilent.SA.Vsa.DataSource">
            <summary>
            Specifies whether the data for the measurement is from measurement hardware or a recording.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DataSource.Hardware">
            <summary>
            Specifies input data is from measurement Hardware.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.DataSource.Recording">
            <summary>
            Specifies input data is from a Recording.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.Input">
            <summary>
            The Input object represents the front-end of the instrument, permitting configuration and selection of the input channels.
            </summary>
            <remarks>The Input object also allows you to select whether the input data comes from the input channels or from a recording. 
            You can use the <see cref="P:Agilent.SA.Vsa.Input.Recording">Recording</see> object to control recording and playback settings. </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Input.ChangeLogicalChannelsByCount(System.Int32)">
            <summary>
            Changes the input channel configuration for the current measurement by specifying the number of logical input channels.
            </summary>
            <remarks>
            <para>
            This method assumes that all logical channels will be of the same type.  It tries to use logical channel types in the following priority:  
            <see cref="F:Agilent.SA.Vsa.LogicalChannelType.RF">RF</see>, <see cref="F:Agilent.SA.Vsa.LogicalChannelType.Baseband">Baseband</see>, <see cref="F:Agilent.SA.Vsa.LogicalChannelType.Digital">Digital</see>,
            <see cref="F:Agilent.SA.Vsa.LogicalChannelType.User">User</see>, and <see cref="F:Agilent.SA.Vsa.LogicalChannelType.IQ">IQ</see>.  It uses the first type that succeeds for the specified count. 
            </para>
            <para><strong>Hardware Interchangeability:</strong>  This method allows for interchangeability when the number of channels is more 
            important than the type of channel.  If the <see cref="T:Agilent.SA.Vsa.LogicalChannelType">type</see> of channel is important then use the 
            <see cref="M:Agilent.SA.Vsa.Input.ChangeLogicalChannels(Agilent.SA.Vsa.LogicalChannelType[])">ChangeLogicalChannels</see> method instead.</para>
            <para><strong>Affect on Traces:</strong>  Undefined.  The <see cref="M:Agilent.SA.Vsa.Measurement.PresetTraces"/>, <see cref="M:Agilent.SA.Vsa.TraceCollection.RemoveExtra"/>, 
            and <see cref="M:Agilent.SA.Vsa.TraceCollection.ArrangeWindows(Agilent.SA.Vsa.ArrangeWindowHints)"/> methods may be useful in presetting traces to a default
            number, result assignment, and layout after changing the channel configuration.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">count is not possible with the currently selected hardware.</exception>
            <param name="count">Number of logical input channels to use.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.Input.ChangeLogicalChannels(Agilent.SA.Vsa.LogicalChannelType[])">
            <summary>
            Changes the input channel configuration for the current measurement by specifying <see cref="T:Agilent.SA.Vsa.LogicalChannelType">logical channel types</see> for the input channels.
            </summary>
            <remarks>
            <para><strong>Hardware Interchangeability:</strong>  Use this method when hardware interchangeability is important.</para>
            <para><strong>Affect on Traces:</strong>  Undefined.  The <see cref="M:Agilent.SA.Vsa.Measurement.PresetTraces"/>, <see cref="M:Agilent.SA.Vsa.TraceCollection.RemoveExtra"/>, 
            and <see cref="M:Agilent.SA.Vsa.TraceCollection.ArrangeWindows(Agilent.SA.Vsa.ArrangeWindowHints)"/> methods may be useful in presetting traces to a default
            number, result assignment, and layout after changing the channel configuration.
            </para>
            </remarks>
            <param name="logicalChannelTypes">An ordered list of the <see cref="T:Agilent.SA.Vsa.LogicalChannelType">logical channel types</see>.  
            The input logical channels will be in the same order as the specified types.</param>
            <exception cref="T:System.ArgumentNullException">logicalChannelTypes is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">logicalChannelTypes is not possible with the currently selected hardware.</exception>
        </member>
        <member name="M:Agilent.SA.Vsa.Input.ChangeLogicalChannels(Agilent.SA.Vsa.LogicalChannelId[])">
            <summary>
            Changes the input channel configuration for the current measurement by specifying specific logical channels to use 
            (using <see cref="T:Agilent.SA.Vsa.LogicalChannelId">logical channel identifiers</see>).
            </summary>
            <remarks>
            <para><strong>Hardware Interchangeability:</strong>  Do not use this method if hardware interchangeability is important.  
            A logical channel identifier is only valid and unique within the context of the model(s) of hardware being used.</para>
            <para><strong>Affect on Traces:</strong>  Undefined.  The <see cref="M:Agilent.SA.Vsa.Measurement.PresetTraces"/>, <see cref="M:Agilent.SA.Vsa.TraceCollection.RemoveExtra"/>, 
            and <see cref="M:Agilent.SA.Vsa.TraceCollection.ArrangeWindows(Agilent.SA.Vsa.ArrangeWindowHints)"/> methods may be useful in presetting traces to a default
            number, result assignment, and layout after changing the channel configuration.
            </para>
            </remarks>
            <param name="logicalChannelIds">The logical channel identifiers that correspond to the desired logical channels.</param>
            <exception cref="T:System.ArgumentNullException">logicalChannelIds is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">logicalChannelIds is not possible with the currently selected hardware.</exception>
        </member>
        <member name="M:Agilent.SA.Vsa.Input.ChangeLogicalChannels(Agilent.SA.Vsa.ChannelId[])">
            <summary>
            Changes the input channel configuration for the current measurement by specifying specific input channels 
            (using <see cref="T:Agilent.SA.Vsa.ChannelId">channel identifiers</see>).
            </summary>
            <remarks>
            This method assumes that each of the specified input channels will be used as a logical channel.  Internally it uses an 
            instance of <see cref="T:Agilent.SA.Vsa.LogicalChannelId"/> for each specified input channel with the 
            <see cref="T:Agilent.SA.Vsa.LogicalChannelOperation"/> set to <see cref="F:Agilent.SA.Vsa.LogicalChannelOperation.None"/>.
            <para><strong>Hardware Interchangeability:</strong>  Do not use this method if hardware interchangeability is important.  
            A channel identifier is only valid and unique within the context of the model(s) of hardware being used.</para>
            <para><strong>Affect on Traces:</strong>  Undefined.  The <see cref="M:Agilent.SA.Vsa.Measurement.PresetTraces"/>, <see cref="M:Agilent.SA.Vsa.TraceCollection.RemoveExtra"/>, 
            and <see cref="M:Agilent.SA.Vsa.TraceCollection.ArrangeWindows(Agilent.SA.Vsa.ArrangeWindowHints)"/> methods may be useful in presetting traces to a default
            number, result assignment, and layout after changing the channel configuration.
            </para>
            </remarks>
            <param name="inputChannelIds">The channel identifiers that correspond to the desired channels.  See <see cref="T:Agilent.SA.Vsa.ChannelId"/>.</param>
            <exception cref="T:System.ArgumentNullException">inputChannelIds is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">inputChannelIds is not possible with the currently selected hardware.</exception>
        </member>
        <member name="M:Agilent.SA.Vsa.Input.ChangeLogicalChannels(System.Int32[])">
            <summary>
            Changes the input channel configuration for the current measurement by specifying specific input channels using 
            channel numbers with the assumption that all channels are in the first group of instruments for the 
            <see cref="P:Agilent.SA.Vsa.Measurement.SelectedAnalyzer"/>.
            </summary>
            <remarks>
            This method assumes that each of the specified input channels will be used as a logical channel. Internally it 
            uses an instance of <see cref="T:Agilent.SA.Vsa.LogicalChannelId"/> for each specified input channel with the 
            <see cref="T:Agilent.SA.Vsa.LogicalChannelOperation"/> set to <see cref="F:Agilent.SA.Vsa.LogicalChannelOperation.None"/> and each <see cref="T:Agilent.SA.Vsa.ChannelId"/>
            instance with <see cref="P:Agilent.SA.Vsa.ChannelId.Group"/> set to 1 (i.e. all channels assumed to be in the first group of instruments
            for the currently selected analyzer).
            <para><strong>Hardware Interchangeability:</strong>  Do not use this method if hardware interchangeability is important.  
            A channel identifier is only valid and unique within the context of the model(s) of hardware being used.</para>
            <para><strong>Affect on Traces:</strong>  Undefined.  The <see cref="M:Agilent.SA.Vsa.Measurement.PresetTraces"/>, <see cref="M:Agilent.SA.Vsa.TraceCollection.RemoveExtra"/>, 
            and <see cref="M:Agilent.SA.Vsa.TraceCollection.ArrangeWindows(Agilent.SA.Vsa.ArrangeWindowHints)"/> methods may be useful in presetting traces to a default
            number, result assignment, and layout after changing the channel configuration.
            </para>
            </remarks>
            <param name="channels">The channel numbers that correspond to the desired channels.  This is the equivalent of <see cref="T:Agilent.SA.Vsa.ChannelId"/> with the
            Group part of it set to the first group.</param>
            <exception cref="T:System.ArgumentNullException">channels is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">channels is not possible with the currently selected hardware.</exception>
        </member>
        <member name="M:Agilent.SA.Vsa.Input.ChangeMeasurementChannels(System.Int32[])">
            <summary>
            Selects which logical channels to use as measurement channels for this measurement.
            </summary>
            <remarks>
            <para>
            In order to get an array of the current logical channel indexes used for each measurement channel the IndexOf 
            method on the LogicalChannels collection can be used with an item from the MeasurementChannels.  So for example 
            in C# using a Linq expression the following code would return an array of the current logical channel indexes
            used for each measurement channel.
            <code>MeasurementChannels.Select(chan =&gt; LogicalChannels.IndexOf(chan)).ToArray();
            </code>
            </para>
            </remarks>
            <param name="logicalChannelIndexes">The zero-based logical channel indexes that correspond to which logical channels to use 
            as measurement channels in the measurement.
            </param>
            <exception cref="T:System.ArgumentException">If the array is empty, any values are negative, duplicates of other values in the 
            array, or for logical channel indexes that are out of range.</exception>
            <version>15.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Input.LogicalChannelTypesSupported">
            <summary>
            Gets a collection of the <see cref="T:Agilent.SA.Vsa.LogicalChannelType">logical channel types</see> that are supported by the 
            currently selected hardware for this measurement.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Input.LogicalChannels">
            <summary>
            Gets the collection of logical input channels that is currently used by the measurement.
            </summary>
            <remarks>
            <para>The ChangeLogicalChannels methods affect this collection.  When a ChangeLogicalChannel method is called 
            that changes the input channel configuration and causes this collection to be rebuilt.</para>
            <para>Logical channels may consist of more than one input channel (such as when an I+jQ operation is being performed
            where two baseband input channels are combined as Ch1 + j* Ch2).  Some parts of the API deal with channels on a logical
            channel basis (such as the <see cref="T:Agilent.SA.Vsa.Frequency"/> parameters) while other parts deal with channels on a physical
            input channel basis (such as the <see cref="T:Agilent.SA.Vsa.Analog"/> parameters).</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Input.DataFrom">
            <summary>
            Gets or sets whether measurement data comes from the hardware or a recording.
            </summary>
            <remarks>
            <para>
            When you select data from a recording, the recording resides in a file, by default, the Recording.sdf file is in your DATA directory. 
            You can change the location of the file with the TempFile property. When you make a new recording from the hardware 
            (<see cref="M:Agilent.SA.Vsa.Measurement.Record"/>), 
            the TempFile is over written. If you want to keep a recording, you need to save it to another file (
            <see cref="M:Agilent.SA.Vsa.Recording.SaveFile(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">Recording.SaveFile</see>).  Note that 
            when you play back a recording (even if it has been saved to a file and then recalled), you are playing the raw digital data and it 
            plays back as if it were any other input. This means that you can further manipulate the data, making additional measurements.
            Conversely, when you save a trace to a file, you save the result of the particular measurement in effect at the time. This means that you 
            cannot replay it as either input or recording, because you are no longer able to manipulate the data, only the presentation. Traces saved 
            are re-displayed Via the data registers.
            </para>
            <para><strong>Note:</strong>  When you save a Trace or a Recording, header information should always be included unless you intend to 
            import the data into another application such as a database or some other signal analysis program and you want only the data in the file. 
            Without the header data, the VsaVector and VsaScalar applications cannot reproduce the measurement conditions in effect when the trace or 
            recording was created. Details can be found in the 89600 Application "Sharing Data" help.
            </para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Input.Recording">
            <summary>
            Gets the <see cref="P:Agilent.SA.Vsa.Input.Recording"/> object for the measurement.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Input.Trigger">
            <summary>
            Gets the <see cref="T:Agilent.SA.Vsa.InputTrigger"/> object for the measurement.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Input.Analog">
            <summary>
            Gets the <see cref="T:Agilent.SA.Vsa.Analog"/> object for the measurement.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Input.Extensions">
            <summary>
            Gets a reference to a collection of objects (one per hardware group) for custom input parameters.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Input.Digital">
            <summary>
            Gets the <see cref="T:Agilent.SA.Vsa.Digital"/> object for the measurement.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Input.MeasurementChannels">
            <summary>
            Gets the collection of logical input channels that is currently used as measurement channels by the measurement.
            </summary>
            <remarks>
            <para>
            The <see cref="M:Agilent.SA.Vsa.Input.ChangeMeasurementChannels(System.Int32[])"/> method affects this collection.  When that method is called it 
            changes which items from the <see cref="P:Agilent.SA.Vsa.Input.LogicalChannels"/> collection are used as measurement channels for this measurement.
            The <see cref="P:Agilent.SA.Vsa.Input.LogicalChannels"/> collection must have the same input channel configuration for all measurements that share 
            a hardware configuration.  But, each measurement can be setup to use specific logical channels from the input channel configuration.  This
            collection can therefore be setup to have an ordered subset of the logical channels that are in the <see cref="P:Agilent.SA.Vsa.Input.LogicalChannels"/> collection.
            </para>
            <para>
            The default behavior if the <see cref="M:Agilent.SA.Vsa.Input.ChangeMeasurementChannels(System.Int32[])"/> method is not called is for this
            collection to track what the <see cref="P:Agilent.SA.Vsa.Input.LogicalChannels"/> collection is.  Whenever the input channel configuration 
            (<see cref="P:Agilent.SA.Vsa.Input.LogicalChannels"/>) is changed this collection will be preset to track it.  That means that whenever
            the <see cref="P:Agilent.SA.Vsa.Input.LogicalChannels"/> collection is changed that the <see cref="M:Agilent.SA.Vsa.Input.ChangeMeasurementChannels(System.Int32[])"/>method 
            must be called if the desire is to use a subset of the logical channels for the measurement.
            </para>
            <para>
            When a measurement preset is performed this collection will be preset back to tracking the <see cref="P:Agilent.SA.Vsa.Input.LogicalChannels"/> collection.
            </para>
            </remarks>
            <version>15.00</version>
        </member>
        <member name="T:Agilent.SA.Vsa.LogicalChannelType">
            <summary>
            Describes the kind of logical channel.
            </summary>
            <seealso cref="M:Agilent.SA.Vsa.Input.ChangeLogicalChannels(Agilent.SA.Vsa.LogicalChannelType[])"/>
            <seealso cref="P:Agilent.SA.Vsa.InputLogicalChannel.ChannelType"/>
        </member>
        <member name="F:Agilent.SA.Vsa.LogicalChannelType.RF">
            <summary>
            Input from an instrument with an A/D converter where the <see cref="P:Agilent.SA.Vsa.Frequency.IsZoom"/> property 
            typically cannot be set to false when this type of input is used.
            <para/>
            RF channel type refers to channels where the analog frequency down converter (mixer) is
            before the A/D converter.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.LogicalChannelType.Baseband">
            <summary>
            Input from an instrument with an A/D converter where the <see cref="P:Agilent.SA.Vsa.Frequency.IsZoom"/> property can 
            be set to false when this type of input is used.
            <para/>
            Baseband channel type refers to channels where there is no analog frequency down converter (mixer) 
            before the A/D converter.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.LogicalChannelType.IQ">
            <summary>
            Two baseband inputs are combined as Input1 + j*Input2.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.LogicalChannelType.User">
            <summary>
            Input from external software where the channel type may not be known initially or
            may change dynamically based upon control from the external software.
            </summary>
            <para/>
            User channel type is used by software simulators or when external software is controlling the hardware.
        </member>
        <member name="F:Agilent.SA.Vsa.LogicalChannelType.Digital">
            <summary>
            Input from types of digital logic instruments (such as a logic analyzer).
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.LogicalChannelType.ExternalMixer">
            <summary>
            Input that is specifically designed to be used with an external mixer.
            </summary>
            <version>15.00</version>
        </member>
        <member name="T:Agilent.SA.Vsa.InputLogicalChannel">
            <summary>
            Represents a logical input channel.
            </summary>
            <remarks>
            <para>
            A <see cref="T:Agilent.SA.Vsa.InputLogicalChannel">logical input channel</see> may be composed of one or more <see cref="T:Agilent.SA.Vsa.InputChannel">
            input channels (physical channel)</see>.  Some parts of the API (such as <see cref="P:Agilent.SA.Vsa.Frequency.Channels"/> and 
            <see cref="M:Agilent.SA.Vsa.Input.ChangeLogicalChannels(Agilent.SA.Vsa.LogicalChannelType[])"/>) deal 
            with settings on a per logical channel basis while other parts (like 
            <see cref="P:Agilent.SA.Vsa.Analog.Channels"/>, etc.) deal with settings on a per input channel (physical channel) basis.
            </para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.InputLogicalChannel.Operation">
            <summary>
            Gets the operation that is done when combining the inputs within this logical channel.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.InputLogicalChannel.InputChannels">
            <summary>
            Gets a collection of the input channels that form this logical channel.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.InputLogicalChannel.ChannelType">
            <summary>
            Gets the type of logical channel.
            </summary>
            <remarks>
            <para>
            The <see cref="T:Agilent.SA.Vsa.LogicalChannelType"/> is used in the <see cref="M:Agilent.SA.Vsa.Input.ChangeLogicalChannels(Agilent.SA.Vsa.LogicalChannelType[])"/> method 
            to change the channel configuration.
            </para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.InputLogicalChannel.Id">
            <summary>
            Gets a unique identifier for this logical channel (within the context of the current hardware).
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.InputLogicalChannel.DisplayName">
            <summary>
            Gets the display name for this logical channel.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.InputLogicalChannelCollection">
            <summary>
            Represents a collection of logical input channels.
            </summary>
            <remarks>
            <para>
            A <see cref="T:Agilent.SA.Vsa.InputLogicalChannel">logical input channel</see> may be composed of one or more <see cref="T:Agilent.SA.Vsa.InputChannel">
            input channels (physical channel)</see>.  Some parts of the API (such as <see cref="P:Agilent.SA.Vsa.Frequency.Channels"/> and 
            <see cref="M:Agilent.SA.Vsa.Input.ChangeLogicalChannels(Agilent.SA.Vsa.LogicalChannelType[])"/>) deal 
            with settings on a per logical channel basis while other parts (like <see cref="P:Agilent.SA.Vsa.Analog.Channels"/>, etc.) 
            deal with settings on a per input channel (physical channel) basis.
            </para>
            <para>
            <strong>Note:</strong>  Use the <see cref="M:Agilent.SA.Vsa.Input.ChangeLogicalChannelsByCount(System.Int32)"/> or 
            <see cref="M:Agilent.SA.Vsa.Input.ChangeLogicalChannels(Agilent.SA.Vsa.LogicalChannelType[])"/> methods to change this collection.
            </para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.InputLogicalChannelCollection.MaxCount">
            <summary>
            Gets the maximum number of concurrent logical channels that are possible with the currently selected hardware.
            </summary>
            <remarks>
            <para>This is not the active channel count.  The Input.LogicalChannels.Count property returns the count of currently
            active logical channels.  This property returns the maximum possible count for this collection with the current
            hardware.</para>
            <para><strong>Note:</strong>  Use the <see cref="M:Agilent.SA.Vsa.Input.ChangeLogicalChannelsByCount(System.Int32)"/> or 
            <see cref="M:Agilent.SA.Vsa.Input.ChangeLogicalChannels(Agilent.SA.Vsa.LogicalChannelType[])"/> methods to change this collection.
            </para>
            </remarks>
        </member>
        <member name="T:Agilent.SA.Vsa.Macro">
            <summary>
            This class represents a user-supplied code element that is used to programmatically control the Keysight 89600 VSA software.
            </summary>
            <remarks>
            Macros allow the user to automate a set of actions performed using the user interface. You can record a macro by starting
            the macro recording mode on the Utility &gt; Macros dialog. As you perform a set of actions from the user interface, the code
            required to replicate those actions via the public API is recorded. When the "End Record" button is pressed, the code
            is emitted into a new macro in the currently selected recording language.
            <para/>
            Macros are each stored in a separate subdirectory with the same name as the macro. The directory contains the recorded source
            code, a Microsoft Visual Studio-compatible project file, and additional infrastructure code to allow the macro to be run as an
            external process. Compatible versions of Microsoft Visual Studio include both 2008 and 2010. The Visual C# and Visual Basic
            Express editions will also work.
            <para/>
            When a macro is run from the Keysight 89600 VSA software user interface, the assembly containing the macro code is loaded into
            the Keysight 89600 VSA software process, the macro code is run, and when it returns the assembly is unloaded. The code runs in a separate
            thread so it cannot impeded the responsiveness of the rest of the application.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Macro.Build">
            <summary>
            Initiates a build of the macro.
            </summary>
            <remarks>
            The Build() method initiates a build of the current macro. The process of turning the macro source code into
            executable code is performed using the .NET Framework MSBuild utility. The build operation is performed by a
            background thread. This method initiates the build operation and returns immediately without waiting for the
            build to complete. If the results of the build are needed, the caller can watch for a PropertyChanged notification
            on the <see cref="P:Agilent.SA.Vsa.Macro.IsBuilding"/> property. When <see cref="P:Agilent.SA.Vsa.Macro.IsBuilding"/> toggles from true to false, the
            <see cref="P:Agilent.SA.Vsa.Macro.BuildStatus"/> property will contain a list of warnings and errors.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Macro.Quit">
            <summary>
            Request the macro to stop running.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.Macro.Run">
            <summary>
            Start the macro running.
            </summary>
            <remarks>
            Macros run on a background thread. This method starts the macro running and returns immediately. The
            macro will run until it terminates on its own, or the <see cref="M:Agilent.SA.Vsa.Macro.Quit"/> method is called. If the caller
            needs to know the termination status of the macro, watch for a PropertyChanged notification on the
            <see cref="P:Agilent.SA.Vsa.Macro.IsRunning"/> property. When <see cref="P:Agilent.SA.Vsa.Macro.IsRunning"/> toggles from true to false, then the
            <see cref="P:Agilent.SA.Vsa.Macro.TerminationStatus"/> property can be queried to determine why the macro terminated.
            <para/>
            Note that it is possible to run multiple macros simultaneously. Each macro runs on its own thread. It is
            up to the caller to ensure that the macros do not interfere with each other by attempting to perform
            conflicting actions.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Macro.BuildStatus">
            <summary>
            Gets any errors or warnings from the previous <see cref="M:Agilent.SA.Vsa.Macro.Build"/> operation.
            </summary>
            <remarks>
            This collection contains the list of warnings and errors resulting from the last, completed <see cref="M:Agilent.SA.Vsa.Macro.Build"/>
            operation. If the build was successful, an empty list is returned.
            </remarks>
            <version>14.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Macro.CodePath">
            <summary>
            Gets the absolute path to the file containing the macro source code.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Macro.IsBuilding">
            <summary>
            Gets a value indicating whether a build operation is currently in progress for the current macro.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Macro.IsCurrent">
            <summary>
            Gets a value indicating whether a <see cref="M:Agilent.SA.Vsa.Macro.Build"/> is required.
            </summary>
            <remarks>
            If the source code for the macro is newer than the executable code or no executable code exists, this property will return true.
            Otherwise it will return false.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Macro.IsRunnable">
            <summary>
            Gets a value indicating whether the macro is ready to run.
            </summary>
            <remarks>
            This property returns true if executable code for the macro exists. The <see cref="P:Agilent.SA.Vsa.Macro.IsCurrent"/>
            property provides an indication of whether the macro has been built since the last change to its
            source code.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Macro.IsRunning">
            <summary>
            Gets a value indicating whether the macro is currently running or not.
            </summary>
            <remarks>
            Macros run on a background thread.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Macro.Language">
            <summary>
            Gets the language in which the macro is implemented.
            </summary>
            <remarks>
            The returned value will be one of those returned by the 
            <see cref="P:Agilent.SA.Vsa.MacroCollection.AvailableMacroLanguages">MacroCollection.AvailableMacroLanguages</see>
            property
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Macro.Name">
            <summary>
            Gets or sets the name of the macro.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Macro.TerminationStatus">
            <summary>
            Gets the termination status of the last completed <see cref="M:Agilent.SA.Vsa.Macro.Run"/> operation.
            </summary>
            <remarks>
            If the previous run terminated without error, null is returned. Otherwise, the exception that caused the
            macro to terminate is returned.
            </remarks>
            <version>14.00</version>
        </member>
        <member name="T:Agilent.SA.Vsa.IMacroRun">
            <summary>
            An interface for a macro that can be run.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.IMacroRun.Run(Agilent.SA.Vsa.Application)">
            <summary>
            Run the macro.
            </summary>
            <param name="app">A reference to the application for the macro to use.</param>
        </member>
        <member name="T:Agilent.SA.Vsa.MacroCollection">
            <summary>
            This collection contains the set of <see cref="T:Agilent.SA.Vsa.Macro"/> objects currently loaded in the application.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.MacroCollection.Create">
            <summary>
            Create a new, empty macro.
            </summary>
            <returns>A handle to the newly created macro.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.MacroCollection.Create(System.String)">
            <summary>
            Create a new, empty macro with the supplied name.
            </summary>
            <param name="name">The name for the new macro.</param>
            <returns>A handle to the newly created macro.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the supplied name already exists in the collection.</exception>
        </member>
        <member name="M:Agilent.SA.Vsa.MacroCollection.Remove(Agilent.SA.Vsa.Macro)">
            <summary>
            Remove a macro from the collection.
            </summary>
            <param name="item">Macro to remove from the collection</param>
            <returns>True, if the macro was removed from the collection.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.MacroCollection.RemoveAt(System.Int32)">
            <summary>
            Remove a macro from the collection.
            </summary>
            <param name="index">Zero-based index of macro to remove from the collection</param>
            <returns>True, if the macro was removed from the collection.</returns>
        </member>
        <member name="P:Agilent.SA.Vsa.MacroCollection.AvailableMacroLanguages">
            <summary>
            Gets the list of currently supported macro recording languages.
            </summary>
            <remarks>
            This property returns the list of languages supported for macro recording. To set or get the
            current recording language, see the <see cref="P:Agilent.SA.Vsa.MacroCollection.RecordingLanguage"/> property.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.MacroCollection.RecordingLanguage">
            <summary>
            Gets or sets the language used when a new macro is recorded or created.
            </summary>
            <remarks>
            The currently supported choices are available from the <see cref="P:Agilent.SA.Vsa.MacroCollection.AvailableMacroLanguages"/> property.
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown if the requested language is not in the list returned
            by the <see cref="P:Agilent.SA.Vsa.MacroCollection.AvailableMacroLanguages"/> property.</exception>
        </member>
        <member name="P:Agilent.SA.Vsa.MacroCollection.SelectedIndex">
            <summary>
            Gets or sets the index of the current macro.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.MacroCollection.SelectedItem">
            <summary>
            Gets or sets the current macro.
            </summary>
            <remarks>
            This property is primarily used for the benefit of the user interface.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.MacroCollection.Item(System.String)">
            <summary>
            Returns the named macro from the collection.
            </summary>
            <param name="name">The name of the macro to retrieve. The name is case sensitive.</param>
            <returns>The named macro, or null if no macro of the supplied name exists.</returns>
        </member>
        <member name="T:Agilent.SA.Vsa.MarkersLimitTestResult">
            <summary>The result of a limit test</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MarkersLimitTestResult.None">
            <summary>No test result available (test was not run).</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MarkersLimitTestResult.Pass">
            <summary>Limit test passed.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MarkersLimitTestResult.Fail">
            <summary>Limit test failed.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.MarkersPolar">
            <summary>Specifies the polar format for the marker</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MarkersPolar.MagnitudePhase">
            <summary>Specifies magnitude and phase format.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MarkersPolar.RealImaginary">
            <summary>Specifies real and imaginary format.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.MarkersPeakOrder">
            <summary>Specifies the order of the peak markers.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MarkersPeakOrder.X">
            <summary>The peak order is by the X-axis.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MarkersPeakOrder.Y">
            <summary>The peak order is by the Y-axis.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.LimitResultData">
            <summary>The result from a <see cref="T:Agilent.SA.Vsa.LimitLine">Limit Line</see>.</summary>
        </member>
        <member name="M:Agilent.SA.Vsa.LimitResultData.#ctor(System.String,Agilent.SA.Vsa.LimitLineDisplay,Agilent.SA.Vsa.MarkersLimitTestResult,System.Double,System.Double)">
            <summary>Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.LimitResultData"/> class.</summary>
            <param name="name">The name of the <see cref="T:Agilent.SA.Vsa.LimitLine"/>.</param>
            <param name="display">Whether this is a limit or a margin.</param>
            <param name="result">The pass/fail status of the <see cref="T:Agilent.SA.Vsa.LimitLine"/></param>
            <param name="x">The X-value of the highest Y failure point, or the lowest margin point if <see cref="T:Agilent.SA.Vsa.LimitLine"/> passed.</param>
            <param name="y">The Y-value of the highest Y failure point, or the lowest margin point if <see cref="T:Agilent.SA.Vsa.LimitLine"/> passed.</param>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitResultData.Name">
            <summary>Gets the name of the <see cref="T:Agilent.SA.Vsa.LimitLine"/>.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitResultData.Display">
            <summary>Gets whether this is a limit or a margin.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitResultData.Result">
            <summary>Gets the pass/fail status of the <see cref="T:Agilent.SA.Vsa.LimitLine"/></summary>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitResultData.X">
            <summary>Gets the X-value of the highest Y failure point, or the lowest margin point if the <see cref="T:Agilent.SA.Vsa.LimitLine"/> passed.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.LimitResultData.Y">
            <summary>Gets the Y-value of the highest Y failure point, or the lowest margin point if the <see cref="T:Agilent.SA.Vsa.LimitLine">limit line</see> passed.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.MarkerCollection">
            <summary>The MarkerCollection class contains a collection of <see cref="T:Agilent.SA.Vsa.Marker"/> objects. </summary>
            <remarks>
            <para>
            In addition, you can set global marker properties from this object, such as the polar format for the markers. 
            </para>
            <para>
            The collection contains a minimum of 1 Marker objects. 
            </para>
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.MarkerCollection.CloseTo(System.Windows.Point)">
            <summary>Return the closest visible marker to the passed pixel location.</summary>
            <param name="point">X/Y pixel location.</param>
            <returns>The closest marker, or null if no markers are visible.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.MarkerCollection.RemoveLast">
            <summary>Remove the last marker from the marker collection.</summary>
            <remarks>The first marker in the collection cannot be removed.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.MarkerCollection.Clear">
            <summary>Turn off all markers (<see cref="P:Agilent.SA.Vsa.Marker.IsVisible"/> set to False) for this trace.</summary>
        </member>
        <member name="M:Agilent.SA.Vsa.MarkerCollection.Create">
            <summary>
            Creates a new marker.
            </summary>
            <returns>A handle to the new marker.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.MarkerCollection.Remove(Agilent.SA.Vsa.Marker)">
            <summary>
            Remove a marker from the collection.
            </summary>
            <param name="item">Marker to remove from the collection</param>
            <returns>True, if the marker was removed from the collection.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.MarkerCollection.RemoveAt(System.Int32)">
            <summary>
            Remove a marker from the collection.
            </summary>
            <param name="index">Zero-based index of marker to remove from the collection</param>
            <returns>True, if the marker was removed from the collection.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.MarkerCollection.LimitResult(System.Int32)">
            <summary>Return the test result of the specified <see cref="T:Agilent.SA.Vsa.LimitLine">limit line</see>.</summary>
            <param name="index">The 0-based index into the group of <see cref="T:Agilent.SA.Vsa.LimitLine"/> results in the current <see cref="T:Agilent.SA.Vsa.LimitTest"/></param>
            <returns>The result of the <see cref="T:Agilent.SA.Vsa.LimitLine"/> calculation.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.MarkerCollection.TopPeaks(Agilent.SA.Vsa.MarkersPeakOrder,System.Int32)">
            <summary>
            Returns a list (pairs of x- and y-values) of all the peaks.
            </summary>
            <param name="peakOrder">Order of returned peaks, either by ascending X-values or by descending Y-values.</param>
            <param name="maximumPeakCount">Maximum # of peaks to return (no limit if maximumPeakCount &lt;= 0).</param>
            <returns>
            Returns an array of x- and y-values, one for each peak.  If no peaks are found, then an empty array is returned
            </returns>
            <version>18.50</version>
        </member>
        <member name="P:Agilent.SA.Vsa.MarkerCollection.SelectedIndex">
            <summary>Gets or sets the 0-based index of the selected <see cref="T:Agilent.SA.Vsa.Marker"/>.</summary>
            <remarks>
            The selected marker has the keyboard focus. Returns -1 if no marker is selected.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.MarkerCollection.SelectedItem">
            <summary>Gets or sets the selected <see cref="T:Agilent.SA.Vsa.Marker"/>.</summary>
            <remarks>
            The selected marker has the keyboard focus. Returns null if no marker is selected.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.MarkerCollection.IsObwVisible">
            <summary>Gets or sets a value indicating whether the OBW marker is visible.</summary>
            <remarks>
            This property turns the occupied bandwidth marker on and off for this trace. 
            The occupied bandwidth marker is only valid for frequency domain traces that are not normalized 
            (i.e. it does not work on PSD traces). 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.MarkerCollection.ObwPower">
            <summary>Gets or sets the fraction of the total power in the signal that is considered "in band".</summary>
            <remarks>
            This property is used by the occupied bandwidth marker calculation to specify 
            what percentage of the total trace power is included in the occupied bandwidth region of this trace. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.MarkerCollection.ObwCentroid">
            <summary>Gets the frequency, in Hz, of the calculated centroid of the occupied band.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.MarkerCollection.IsAcpVisible">
            <summary>Gets or sets a value indicating whether ACP markers are visible or not.</summary>
            <remarks>
            This property turns the adjacent channel marker on and off for this trace. 
            The adjacent channel marker is only valid for frequency domain traces that are not normalized 
            (i.e. it does not work on PSD traces). 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.MarkerCollection.AcpReferenceBW">
            <summary>Gets or sets the bandwidth of the carrier channel in Hz.</summary>
            <remarks>
            This property sets the bandwidth of the reference channel in an adjacent channel calculation. 
            This bandwidth is centered on the center frequency of the measurement. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.MarkerCollection.AcpReferenceOffsetFreq">
            <summary>Gets or sets the offset between the measurement center frequency and the reference carrier frequency.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.MarkerCollection.IsAcpRrcShape">
            <summary>Gets or sets a value indicating whether the ACP filter for the reference channel has an 
            RRC shape (true) or a rectangular shape (false). </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.MarkerCollection.AcpReferenceAlpha">
            <summary>Gets or sets  the RRC alpha value for the reference. </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.MarkerCollection.AcpAdjacentChannels">
            <summary>Gets the collection of ACP adjacent channels.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.MarkerCollection.IsLimitVisible">
            <summary>Gets or sets a value indicating whether the <see cref="T:Agilent.SA.Vsa.LimitTest">limit test</see> for this trace is enabled (visible). </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.MarkerCollection.LimitName">
            <summary>Gets or sets the name of the <see cref="T:Agilent.SA.Vsa.LimitTest">limit test</see> to apply to this trace. </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.MarkerCollection.LimitResultCount">
            <summary>Gets the number of <see cref="T:Agilent.SA.Vsa.LimitLine">limit line</see> test results available.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.MarkerCollection.IsCarrier">
            <summary>Gets or sets a value indicating whether the carrier marker is visible.</summary>
            <remarks>
            The Carrier property determines if the calculated carrier of an analog demodulation measurement will be displayed in the marker window.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.MarkerCollection.CarrierResult">
            <summary>Gets the result of the carrier marker. </summary>
            <remarks>
            The CarrierResult property returns the calculated carrier of an analog demodulation measurement. 
            The carrier marker (<see cref="P:Agilent.SA.Vsa.MarkerCollection.IsCarrier"/>) must be turned on before you can get the carrier marker result. 
            The carrier is zero if there is no carrier present. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.MarkerCollection.IsConsolidate">
            <summary>Gets or sets a value indicating whether the code domain Y marker values are consolidated.</summary>
            <remarks>
            Data values in a 3G Code Domain Power measurement result that are not at the base symbol rate are 
            contained in multiple points in the trace. 
            If the trace is shown in bit reverse code order, then these points will be next to each other.
            If the code order is Hadamard, then these points will be spread out through the trace. 
            If <see cref="P:Agilent.SA.Vsa.MarkerCollection.IsConsolidate"/> is True, then a marker will be shown at all points for this data value 
            (same code channel / symbol rate). 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.MarkerCollection.PolarFormat">
            <summary>Gets or sets if x-vs-y trace formats show markers as real/imaginary or magnitude/phase.</summary>
            <remarks>
            This property is only used if the <see cref="P:Agilent.SA.Vsa.Trace.Format">trace format</see> is I-Q or constellation. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.MarkerCollection.IsPeakThreshold">
            <summary>Gets or sets a value indicating whether <see cref="P:Agilent.SA.Vsa.MarkerCollection.PeakThreshold"/> is used to find a peak.</summary>
            <version>18.50</version>
        </member>
        <member name="P:Agilent.SA.Vsa.MarkerCollection.PeakThreshold">
            <summary>Gets or sets a value which is the minimum amplitude (dBm) threshold to indicate a peak.</summary>
            <remarks>
            All peaks found via <see cref="M:Agilent.SA.Vsa.Marker.MoveTo(Agilent.SA.Vsa.MarkerMoveType)"/> must be above this threshold.  This threshold only applies to amplitude
            traces.  This setting is only used if <see cref="P:Agilent.SA.Vsa.MarkerCollection.IsPeakThreshold"/> is set to true.
            </remarks>
            <version>18.50</version>
        </member>
        <member name="P:Agilent.SA.Vsa.MarkerCollection.IsPeakExcursion">
            <summary>Gets or sets a value indicating whether <see cref="P:Agilent.SA.Vsa.MarkerCollection.PeakExcursion"/> is used to find a peak.</summary>
            <version>18.50</version>
        </member>
        <member name="P:Agilent.SA.Vsa.MarkerCollection.PeakExcursion">
            <summary>Gets or sets a value which is the minimum amplitude (dB) excursion to indicate a peak.</summary>
            <remarks>
            All peaks found via <see cref="M:Agilent.SA.Vsa.Marker.MoveTo(Agilent.SA.Vsa.MarkerMoveType)"/> must meet this excursion criteria.  
            A signal must rise by at least this excursion value and then fall back from its local maximum by 
            at least this excursion value to be considered a peak.
            This excursion value only applies to amplitude traces.  If <see cref="P:Agilent.SA.Vsa.MarkerCollection.IsPeakThreshold"/> is true,
            then then minimum amplitude of a peak must be above the total of the peak excursion plus the
            <see cref="P:Agilent.SA.Vsa.MarkerCollection.PeakThreshold"/>.
            This setting is only used if <see cref="P:Agilent.SA.Vsa.MarkerCollection.IsPeakExcursion"/> is set to true.
            </remarks>
            <version>18.50</version>
        </member>
        <member name="T:Agilent.SA.Vsa.AcquisitionType">
            <summary>
            Specifies the type of acquisitions.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.AcquisitionType.Synchronous">
            <summary>
            Specifies Synchronous acquisition.  Acquisitions from the same hardware are combined.
            All measurement acquisitions are completed before any measurement result is calculated.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.AcquisitionType.Sequenced">
            <summary>
            Specifies Sequenced acquisition.  Acquisitions from the same hardware are separate and are sequenced.
            All measurement acquisitions are completed before any measurement result is calculated.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.MeasurementCollection">
            <summary>
            This collection contains the set of <see cref="T:Agilent.SA.Vsa.Measurement"/> objects.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementCollection.Create">
            <summary>
            Creates a new vector measurement.
            </summary>
            <returns>A handle to the new measurement.</returns>
            <remarks>
            Multiple measurements are not supported prior to release 15.0 of the Keysight 89600 VSA software.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementCollection.Create(System.String)">
            <summary>
            Creates a new vector measurement.
            </summary>
            <param name="name">The name to assign to the new measurement.</param>
            <returns>A handle to the new measurement.</returns>
            <remarks>
            Multiple measurements are not supported prior to release 15.0 of the Keysight 89600 VSA software.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementCollection.Create(System.Type)">
            <summary>
            Creates a new measurement of the specified type.
            </summary>
            <param name="measurementType">The type of measurement to create.</param>
            <returns>A handle to the new measurement.</returns>
            <remarks>
            Multiple measurements are not supported prior to release 15.0 of the Keysight 89600 VSA software.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementCollection.Create(System.Type,System.String)">
            <summary>
            Creates a new measurement of the specified type with the supplied name.
            </summary>
            <param name="measurementType">The type of measurement to create.</param>
            <param name="name">The name to assign to the new measurement.</param>
            <returns>A handle to the new measurement.</returns>
            <remarks>
            Multiple measurements are not supported prior to release 15.0 of the Keysight 89600 VSA software.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementCollection.Create(Agilent.SA.Vsa.Measurement)">
            <summary>
            Creates a new measurement identical to the supplied measurement.
            </summary>
            <param name="originalMeasurement">The measurement to be duplicated.</param>
            <returns>A handle to the new measurement.</returns>
            <version>15.0</version>	
            <exception cref="T:System.ArgumentException">Is raised if <paramref name="originalMeasurement"/> is not a current, valid measurement.</exception>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementCollection.Create(Agilent.SA.Vsa.Measurement,System.String)">
            <summary>
            Creates a new measurement identical to the supplied measurement.
            </summary>
            <param name="originalMeasurement">The measurement to be duplicated.</param>
            <param name="name">The name to assign to the new measurement.</param>
            <returns>A handle to the new measurement.</returns>
            <version>15.0</version>	
            <exception cref="T:System.ArgumentException">Is raised if <paramref name="originalMeasurement"/> is not a current, valid measurement.</exception>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementCollection.PauseAll">
            <summary>
            Obsolete (Use <see cref="M:Agilent.SA.Vsa.MeasurementCollection.Pause"/> method instead).
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementCollection.Remove(Agilent.SA.Vsa.Measurement)">
            <summary>
            Remove a Measurement from the collection.
            </summary>
            <param name="item">Measurement to remove from the collection</param>
            <returns>True, if the Measurement was removed from the collection.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementCollection.RemoveAt(System.Int32)">
            <summary>
            Remove a Measurement from the collection.
            </summary>
            <param name="index">Zero-based index of Measurement to remove from the collection</param>
            <returns>True, if the Measurement was removed from the collection.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementCollection.GetRunningMeasurements">
            <summary>
            Gets a collection of all the measurements that are running.
            </summary>
            <returns>The collection of running measurements.  The collection is empty if there are no running measurements.</returns>
            <version>15.00</version>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementCollection.GetRecordingMeasurements">
            <summary>
            Gets a collection of all the measurements that are recording.
            </summary>
            <remarks>
            <para>To stop recordings in progress, use <see cref="M:Agilent.SA.Vsa.Measurement.Pause">Measurement.Pause()</see> or
            <see cref="M:Agilent.SA.Vsa.MeasurementCollection.Pause">MeasurementCollection.Pause()</see>.</para>
            </remarks>
            <returns>The collection of recording measurements.  The collection is empty if there are no recording measurements.</returns>
            <version>15.0</version>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementCollection.Pause(System.Collections.Generic.IEnumerable{Agilent.SA.Vsa.Measurement})">
            <summary>
            Causes the specified measurements to transition to the Paused state.
            </summary>
            <param name="measurements">The list of measurements to pause.</param>
            <version>15.00</version>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementCollection.Preset">
            <summary>
            Presets the analyzer to a single, vector measurement.
            </summary>
            <remarks>
            This preset deletes all but the first measurement. The remaining measurement is preset to a vector measurement. This preset
            operation is the equivalent of <see cref="M:Agilent.SA.Vsa.Application.Preset"/> without <see cref="M:Agilent.SA.Vsa.Display.Preset"/>.
            </remarks>
            <version>15.00</version>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementCollection.Reset(System.Collections.Generic.IEnumerable{Agilent.SA.Vsa.Measurement})">
            <summary>
            Causes the passed measurements to transition to the Reset state.
            </summary>
            <param name="measurements">The list of measurements to reset.</param>
            <exception caption="" cref="T:System.InvalidOperationException">At least one Measurement in the collection cannot run concurrently with selected measurement (Measurement.IsConcurrent = false).</exception>
            <remarks>All measurements in the collection must be concurrently runnable with the <see cref="P:Agilent.SA.Vsa.MeasurementCollection.SelectedItem">selected measurement (app.Measurements.SelectedItem)</see> or a System.InvalidOperationException will be thrown.</remarks>
            <version>15.00</version>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementCollection.Pause">
            <summary>
            Pauses all of the running measurements.
            </summary>
            <remarks>This method also stops recordings that are in progress.</remarks>
            <returns>The collection of previously running measurements.  The collection is empty if there were no running measurements.</returns>
            <version>15.00</version>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementCollection.Reset">
            <summary>
            Reset all of the running measurements.
            </summary>
            <returns>The collection of previously running measurements.  The collection is empty if there were no running measurements.</returns>
            <version>15.00</version>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementCollection.Resume(System.Collections.Generic.IEnumerable{Agilent.SA.Vsa.Measurement})">
            <summary>
            Causes the passed measurements to transition to the Running state.
            </summary>
            <param name="measurements">The list of measurements to resume.</param>
            <exception caption="" cref="T:System.InvalidOperationException">At least one Measurement in the collection cannot run concurrently with selected measurement (Measurement.IsConcurrent = false).</exception>
            <remarks>All measurements in the collection must be concurrently runnable with the <see cref="P:Agilent.SA.Vsa.MeasurementCollection.SelectedItem">selected measurement (app.Measurements.SelectedItem)</see> or a System.InvalidOperationException will be thrown.</remarks>
            <version>15.00</version>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementCollection.Restart(System.Collections.Generic.IEnumerable{Agilent.SA.Vsa.Measurement})">
            <summary>
            Causes the passed measurements to restart. The Average count is reset to 0 and the measurements
            transitions to the Running State.
            </summary>
            <param name="measurements">The list of measurements to restart.</param>
            <exception caption="" cref="T:System.InvalidOperationException">At least one Measurement in the collection cannot run concurrently with selected measurement (Measurement.IsConcurrent = false).</exception>
            <remarks>All measurements in the collection must be concurrently runnable with the <see cref="P:Agilent.SA.Vsa.MeasurementCollection.SelectedItem">selected measurement (app.Measurements.SelectedItem)</see> or a System.InvalidOperationException will be thrown.</remarks>
            <version>15.00</version>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementCollection.Record(System.Collections.Generic.IEnumerable{Agilent.SA.Vsa.Measurement})">
            <summary>
            Causes the passed measurements to record.
            </summary>
            <param name="measurements">The list of measurements to record.</param>
            <exception caption="" cref="T:System.InvalidOperationException">At least one Measurement in the collection cannot run concurrently with selected measurement (Measurement.IsConcurrent = false).</exception>
            <remarks>
            <para>All measurements in the collection must be concurrently runnable with the <see cref="P:Agilent.SA.Vsa.MeasurementCollection.SelectedItem">selected measurement (app.Measurements.SelectedItem)</see> or a System.InvalidOperationException will be thrown.</para>
            <para>To stop recordings in progress, use <see cref="M:Agilent.SA.Vsa.Measurement.Pause">Measurement.Pause()</see> or
            <see cref="M:Agilent.SA.Vsa.MeasurementCollection.Pause">MeasurementCollection.Pause()</see>.</para>
            </remarks>
            <version>15.0</version>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementCollection.WaitForMeasurementsDone(System.Collections.Generic.IEnumerable{Agilent.SA.Vsa.Measurement},System.Int32)">
            <summary>Wait for all of the specified measurements to complete.</summary>
            <param name="measurements">The list of measurements to wait until complete.</param>
            <param name="msTimeout">The number of milliseconds to wait.</param>
            <exception caption="" cref="T:System.TimeoutException">A TimeoutException will be thrown if all of the specified measurements are 
            not complete within the specified number of milliseconds.</exception>
            <remarks>
            <para>For non-averaged measurements, one cycle is all that is required. For
            averaged measurements, the average must complete.</para>
            </remarks>
            <version>15.0</version>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementCollection.WaitForMeasurementsDone(System.Collections.Generic.IEnumerable{Agilent.SA.Vsa.Measurement})">
            <summary>Wait 10 seconds for all of the specified measurements to complete.</summary>
            <param name="measurements">The list of measurements to wait until complete.</param>
            <exception caption="" cref="T:System.TimeoutException">A TimeoutException will be thrown if all of the specified measurements are 
            not complete within the specified number of milliseconds.</exception>
            <remarks>
            <para>For non-averaged measurements, one cycle is all that is required. For
            averaged measurements, the average must complete.</para>
            </remarks>
            <version>15.0</version>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementCollection.WaitForMeasurementsDone(System.Int32)">
            <summary>Wait for all of the measurements to complete.</summary>
            <param name="msTimeout">The number of milliseconds to wait.</param>
            <exception caption="" cref="T:System.TimeoutException">A TimeoutException will be thrown if all of the measurements are 
            not complete within the specified number of milliseconds.</exception>
            <remarks>
            <para>For non-averaged measurements, one cycle is all that is required. For
            averaged measurements, the average must complete.</para>
            </remarks>
            <version>15.0</version>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementCollection.WaitForMeasurementsDone">
            <summary>Wait 10 seconds for all of the measurements to complete.</summary>
            <exception caption="" cref="T:System.TimeoutException">A TimeoutException will be thrown if all of the measurements are 
            not complete within the specified number of milliseconds.</exception>
            <remarks>
            <para>For non-averaged measurements, one cycle is all that is required. For
            averaged measurements, the average must complete.</para>
            </remarks>		
            <version>15.0</version>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementCollection.WaitForRecordingsDone(System.Collections.Generic.IEnumerable{Agilent.SA.Vsa.Measurement},System.Int32)">
            <summary>Wait for all of the specified recordings to complete.</summary>
            <param name="measurements">The list of recordings to wait until complete.</param>
            <param name="msTimeout">The number of milliseconds to wait.</param>
            <exception caption="" cref="T:System.TimeoutException">A TimeoutException will be thrown if all of the specified recordings are 
            not complete within the specified number of milliseconds.</exception>
            <remarks>
            <para>To stop recordings in progress, use <see cref="M:Agilent.SA.Vsa.Measurement.Pause">Measurement.Pause()</see> or
            <see cref="M:Agilent.SA.Vsa.MeasurementCollection.Pause">MeasurementCollection.Pause()</see>.</para>
            </remarks>	
            <version>15.0</version>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementCollection.WaitForRecordingsDone(System.Collections.Generic.IEnumerable{Agilent.SA.Vsa.Measurement})">
            <summary>Wait 10 seconds for all of the specified recordings to complete.</summary>
            <param name="measurements">The list of recordings to wait until complete.</param>
            <exception caption="" cref="T:System.TimeoutException">A TimeoutException will be thrown if all of the specified recordings are 
            not complete within the specified number of milliseconds.</exception>
            <remarks>
            <para>To stop recordings in progress, use <see cref="M:Agilent.SA.Vsa.Measurement.Pause">Measurement.Pause()</see> or
            <see cref="M:Agilent.SA.Vsa.MeasurementCollection.Pause">MeasurementCollection.Pause()</see>.</para>
            </remarks>	
            <version>15.0</version>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementCollection.WaitForRecordingsDone(System.Int32)">
            <summary>Wait for all of the recordings to complete.</summary>
            <param name="msTimeout">The number of milliseconds to wait.</param>
            <exception caption="" cref="T:System.TimeoutException">A TimeoutException will be thrown if all of the recordings are 
            not complete within the specified number of milliseconds.</exception>
            <remarks>
            <para>To stop recordings in progress, use <see cref="M:Agilent.SA.Vsa.Measurement.Pause">Measurement.Pause()</see> or
            <see cref="M:Agilent.SA.Vsa.MeasurementCollection.Pause">MeasurementCollection.Pause()</see>.</para>
            </remarks>	
            <version>15.0</version>
        </member>
        <member name="M:Agilent.SA.Vsa.MeasurementCollection.WaitForRecordingsDone">
            <summary> Wait 10 seconds for all of the recordings to complete.</summary>
            <exception caption="" cref="T:System.TimeoutException">A TimeoutException will be thrown if all of the recordings are 
            not complete within the specified number of milliseconds.</exception>
            <remarks>
            <para>To stop recordings in progress, use <see cref="M:Agilent.SA.Vsa.Measurement.Pause">Measurement.Pause()</see> or
            <see cref="M:Agilent.SA.Vsa.MeasurementCollection.Pause">MeasurementCollection.Pause()</see>.</para>
            </remarks>	
            <version>15.0</version>
        </member>
        <member name="P:Agilent.SA.Vsa.MeasurementCollection.SelectedItem">
            <summary>
            Gets or sets the currently selected measurement.
            </summary>
            <remarks>
            The selected measurement is the one that is currently being manipulated by the user interface.
            <para/>
            Multiple measurements are not supported prior to release 15.0 of the Keysight 89600 VSA software.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.MeasurementCollection.SelectedIndex">
            <summary>
            Gets or sets the index of the currently selected measurement.
            </summary>
            <remarks>
            The selected measurement is the one that is currently being manipulated by the user interface.
            <para/>
            Multiple measurements are not supported prior to release 15.0 of the Keysight 89600 VSA software.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.MeasurementCollection.Item(System.String)">
            <summary>
            Returns a handle to the named measurement.
            </summary>
            <param name="name">The name of the measurement to retrieve.</param>
            <returns>A handle to the measurement. If no measurement with the specified name exists then
            null is returned.</returns>
        </member>
        <member name="P:Agilent.SA.Vsa.MeasurementCollection.Acquisition">
            <summary>
            Gets or sets a value indicating how the timing of measurement data acquisition and
            measurement result calculations should be related between different measurements. 
            </summary>
            <version>18.50</version>
        </member>
        <member name="T:Agilent.SA.Vsa.PrintContentType">
            <summary>
            Defines which content to print.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.PrintContentType.MainWindow">
            <summary>
            Print the contents of the main window.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.PrintContentType.IndividualResults">
            <summary>
            Print the contents of individual traces and windows.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.BitmapType">
            <summary>
            Defines the image format to save to disk.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.BitmapType.Bmp">
            <summary>
            Bitmap Format
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.BitmapType.Gif">
            <summary>
            Graphics Interchange Format
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.BitmapType.Jpeg">
            <summary>
            Joint Photographic Experts Group
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.BitmapType.Png">
            <summary>
            Portable Network Graphics
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.BitmapType.Tiff">
            <summary>
            Tagged Image File Format
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.BitmapType.Wmp">
            <summary>
            Windows Media Photo
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.PrintScalingType">
            <summary>
            Defines how to fit image on paper.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.PrintScalingType.MaintainAspect">
            <summary>
            Maintain the aspect ratio of the original content.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.PrintScalingType.StretchToFit">
            <summary>
            Stretch the content to fit the media.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.PageOrientationType">
            <summary>
            Define the orientation of the printed content on the media.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.PageOrientationType.Landscape">
            <summary>
            Landscape orientation
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.PageOrientationType.Portrait">
            <summary>
            Portrait orientation
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.Printer">
            <summary>
            This class defines members to control printing various content or saving it to image files on disk.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.Printer.Print">
            <summary>
            Prints the main window.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.Printer.Print(System.Collections.Generic.IList{Agilent.SA.Vsa.View})">
            <summary>
            Prints a selected set of content.
            </summary>
            <param name="results">A list of <see cref="T:Agilent.SA.Vsa.View"/> objects to print. The list of all printable views
            can be retrieved using the <see cref="P:Agilent.SA.Vsa.Display.Views">Display.Views</see> property. Note that you can
            print either individual results (traces, marker window, output window, etc.) or full windows (the
            main window or any trace windows), but not a mixture of the two. Any attempt to mix individual
            results and windows in a single call will lead to an <see cref="T:System.ArgumentException"/> being
            generated.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.Printer.SaveBitmap(System.String,Agilent.SA.Vsa.BitmapType)">
            <summary>
            Save an image of the main window to the named file in the indicated format.
            </summary>
            <param name="fileName">The file name to which to save the image.</param>
            <param name="fileType">The desired image format.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.Printer.SaveBitmap(System.String,Agilent.SA.Vsa.BitmapType,System.Collections.Generic.IList{Agilent.SA.Vsa.View})">
            <summary>
            Save a selected set of content to the named file in the indicated format.
            </summary>
            <param name="fileName">The file name to which to save the content.</param>
            <param name="fileType">The desired image format.</param>
            <param name="results">A list of <see cref="T:Agilent.SA.Vsa.View"/> objects to save. The list of all views which can be saved to disk
            can be retrieved using the <see cref="P:Agilent.SA.Vsa.Display.Views">Display.Views</see> property.</param>
            <remarks>
            Currently the only image format that supports saving multiple images to a single file is <see cref="F:Agilent.SA.Vsa.BitmapType.Tiff"/>.
            Attempting to save multiple views to any other file type will lead to unpredictable results.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Printer.BottomMargin">
            <summary>
            Gets or sets the bottom page margin for printing, in inches.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Printer.LeftMargin">
            <summary>
            Gets or sets the left page margin for printing, in inches.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Printer.RightMargin">
            <summary>
            Gets or sets the right page margin for printing, in inches.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Printer.TopMargin">
            <summary>
            Gets or sets the top page margin for printing, in inches.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Printer.TraceMargin">
            <summary>
            Gets or sets the margin between pages when multiple pages are being printed on the same sheet, in inches.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Printer.IsWhiteBackground">
            <summary>
            Gets or sets a value indicating whether the trace background is forced to white.
            </summary>
            <remarks>
            Traces normally have a dark background. To save ink set this property to true. It will force the trace background
            to be set to white prior to printing. To maintain the visibility of the trace itself, light trace colors will be
            darkened on the printed image.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Printer.PagesPerSheet">
            <summary>
            Gets or sets the number of pages per sheet of media when printing.
            </summary>
            <remarks>
            The supported number of pages per sheet can be retrieved as follows:
            <code lang="CS">
            IPropertyInfo propInf = app.Display.Printer as IPropertyInfo;
            int[] validPagesPerSheet = propInf.ValidValues&lt;string&gt;("PagesPerSheet");
            </code>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Printer.PageOrientation">
            <summary>
            Gets or sets the page orientation to use when printing.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Printer.Scaling">
            <summary>
            Gets or sets how to scale the content to be printed onto the sheet.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Printer.SelectedInput">
            <summary>
            Gets or sets the paper source to use when printing.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Printer.SelectedPageSize">
            <summary>
            Gets or sets the page size to use.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Printer.SelectedPrinterName">
            <summary>
            Gets or sets the printer name to which to print.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Printer.LeftPageHeader">
            <summary>
            Gets or sets the string to display at the top left of every printed sheet.
            </summary>
            <remarks>
            If the string contains any of the following literal strings, a substitution will occur at the time of printing:
            	<list type="table">
            		<listheader>
            			<term>
            				String
            			</term>
            			<description>
            				Substitution
            			</description>
            		</listheader>
            		<item>
            			<term>${AppName}</term>
            			<description>The application name.</description>
            		</item>
            		<item>
            			<term>${Date}</term>
            			<description>The current date.</description>
            		</item>
            		<item>
            			<term>${Time}</term>
            			<description>The current time.</description>
            		</item>
            		<item>
            			<term>${DateTime}</term>
            			<description>The current date and time.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Printer.CenterPageHeader">
            <summary>
            Gets or sets the string to display at the top center of every printed sheet.
            </summary>
            <remarks>
            If the string contains any of the following literal strings, a substitution will occur at the time of printing:
            	<list type="table">
            		<listheader>
            			<term>
            				String
            			</term>
            			<description>
            				Substitution
            			</description>
            		</listheader>
            		<item>
            			<term>${AppName}</term>
            			<description>The application name.</description>
            		</item>
            		<item>
            			<term>${Date}</term>
            			<description>The current date.</description>
            		</item>
            		<item>
            			<term>${Time}</term>
            			<description>The current time.</description>
            		</item>
            		<item>
            			<term>${DateTime}</term>
            			<description>The current date and time.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Printer.RightPageHeader">
            <summary>
            Gets or sets the string to display at the top right of every printed sheet.
            </summary>
            <remarks>
            If the string contains any of the following literal strings, a substitution will occur at the time of printing:
            	<list type="table">
            		<listheader>
            			<term>
            				String
            			</term>
            			<description>
            				Substitution
            			</description>
            		</listheader>
            		<item>
            			<term>${AppName}</term>
            			<description>The application name.</description>
            		</item>
            		<item>
            			<term>${Date}</term>
            			<description>The current date.</description>
            		</item>
            		<item>
            			<term>${Time}</term>
            			<description>The current time.</description>
            		</item>
            		<item>
            			<term>${DateTime}</term>
            			<description>The current date and time.</description>
            		</item>
            	</list>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Printer.IsTraceHeaderVisible">
            <summary>
            Gets or sets a value indicating whether to display title information for each view when printing individual views.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.PropertyInfoChangedEventArgs">
            <summary>
            Provides data for the <see cref="E:Agilent.SA.Vsa.IPropertyInfo.PropertyInfoChanged"/> event.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.PropertyInfoChangedEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the PropertyInfoChangedEventArgs class.
            </summary>
            <param name="propertyName">The name of the property whose information changed.</param>
        </member>
        <member name="P:Agilent.SA.Vsa.PropertyInfoChangedEventArgs.PropertyName">
            <summary>
            Gets the name of the property whose information has changed.
            </summary>
        </member>
        <member name="T:Agilent.SA.VsaInternal.IPropertyInfoProvider">
            <summary>
            This interface is meant for internal use only.
            It's a mean for view model to provide model's property info.
            </summary>
            <version>18.0</version>
        </member>
        <member name="P:Agilent.SA.VsaInternal.IPropertyInfoProvider.PropertyInfo">
            <summary>
            Gets property information that describes min/max/steps.
            </summary>
            <version>18.0</version>
            <seealso cref="T:Agilent.SA.Vsa.IPropertyInfo"/>
        </member>
        <member name="T:Agilent.SA.Vsa.RecordLengthUnit">
            <summary>Specifies the Record Length units.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.RecordLengthUnit.Second">
            <summary>Specifies the unit of seconds.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.RecordLengthUnit.Record">
            <summary>Specifies the unit of records.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.RecordLengthUnit.Point">
            <summary>Specifies the unit of points.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.Recording">
            <summary>
            The Recording class manages recording acquisition settings, playback settings, and save/recall of recordings./>. 
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.Recording.RecallFile(System.String,System.String)">
            <summary>Recall the current recording in the specified format from a file. </summary>
            <param name="fileName">Specifies the file name.</param>
            <param name="format">Specifies the file format.</param>
            <remarks>
            <para>
            The current recording, in SDF format, is overwritten.  <see cref="M:Agilent.SA.Vsa.Recording.SetCenterSpan"/> is called as part of this method. 
            </para>
            <para>
            Supported File Formats:
            <list type="table">
            	<listheader>
            		<term>format</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>"CSV"</term>
            		<description>CSV (Comma delimited) [*.csv]</description>
            	</item>
            	<item>
            		<term>"E3238S"</term>
            		<description>E3238S Time Snapshot [*.cap]</description>
            	</item>
            	<item>
            		<term>"MAT"</term>
            		<description>MAT-File [*.mat]</description>
            	</item>
            	<item>
            		<term>"MAT7"</term>
            		<description>MAT-File (HDF5) [*.mat, *.hdf, *.h5]</description>
            	</item>
            	<item>
            		<term>"N5110A"</term>
            		<description>N5110A Waveform [*.bin]</description>
            	</item>
            	<item>
            		<term>"N5106A"</term>
            		<description>N5106A Waveform [*.bin]</description>
            	</item>
            	<item>
            		<term>"SDF"</term>
            		<description>SDF (Fast) [*.sdf, *.dat]</description>
            	</item>
            	<item>
            		<term>"TEXT"</term>
            		<description>Text (Tab delimited) [*.txt]</description>
            	</item>
            </list>
            </para>
            <para>
            Note: 
            <br/>
            MAT may be used instead of MAT7 for recall trace/recording (the matlab file format is auto detected for recall).
            </para>
            <para>
            If the format is an empty string, then the application automatically determines the file format by looking at
            the file suffix. 
            <br/>
            If this is not sufficient, then the file is scanned to determine the format.
            <br/>
            If the format cannot be determined or you specified an unknown format, then an error is raised.
            </para>
            <para>
            For more information about file types, see the "Supported File Formats" topic in the application help.
            </para>
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Recording.RecallFile(System.String,System.String,System.String)">
            <summary>Recall the recording for the specified measurement in the specified format from a file. </summary>
            <param name="fileName">Specifies the file name.</param>
            <param name="format">Specifies the file format.</param>
            <param name="measurementName">Specifies the name of the measurement for this recording.</param>
            <remarks>
            <para>
            The recording for the specified measurement, in SDF format, is overwritten.
            The measurementIndex must be 0 or greater and may specify a measurement that does not yet exist.
            When the specified measurement is created, it will use the data from this recalled recording.
            </para>
            <para>
            Supported File Formats:
            <list type="table">
            	<listheader>
            		<term>format</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>"CSV"</term>
            		<description>CSV (Comma delimited) [*.csv]</description>
            	</item>
            	<item>
            		<term>"E3238S"</term>
            		<description>E3238S Time Snapshot [*.cap]</description>
            	</item>
            	<item>
            		<term>"MAT"</term>
            		<description>MAT-File [*.mat]</description>
            	</item>
            	<item>
            		<term>"MAT7"</term>
            		<description>MAT-File (HDF5) [*.mat, *.hdf, *.h5]</description>
            	</item>
            	<item>
            		<term>"N5110A"</term>
            		<description>N5110A Waveform [*.bin]</description>
            	</item>
            	<item>
            		<term>"N5106A"</term>
            		<description>N5106A Waveform [*.bin]</description>
            	</item>
            	<item>
            		<term>"SDF"</term>
            		<description>SDF (Fast) [*.sdf, *.dat]</description>
            	</item>
            	<item>
            		<term>"TEXT"</term>
            		<description>Text (Tab delimited) [*.txt]</description>
            	</item>
            </list>
            </para>
            <para>
            Note: 
            <br/>
            MAT may be used instead of MAT7 for recall trace/recording (the matlab file format is auto detected for recall).
            </para>
            <para>
            If the format is an empty string, then the application automatically determines the file format by looking at
            the file suffix. 
            <br/>
            If this is not sufficient, then the file is scanned to determine the format.
            <br/>
            If the format cannot be determined or you specified an unknown format, then an error is raised.
            </para>
            <para>
            For more information about file types, see the "Supported File Formats" topic in the application help.
            </para>
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Recording.SaveFile(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Save all or part of the current recording in the specified format to a file.</summary>
            <param name="fileName">Specifies the name of the file.</param>
            <param name="format">Specifies the file format of the saved recording.</param>
            <param name="isHeader">Specifies to save header with data option.</param>
            <param name="isMeasurementFrequency">Specifies to only save the data in the current measurement's center/span frequency.</param>
            <param name="isPlayTime">Specifies to only save the data between the playback start/stop times.</param>
            <remarks>
            <para>
            Recalls the recording from the specified file. The current recording, in SDF format, is overwritten.
            </para>
            <para>
            Supported File Formats:
            <list type="table">
            	<listheader>
            		<term>format</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>"CSV"</term>
            		<description>CSV (Comma delimited) [*.csv]</description>
            	</item>
            	<item>
            		<term>"MAT"</term>
            		<description>MAT-File [*.mat]</description>
            	</item>
            	<item>
            		<term>"MAT4"</term>
            		<description>MAT-File (Version 4) [*.mat]</description>
            	</item>
            	<item>
            		<term>"MAT7"</term>
            		<description>MAT-File (HDF5) [*.mat, *.hdf, *.h5]</description>
            	</item>
            	<item>
            		<term>"N5110A"</term>
            		<description>N5110A Waveform [*.bin]</description>
            	</item>
            	<item>
            		<term>"N5106A"</term>
            		<description>N5106A Waveform [*.bin]</description>
            	</item>
            	<item>
            		<term>"SDF"</term>
            		<description>SDF (Fast) [*.sdf, *.dat]</description>
            	</item>
            	<item>
            		<term>"SDFX"</term>
            		<description>SDF (Export) [*.sdf, *.dat]</description>
            	</item>
            	<item>
            		<term>"TEXT"</term>
            		<description>Text (Tab delimited) [*.txt]</description>
            	</item>
            </list>
            </para>
            <para>
            Note: 
            <br/>
            MAT may be used instead of MAT7 for recall trace/recording (the matlab file format is auto detected for recall).
            </para>
            <para>
            For all file formats except sdf, the SaveFile method provides three extended save recording parameters: 
            isHeader, isMeasurementFrequency, and isPlayTime (described above). 
            These parameters are the "Save header with data", "At measurement/span", and "Between playback start\stop times" 
            options in the recording "Save Options" dialog box. 
            To view the "Save Options" dialog box, click File > Save > Save Recording > Save and the dialog box 
            will show for non-sdf formats.
            </para>
            <para>
            If the isHeader parameter is False, then the recording header is not saved with the recording. 
            This means if you recall the recording, the time\frequency parameters for 
            the data will not be restored.
            </para>
            <para>
            For more information about file types, see the "Supported File Formats" topic in the VSA application help.
            </para>
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Recording.SetCenterSpan">
            <summary>Set the measurement center/span to match the current recording center/span frequency.</summary>
        </member>
        <member name="M:Agilent.SA.Vsa.Recording.SetRecordLength(System.Double,Agilent.SA.Vsa.RecordLengthUnit)">
            <summary>Set the length (with its unit) of the next recording. </summary>
            <param name="length">Specifies the length of the recording.</param>
            <param name="unit">Specifies the unit as either, second, record, or point.</param>
            <remarks>
            If the <see cref="P:Agilent.SA.Vsa.Recording.IsRecordLengthMaximum"/> is set to True, 
            then the recording length is set to the largest size that the inputs will support. 
            This is limited by capabilities of the input channel hardware, 
            including how much memory is installed in the hardware.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Recording.RecallFile(System.String,System.String,System.Boolean)">
            <summary>Recall the current recording in the specified format from a file. </summary>
            <param name="fileName">Specifies the file name.</param>
            <param name="format">Specifies the file format.</param>
            <param name="isSetCenterSpan">Specifies whether <see cref="M:Agilent.SA.Vsa.Recording.SetCenterSpan"/> is called.</param>
            <remarks>
            <para>
            The current recording, in SDF format, is overwritten.
            </para>
            <para>
            Supported File Formats:
            <list type="table">
            	<listheader>
            		<term>format</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>"CSV"</term>
            		<description>CSV (Comma delimited) [*.csv]</description>
            	</item>
            	<item>
            		<term>"E3238S"</term>
            		<description>E3238S Time Snapshot [*.cap]</description>
            	</item>
            	<item>
            		<term>"MAT"</term>
            		<description>MAT-File [*.mat]</description>
            	</item>
            	<item>
            		<term>"MAT7"</term>
            		<description>MAT-File (HDF5) [*.mat, *.hdf, *.h5]</description>
            	</item>
            	<item>
            		<term>"N5110A"</term>
            		<description>N5110A Waveform [*.bin]</description>
            	</item>
            	<item>
            		<term>"N5106A"</term>
            		<description>N5106A Waveform [*.bin]</description>
            	</item>
            	<item>
            		<term>"SDF"</term>
            		<description>SDF (Fast) [*.sdf, *.dat]</description>
            	</item>
            	<item>
            		<term>"TEXT"</term>
            		<description>Text (Tab delimited) [*.txt]</description>
            	</item>
            </list>
            </para>
            <para>
            Note: 
            <br/>
            MAT may be used instead of MAT7 for recall trace/recording (the matlab file format is auto detected for recall).
            </para>
            <para>
            If the format is an empty string, then the application automatically determines the file format by looking at
            the file suffix. 
            <br/>
            If this is not sufficient, then the file is scanned to determine the format.
            <br/>
            If the format cannot be determined or you specified an unknown format, then an error is raised.
            </para>
            <para>
            For more information about file types, see the "Supported File Formats" topic in the application help.
            </para>
            </remarks>
            <version>17.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Recording.CurrentFileName">
            <summary>Gets the current recording file name.</summary>
            <remarks>
            When <see cref="P:Agilent.SA.Vsa.Input.DataFrom"/> is DataSource.Recording, this is where the measurement gets
            its data.
            Whenever you record data or recall a recording, this file is overwritten. 
            It contains data of a temporary nature. 
            Use the <see cref="M:Agilent.SA.Vsa.Recording.SaveFile(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)"/> method to save your recording more permanently. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Recording.IsPlayLoop">
            <summary>Gets or sets a value indicating whether playback of the recording will loop to the starting point when it reaches the stopping point.</summary>
            <remarks>
            If this property is set to False, then the measurement pauses when it reaches the end of the recording.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Recording.PlayCenter">
            <summary>Gets the current recording center frequency.</summary>
            <remarks>
            Returns the center frequency, in Hertz, of the current recording. 
            This corresponds to the measurement's center frequency at the time the data was recorded.
            The <see cref="P:Agilent.SA.Vsa.PlayChannel.Center"/> property contains the recording center frequency for individual
            input channels of the recording.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Recording.PlayDelaySec">
            <summary>Gets the trigger delay (in Sec) of the current recording.</summary>
            <remarks>
            The trigger delay of the recording is the same as the trigger delay of the inputs when the data was recorded. 
            The delay is zero if the trigger was free run. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Recording.PlayDeltaSec">
            <summary>Gets the delta time (in Sec) between sample points in the current recording.</summary>
            <remarks>
            The delta time is equivalent to (1 / <see cref="P:Agilent.SA.Vsa.Recording.PlaySampleRate"/>).
            You can use this property along with the <see cref="P:Agilent.SA.Vsa.Recording.PlayPoints"/> property to determine the length, in seconds, of the recording.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Recording.PlaySampleRate">
            <summary>Gets the sample rate (in Samples/Sec) of the current recording.</summary>
            <remarks>
            The sample rate is equivalent to (1 / <see cref="P:Agilent.SA.Vsa.Recording.PlayDeltaSec"/>).
            You can use this property along with the <see cref="P:Agilent.SA.Vsa.Recording.PlayPoints"/> property to determine the length, in seconds, of the recording.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Recording.PlayMaxSpan">
            <summary>Gets the cardinal frequency span of the current recording.</summary>
            <remarks>
            Recordings may or may not be saved at the span used to create the recording. 
            If you save a recording using the SDF (fast) format, the recording is saved using the next higher 
            cardinal span (cardinal spans are spans that are a power of 2). If you save a recording using any 
            other format, the recording is saved at its original span.
            <br/>
            If you create a recording using a non-cardinal span and save it using the SDF (fast) format, 
            the measurement resamples the recording on playback to play it back at its non-cardinal span. 
            Since the recording was saved at the next higher cardinal span, you can change the span up to that value.
            <br/>
            The <see cref="P:Agilent.SA.Vsa.Recording.PlaySpan"/> and PlayMaxSpan properties return the span (in Hertz) that was used to 
            create the recording (PlaySpan) or the cardinal span used to save the recording (PlayMaxSpan). 
            If you used a cardinal span to create the recording, PlaySpan and PlayMaxSpan will be identical.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Recording.PlayPoints">
            <summary>Gets the number of points in the current recording.</summary>
            <remarks>
            Returns the number of input points contained in the current recording that are available to a measurement. 
            This value defines the upper limit to the <see cref="P:Agilent.SA.Vsa.Recording.PlayStart"/> and <see cref="P:Agilent.SA.Vsa.Recording.PlayStop"/> properties. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Recording.PlayPosition">
            <summary>Gets or sets the current point of the recording playback.</summary>
            <remarks>
            <para>
            Determine in units of points the data location in the recording at which play back into the measurement will occur. 
            The position is relative to the beginning of the recording (0 is first point). 
            The Position point is determined by the following calculation:
            </para>
            <blockquote style="MARGIN-RIGHT: 0px" dir="ltr">
            	<para>Position point = (Position time - Delay time) x SampleRate.</para>
            </blockquote>
            <para>
            When you restart the measurement (with Measurement.Start), the Position is set to the Value of PlayStart. 
            When the Position reaches the end of the recording data (PlayStop property), 
            the measurement either pauses or loops to the PlayStart position, depending upon the state of the PlayLoop property.
            <br/>
            The Position property is reset to the beginning of the recording when you record new data, 
            recall a recording, or enter playback mode (set Inputs.DataFrom to <see cref="F:Agilent.SA.Vsa.DataSource.Recording"/>). 
            </para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Recording.PlaySpan">
            <summary>Gets the frequency span, in Hertz, of the current recording.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Recording.PlayStart">
            <summary>Gets or sets the starting point of the recording playback.</summary>
            <remarks>
            <para>
            Determine the point within the current recording at which playback of the recording starts. 
            When you restart the measurement (with <see cref="M:Agilent.SA.Vsa.Measurement.Restart"/>), the current playback position 
            (<see cref="P:Agilent.SA.Vsa.Recording.PlayPosition"/> property) is set to the value of PlayStart. 
            The <see cref="P:Agilent.SA.Vsa.Recording.PlayStop"/> property determines when you reach the end of recording data.
            The PlayStart point is determined by the following calculation:
            </para>
            <blockquote style="MARGIN-RIGHT: 0px" dir="ltr">
            	<para>PlayStart point = (Start time - Delay time) x SampleRate.</para>
            </blockquote>
            <para>
            The PlayStart property is reset to the beginning of the recording when you record new data, 
            recall a recording, or enter playback mode (set <see cref="P:Agilent.SA.Vsa.Input.DataFrom"/> to DataSource.Recording).
            </para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Recording.PlayStartSec">
            <summary>Gets or sets the starting time of the recording playback.</summary>
            <seealso cref="P:Agilent.SA.Vsa.Recording.PlayStart"/>
        </member>
        <member name="P:Agilent.SA.Vsa.Recording.PlayStop">
            <summary>Gets or sets the stopping point of the recording playback.</summary>
            <remarks>
            <para>
            Determine the point within the current recording at which playback of the recording stops. 
            When the measurement position (<see cref="P:Agilent.SA.Vsa.Recording.PlayPosition"/> property) reaches PlayStop, the measurement either 
            pauses or loops to the <see cref="P:Agilent.SA.Vsa.Recording.PlayStart"/> position, depending upon the state of the
            <see cref="P:Agilent.SA.Vsa.Recording.IsPlayLoop"/> property.
            The PlayStop point is determined by the following calculation:
            </para>
            <blockquote style="MARGIN-RIGHT: 0px" dir="ltr">
            	<para>PlayStop point = (Stop time - Delay time) x SampleRate.</para>
            </blockquote>
            <para>
            The PlayStop property is reset to the end of the recording when you record new data, 
            recall a recording, or enter playback mode (set <see cref="P:Agilent.SA.Vsa.Input.DataFrom"/> to DataSource.Recording).
            </para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Recording.PlayStopSec">
            <summary>Gets or sets the stopping time of the recording playback.</summary>
            <seealso cref="P:Agilent.SA.Vsa.Recording.PlayStop"/>
        </member>
        <member name="P:Agilent.SA.Vsa.Recording.IsPlayZoom">
            <summary>Gets a value indicating whether the current recording is zoomed.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Recording.PlayChannels">
            <summary>Gets a handle to a collection of <see cref="T:Agilent.SA.Vsa.PlayChannel"/> objects</summary>
            <remarks>
            The collection contains play back properties that can be different for each channel 
            (e.g. <see cref="P:Agilent.SA.Vsa.PlayChannel.Center"/>).
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Recording.SavedFileName">
            <summary>Gets the file name that the current recording was last saved to (or recalled from).</summary>
            <remarks>
            If the current recording has never been saved and was not recalled from a file, then an empty string is returned.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Recording.RecordLength">
            <summary>Gets or sets the length of the next recording.</summary>
            <remarks>
            The length is get/set using the current <see cref="P:Agilent.SA.Vsa.Recording.RecordLengthUnit"/>. 
            The <see cref="M:Agilent.SA.Vsa.Recording.SetRecordLength(System.Double,Agilent.SA.Vsa.RecordLengthUnit)"/> method sets both the record length and the unit. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Recording.RecordLengthTime">
            <summary>Gets the time length of the next recording.</summary>
            <remarks>
            Use <see cref="P:Agilent.SA.Vsa.Recording.RecordLength"/> or <see cref="M:Agilent.SA.Vsa.Recording.SetRecordLength(System.Double,Agilent.SA.Vsa.RecordLengthUnit)"/> to set the recording length.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Recording.RecordLengthMaximumTime">
            <summary>Gets the maximum recording time supported by the current measurement's input channels.</summary>
            <seealso cref="P:Agilent.SA.Vsa.Recording.IsRecordLengthMaximum"/>
        </member>
        <member name="P:Agilent.SA.Vsa.Recording.RecordLengthUnit">
            <summary>Gets or sets the units of the length of the next recording.</summary>
            <remarks>
            The recording length units may be either record, point, or second. 
            <see cref="M:Agilent.SA.Vsa.Recording.SetRecordLength(System.Double,Agilent.SA.Vsa.RecordLengthUnit)"/> sets both the record length and the unit. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Recording.IsRecordLengthMaximum">
            <summary>Gets or sets a value indicating whether the recording length will be the maximum supported by the input channels.</summary>
            <remarks>
            <para>
            The maximum recording length supported by the input channels depends upon the following:
            </para>
            <list type="bullet">
            	<item>amount of memory installed in the ADC</item>
            	<item>the current span (affects size of a data point)</item>
            	<item>whether you are in zoom mode</item>
            	<item>whether the span is a cardinal span (directly supported by the hardware) or 
            	resampled span (supported by the measurement software)</item> 
            </list>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Recording.IsRecordLengthExtra">
            <summary>Gets or sets a value indicating whether extra data will be acquired to be able to settle the measurement filters during playback.</summary>
            <remarks>
            If this property is True, then the recording length that you can play back is exactly what you specified. 
            If you set its property to False, then when the data is played back, some of the data will 
            be used to settle the measurement filters and you won't see it in the measurement results. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Recording.Trigger">
            <summary>Gets a handle to the ITrigger object for playback.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.IStepValue">
            <summary>
            The IStepValue interface can be used to find limits or the next valid value up or down for a property.  
            (See the <see cref="M:Agilent.SA.Vsa.IPropertyInfo.StepValue(System.String)"/> method for more details). 
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.IStepValue.StepUp(System.Double)">
            <summary>
            Gets the suggested value one step up from the specified value.
            </summary>
            <param name="value">Value to step up from.</param>
            <returns>The next suggested value up from the specified value.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.IStepValue.StepDown(System.Double)">
            <summary>
            Get the suggested value one step down from the specified value.
            </summary>
            <param name="value">Value to step down from.</param>
            <returns>The next suggested value down from the specified value.</returns>
        </member>
        <member name="P:Agilent.SA.Vsa.IStepValue.MaxValue">
            <summary>
            Gets the maximum value.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.IStepValue.MinValue">
            <summary>
            Gets the minimum value.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.ResBWCoupleType">
            <summary>
            Specifies how the resolution bandwidth is coupled to the span.
            </summary>
            <remarks>See the VSA help for more information: <strong>Reference &gt; ResBW &gt; ResBW Parameters</strong>.</remarks>
        </member>
        <member name="F:Agilent.SA.Vsa.ResBWCoupleType.Auto">
            <summary>Specifies auto coupling (VSA attempts to choose narrowest ResBW consistent with other parameters when you change the Span).</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ResBWCoupleType.Offset">
            <summary>Specifies offset coupling (VSA attempts to maintain ResBW/Span ratio so spectrum resolution appears the same when you change Span).</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ResBWCoupleType.Fixed">
            <summary>Specifies fixed coupling (VSA attempts to maintain same ResBW when you change the Span).</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.WindowType">
            <summary>
            Specifies the type of windowing.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.WindowType.Uniform">
            <summary>
            Specifies Uniform window. This has the same effect as no window.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.WindowType.Hanning">
            <summary>Specifies Hanning window.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.WindowType.Gauss">
            <summary>
            Specifies Gaussian Top window.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.WindowType.GaussianTop">
            <summary>
            Specifies Gaussian Top window.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.WindowType.FlatTop">
            <summary>
            Specifies Flat Top window.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.WindowType.BlackmanHarris">
            <summary>
            Specifies Blackman Harris window.
            </summary>
            <version>17.00</version>
        </member>
        <member name="F:Agilent.SA.Vsa.WindowType.KaiserBessel">
            <summary>
            Specifies Kaiser-Bessel window.
            </summary>
            <version>17.00</version>
        </member>
        <member name="F:Agilent.SA.Vsa.WindowType.Gaussian">
            <summary>
            Specifies Gaussian window.
            </summary>
            <version>17.00</version>
        </member>
        <member name="T:Agilent.SA.Vsa.Frequency">
            <summary>The Frequency object contains members for controlling the frequency-related measurement features.</summary>
            <remarks>
            The Frequency object represents the frequency settings of a measurement, including the center, span, zoom, 
            resolution bandwidth, and how these parameters are related to each other. You can also control windowing and 
            whether the measurement will track the dominant signal in the measurement.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Frequency.MirrorAroundCenter(System.Double)">
            <summary>
            Mirrors the supplied frequency about the center frequency.
            </summary>
            <param name="value">The frequency to be mirrored.</param>
            <returns>If <see cref="P:Agilent.SA.Vsa.Frequency.IsMirrored"/> is true, you can use this function to determine the mirrored frequency of a frequency that you specify (<paramref name="value"/>), as follows:
            <code>
              Returned Value = (2 X center_frequency) - value
                    where: center_frequency is the current center frequency of the VSA
            </code><para>Note that this function does not change any parameters in the VSA.</para></returns>
        </member>
        <member name="M:Agilent.SA.Vsa.Frequency.SetStartStopFrequency(System.Boolean,System.Double,System.Double)">
            <summary>
            Set the measurement IsZoom, Start, and Stop frequency properties all at one time.
            </summary>
            <param name="isZoom">Whether the measurement is zoomed or baseband.</param>
            <param name="startFrequency">Measurement start frequency in Hz.</param>
            <param name="stopFrequency">Measurement stop frequency in Hz.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.Frequency.SetCenterSpan(System.Boolean,System.Double,System.Double)">
            <summary>
            Set the measurement center frequency and span.
            </summary>
            <param name="isZoom">Specifies zoom (true) or baseband (false).</param>
            <param name="center">Specifies the center frequency value, in Hertz.</param>
            <param name="span">Specifies the frequency span value, in Hertz.</param>
            <remarks>
            This method sets the measurement's center frequency, span, and zoom all at one time with only a single
            measurement restart. That is faster than setting each property individually which would cause multiple
            measurement restarts.
            <para/>
            Note that for multi-channel measurements, this method sets all channels to the same values.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Frequency.DefaultSpan">
            <summary>
            Sets the Span to its default value, which is the largest span supported by the current hardware.
            </summary>
            <remarks>When the current channel(s) can only be zoomed, then the span is changed to the largest supported value, but the center frequency is not changed. When the
            channel(s) can be baseband (<see cref="P:Agilent.SA.Vsa.Frequency.IsZoom"/> is false), then the span is changed to the largest supported value and IsZoom is set to False.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Frequency.ResBWNearest(System.Double)">
            <summary>
            Returns the nearest 1-3-10 step RBW if <see cref="P:Agilent.SA.Vsa.Frequency.IsResBWArbitrary">arbitrary ResBW</see> is disabled.
            </summary>
            <param name="value">Specifies the resolution bandwidth value.</param>
            <returns>If the IsResBWArbitrary property is set to false, then this function returns the 
            nearest 1-3-10 step. Otherwise, it returns the <paramref name="value"/>.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.Frequency.PointsNearest(System.Int32)">
            <summary>
            Return the nearest valid <see cref="P:Agilent.SA.Vsa.Frequency.Points">frequency points</see> value to the value supplied.
            </summary>
            <param name="value">Specifies the desired point value.</param>
            <returns>Returns the nearest valid number of frequency points to that specified in the <paramref name="value"/> parameter.
            This method runs automatically if an invalid number of points is requested, or your program can call it explicitly.
            The supplied will be rounded to the next larger of the following values: 51, 101, 201, 401, 801, 1601, 3201, 6401,
            12801, 25601, 51201, 102401, 204801, 409601.</returns>
        </member>
        <member name="P:Agilent.SA.Vsa.Frequency.Center">
            <summary>
            Gets or sets the measurement center frequency, in Hertz.
            </summary>
            <remarks>
            	<para>You can set the frequency range with the Center and <see cref="P:Agilent.SA.Vsa.Frequency.Span"/> properties, or with the <see cref="P:Agilent.SA.Vsa.Frequency.StartFrequency"/> and <see cref="P:Agilent.SA.Vsa.Frequency.StopFrequency"/> properties. You can also use the
            <see cref="M:Agilent.SA.Vsa.Frequency.SetCenterSpan(System.Boolean,System.Double,System.Double)"/> or <see cref="M:Agilent.SA.Vsa.Frequency.SetStartStopFrequency(System.Boolean,System.Double,System.Double)"/> methods to set the frequency range all at one time.</para>
            	<para>Note that for multi-channel hardware, the center frequency can be set independently for each channel or all channels can be set to the same value. To set
            the center frequency for an individual channel, use the <see cref="P:Agilent.SA.Vsa.FrequencyChannel.Center">FrequencyChannel.Center</see> property on the appropriate channel. Individual
            channel settings are available via the <see cref="P:Agilent.SA.Vsa.Frequency.Channels"/> collection.</para>
            	<para>To set the center frequency for all channels to the same value, set the Frequency.Center property and all the channels will be set to the same Center
            frequency.</para>
            	<para>When queried, this property always returns the value for the first channel.</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Frequency.StartFrequency">
            <summary>
            Gets or sets the measurement start frequency, in Hertz.
            </summary>
            <remarks>
            	<para>You can set the frequency range with the <see cref="P:Agilent.SA.Vsa.Frequency.Center"/> and <see cref="P:Agilent.SA.Vsa.Frequency.Span"/> properties, or with the StartFrequency and <see cref="P:Agilent.SA.Vsa.Frequency.StopFrequency"/> properties. You can also use the
            <see cref="M:Agilent.SA.Vsa.Frequency.SetCenterSpan(System.Boolean,System.Double,System.Double)"/> or <see cref="M:Agilent.SA.Vsa.Frequency.SetStartStopFrequency(System.Boolean,System.Double,System.Double)"/> methods to set the frequency range all at one time.</para>
            	<para>When StartFrequency is set to a non-zero value, the <see cref="P:Agilent.SA.Vsa.Frequency.IsZoom"/> property is set to true.</para>
            	<para>For multi-channel hardware, StartFrequency can be set independently for each channel using the
            <see cref="P:Agilent.SA.Vsa.FrequencyChannel.StartFrequency">FrequencyChannel.StartFrequency</see> property on the appropriate channel. Individual FrequencyChannel objects are available via
            the <see cref="P:Agilent.SA.Vsa.Frequency.Channels"/> collection. To set the start frequency for all channels to the same value, set the StartFrequency property on this class.</para>
            	<para></para>
            	<para>When queried, this property always returns the value for the first channel.</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Frequency.StopFrequency">
            <summary>
            Gets or sets the measurement stop frequency, in Hertz.
            </summary>
            <remarks>
            	<para>You can set the frequency range with the <see cref="P:Agilent.SA.Vsa.Frequency.Center"/> and <see cref="P:Agilent.SA.Vsa.Frequency.Span"/> properties, or with the StartFrequency and <see cref="P:Agilent.SA.Vsa.Frequency.StopFrequency"/> properties. You can also use the
            <see cref="M:Agilent.SA.Vsa.Frequency.SetCenterSpan(System.Boolean,System.Double,System.Double)"/> or <see cref="M:Agilent.SA.Vsa.Frequency.SetStartStopFrequency(System.Boolean,System.Double,System.Double)"/> methods to set the frequency range all at one time.</para>
            	<para>When StopFrequency is set to a non-zero value, the <see cref="P:Agilent.SA.Vsa.Frequency.IsZoom"/> property is set to true.</para>
            	<para>For multi-channel hardware, StopFrequency can be set independently for each channel using the
            <see cref="P:Agilent.SA.Vsa.FrequencyChannel.StopFrequency">FrequencyChannel.StopFrequency</see> property on the appropriate channel. Individual FrequencyChannel objects are available via the
            <see cref="P:Agilent.SA.Vsa.Frequency.Channels"/> collection. To set the stop frequency for all channels to the same value, set the StopFrequency property on this class.</para>
            	<para></para>
            	<para>When queried, this property always returns the value for the first channel.</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Frequency.IsZoom">
            <summary>Gets or sets a value indicating whether the measurement is zoomed.</summary>
            <remarks>
            	<para>The term "zoom" identifies a measurement that has complex time-domain data. For Vector (demod off) measurements, IsZoom lets you enable or disable the LO in
            the measurement path when the start frequency is 0 Hertz. When the start frequency is something other than 0 Hz, the data is zoomed, by definition.</para>
            	<para>The term "baseband" (IsZoom is False) identifies a measurement that has real time-domain data and has a start frequency of 0 Hz. The default value for
            IsZoom is false (baseband), which means that the LO is not in the measurement path.</para>
            	<para>IsZoom is always True for digital demodulation measurement types. The type of input hardware selected can also affect the allowable state of this
            property.</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Frequency.Span">
            <summary>
            Gets or sets the measurement frequency span, in Hertz.
            </summary>
            <remarks>
            	<para>The range of allowable spans depends upon the hardware selected for use with the VSA, whether your input is from hardware or a recording, and whether you
            are in zoom mode. The <see cref="P:Agilent.SA.Vsa.Frequency.IsZoom"/> and <see cref="P:Agilent.SA.Vsa.Frequency.Center"/> properties help to more fully describe the VSA's frequency settings. The <see cref="M:Agilent.SA.Vsa.Frequency.SetCenterSpan(System.Boolean,System.Double,System.Double)"/> method can be used to
            specify zoom, center, and span all at the same time.</para>
            	<para>Note that for multi-channel measurements, all channels share a common span.</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Frequency.IsStepAuto">
            <summary>
            Gets or sets a value indicating whether the frequency step is fixed or automatically determined.
            </summary>
            <remarks>
            	<para>When IsStepAuto is set to false, the frequency step is determined by the <see cref="P:Agilent.SA.Vsa.Frequency.StepSize"/> property. When IsStepAuto is set to true, then: </para>
            	<list type="bullet">
            		<item>span follows 1-2-5 steps and speed optimized spans</item>
            		<item>center frequency follows (span / 10) steps</item>
            		<item>start frequency follows 1-2-5 steps</item>
            	</list>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Frequency.StepSize">
            <summary>
            Gets or sets the frequency step for start, center, and stop incremental changes, in Hertz.
            </summary>
            <remarks>
            	<para>StepSize only affects the user interface when using the arrow key or mouse wheel to adjust start, center, or stop frequency settings.</para>
            	<para>This property is not used if the <see cref="P:Agilent.SA.Vsa.Frequency.IsStepAuto"/> property is set to true.</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Frequency.IsSignalTrack">
            <summary>
            Gets or sets a value indicating whether the center frequency will track a signal.
            </summary>
            <remarks>
            	<para>The VSA can change the center frequency automatically to track an input channel's drifting signal. The IsSignalTrack property enables and disables this
            feature and the <see cref="P:Agilent.SA.Vsa.Frequency.SignalTrackChannel"/> property determines the input channel to track.</para>
            	<para>Signal tracking is not available for digital demodulation measurement types, when averaging is turned on, or for I+jQ channel configurations.</para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Frequency.SignalTrackChannel">
            <summary>
            Gets or sets which input channel to use for signal tracking.
            </summary>
            <remarks>
            This setting is ignored unless <see cref="P:Agilent.SA.Vsa.Frequency.IsSignalTrack"/> is true.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Frequency.IsMirrored">
            <summary>
            Gets or sets a value indicating whether the measurement data is mirrored around the center frequency.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Frequency.Channels">
            <summary>
            Gets the collection of <see cref="T:Agilent.SA.Vsa.FrequencyChannel"/> objects representing the per-channel frequency
            settings.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Frequency.SampleRate">
            <summary>
            Gets the sample rate of the data in the measurement.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Frequency.InputSampleRate">
            <summary>Gets the sample rate of the data that comes from the instrument.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Frequency.ResBW">
            <summary>
            Gets or sets the resolution bandwidth (RBW), in Hertz.
            </summary>
            <remarks>Determines the resolution bandwidth, in Hertz, of the measurement. Note that in digital demodulation measurement types, resolution bandwidth is determined
            automatically and can not be set independently. In all measurement types, resolution bandwidth is related to the length of the time record and the selected
            window type.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Frequency.IsResBWArbitrary">
            <summary>
            Gets or sets a value indicating whether ResBW can be set to an arbitrary value (not constrained).
            </summary>
            <remarks>
            	<para>Determine whether the resolution bandwidth is arbitrary or fixed. The Keysight 89600 VSA offer two levels of flexibility in selecting a resolution bandwidth
            setting:</para>
            	<list type="bullet">
            		<item>
            			<para>Fixed at 1-3-10</para>
            		</item>
            		<item>arbitrary</item>
            	</list>The fixed 1-3-10 selection is the more restrictive. In this mode the VSA always sets the resolution bandwidth at a 1 X 10x or 3 X 10x value (1, 3, 10, 30,
            100, ...) . In this mode the VSA emulates many existing spectrum analyzers. The arbitrary mode allows arbitrary setting of resolution bandwidth.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Frequency.ResBWCouple">
            <summary>
            Gets or sets how <see cref="P:Agilent.SA.Vsa.Frequency.ResBW">ResBW</see> is coupled to the frequency span.
            </summary>
            <remarks>Determines the type of coupling for resolution bandwidth as either auto, offset, or fixed. Your resolution bandwidth and coupling choices affect both
            resolution and measurement speed. To get the best resolution to speed tradeoff, choose <see cref="F:Agilent.SA.Vsa.ResBWCoupleType.Auto">auto ResBW coupling</see> and arbitrary ResBW mode
            (<see cref="P:Agilent.SA.Vsa.Frequency.IsResBWArbitrary"/> property).</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Frequency.Window">
            <summary>
            Gets or sets the window function applied to the main time data.
            </summary>
            <remarks>When time gating enabled and <see cref="P:Agilent.SA.Vsa.Frequency.GateWindowIsMain"/> is set to true, the window specified in this property is also applied to the gated time data.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Frequency.GateWindowIsMain">
            <summary>
            Gets or sets a value indicating whether the gate window is the same as the main window.
            </summary>
            <remarks>
            Determine whether the gate window is set to be the same as the main window. If GateWindowIsMain is set to False, then the
            time gate window is determined by the <see cref="P:Agilent.SA.Vsa.Frequency.GateWindow"/> property.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Frequency.GateWindow">
            <summary>
            Gets or sets the window applied to the gated time data.
            </summary>
            <remarks>Determine the type of <see cref="T:Agilent.SA.Vsa.WindowType">window</see> to apply to gated time data.
            <para>If the <see cref="P:Agilent.SA.Vsa.Frequency.GateWindowIsMain"/> property is set to true, then GateWindow is ignored and the value of the <see cref="P:Agilent.SA.Vsa.Frequency.Window"/> property is used instead.</para></remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Frequency.Points">
            <summary>
            Gets or sets the number of unaliased frequency points to display.
            </summary>
            <remarks>
            Determine the number of unaliased frequency points for the measurement to calculate.
            It may be one of the following values: 51, 101, 201, 401, 801, 1601, 3201, 6401, 12801, 25601, 51201, 102401, 204801, 409601.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Frequency.IsPointsAuto">
            <summary>
            Gets or sets a value indicating whether the number of frequency points is automatically adjusted to accommodate a larger range of ResBW values (and correspondingly, time record lengths).
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Frequency.IsSpanZoom">
            <summary>
            Gets or sets a value indicating whether <see cref="P:Agilent.SA.Vsa.Frequency.IsZoom"/> is set to true when <see cref="P:Agilent.SA.Vsa.Frequency.Span"/> is changed.
            </summary>
            <version>17.00</version>
        </member>
        <member name="T:Agilent.SA.Vsa.MarkerPositionType">
            <summary>How markers can be positioned and offset.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MarkerPositionType.Normal">
            <summary>A normal marker is positioned on a data point showing absolute X- and Y-values.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MarkerPositionType.Delta">
            <summary>A delta marker is positioned on a data point showing relative X- and Y-values.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MarkerPositionType.Fixed">
            <summary>A fixed marker is positioned anywhere on the trace showing absolute X- and Y-values.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.MarkerBandType">
            <summary>Band Power base calculation.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MarkerBandType.Power">
            <summary>calculate power in the band.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MarkerBandType.Density">
            <summary>calculate density in the band.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.MarkerBandCalc">
            <summary>Band Power summation method.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MarkerBandCalc.Mean">
            <summary>Band Power calculation using mean summation.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MarkerBandCalc.Rms">
            <summary>Band Power calculation using RMS summation.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.MarkerIQBranch">
            <summary>Y-value part of the marker.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MarkerIQBranch.I">
            <summary>I-part (real)</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MarkerIQBranch.Q">
            <summary>Q-part (imaginary)</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.MarkerMoveType">
            <summary>Marker move target.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MarkerMoveType.Peak">
            <summary>Specifies moving the marker to the highest point on the trace.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MarkerMoveType.Minimum">
            <summary>Specifies moving the marker to the lowest point on the trace.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MarkerMoveType.NextLargerPeak">
            <summary>Specifies moving the marker to the lowest valid peak greater than the marker's current value.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MarkerMoveType.NextSmallerPeak">
            <summary>Specifies moving the marker to the highest valid peak less than the marker's current value.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MarkerMoveType.NextLeftPeak">
            <summary>Specifies moving the marker left to the next valid peak on the trace.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MarkerMoveType.NextRightPeak">
            <summary>Specifies moving the marker right to the next valid peak on the trace.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.Marker">
            <summary>
            The Marker class represents one marker on a <see cref="T:Agilent.SA.Vsa.Trace"/>. 
            </summary>
            <remarks>
            There are properties to control the marker presentation and calculations.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Marker.MoveTo(Agilent.SA.Vsa.MarkerMoveType)">
            <summary>Move the marker to the specified peak/min value.</summary>
            <param name="markerMove">Where to move the marker.</param>
            <remarks><see cref="T:Agilent.SA.Vsa.MarkerMoveType"/> describes how the marker is moved.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Marker.IsVisible">
            <summary>Gets or sets a value indicating whether the marker is visible.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Marker.Position">
            <summary>Gets or sets how markers can be positioned and offset.</summary>
            <remarks>
            A marker can be constrained to be on a data point and may show absolute or relative values.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Marker.Reference">
            <summary>Gets or sets the reference marker for X- and Y-value calculations if the marker <see cref="P:Agilent.SA.Vsa.Marker.Position">position</see> type is set to <see cref="F:Agilent.SA.Vsa.MarkerPositionType.Delta">delta</see>.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Marker.Point">
            <summary>Gets or sets the marker x-axis position by point number (0 is first point).</summary>
            <remarks>
            Determine the domain axis position of the marker by its offset, in points, from the start of the trace data. 
            This is the position of the marker in the time/frequency axis. 
            This is the same as the x axis for all trace formats except I-Q and constellation. 
            The position must be at least 0 (start of data) and less that the number of points in the trace. 
            You can also use the Value property to change the marker position, which is in the units of the time/frequency axis.
            If the markers are coupled (<see cref="P:Agilent.SA.Vsa.Marker.IsCouple"/> set to True), then setting this property could change the marker 
            position in other traces that have coupled markers for the same marker index. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Marker.XData">
            <summary>Gets or sets the marker position by x-axis value.</summary>
            <remarks>
            Determine the time/frequency axis position of the marker by its time/frequency axis position. 
            This is the same as the X-axis in the Markers Position Tab of the GUI help for all trace formats 
            except I-Q and constellation. 
            The position must be within the data in the trace. 
            If it is not, then the marker position is moved to the closest available position. 
            You can also use the <see cref="P:Agilent.SA.Vsa.Marker.Point"/> property to change the marker position, which is in the units of points.
            The <see cref="P:Agilent.SA.Vsa.Marker.XDataUnit"/> property returns the time/frequency axis unit string of the marker.
            If the markers are coupled (<see cref="P:Agilent.SA.Vsa.Marker.IsCouple"/> set to True), then setting this property could change the marker 
            position in other traces that have coupled markers for the same marker index.
            If <see cref="P:Agilent.SA.Vsa.Marker.Position"/> is MarkerPositionType.Fixed, then this is the marker X-axis value. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Marker.XDataUnit">
            <summary>Gets the unit associated with the marker's <see cref="P:Agilent.SA.Vsa.Marker.XData">x-axis data</see>.</summary>
            <remarks>
            The marker Value is the time/frequency axis marker location that you set with the <see cref="P:Agilent.SA.Vsa.Marker.XData"/> property. 
            The XDataUnit is the same as the <see cref="P:Agilent.SA.Vsa.Trace.XDataUnit"/>.
            If <see cref="P:Agilent.SA.Vsa.Marker.Position"/> is MarkerPositionType.Fixed, then the unit is the always the same as the trace x axis unit.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Marker.XAxis">
            <summary>Gets the marker x-axis value.</summary>
            <remarks>
            The marker's <see cref="P:Agilent.SA.Vsa.Marker.Point"/> or <see cref="P:Agilent.SA.Vsa.Marker.XData"/> properties determine where the marker is located on the data. 
            The X property returns the calculated X axis value of the data at that point. This value is the same as XData,
            except if the <see cref="P:Agilent.SA.Vsa.Trace.Format"/> is TraceFormatType.IQ or TraceFormatType.Constellation.
            The <see cref="P:Agilent.SA.Vsa.Marker.XAxisUnit"/> property contains the unit string for the X axis marker location. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Marker.XAxisUnit">
            <summary>Gets the unit associate with the marker <see cref="P:Agilent.SA.Vsa.Marker.XAxis">x-axis value</see>.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Marker.Y">
            <summary>Gets or sets the marker y-axis value.</summary>
            <remarks>
            The marker's <see cref="P:Agilent.SA.Vsa.Marker.Point"/> or <see cref="P:Agilent.SA.Vsa.Marker.XData"/> properties determine where the marker is located on the data. 
            The Y property returns the calculated Y axis value of the data at that point. If the marker <see cref="P:Agilent.SA.Vsa.Marker.Position"/>
            is MarkerPositionType.Fixed, then you can set the Y axis value.
            The <see cref="P:Agilent.SA.Vsa.Marker.YUnit"/> property contains the unit string for the Y axis marker location. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Marker.YUnit">
            <summary>Gets the unit associated with the marker <see cref="P:Agilent.SA.Vsa.Marker.Y">y-axis value</see>.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Marker.IsZ">
            <summary>Gets a value indicating whether the marker has a <see cref="P:Agilent.SA.Vsa.Marker.Z">z-axis</see> value.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Marker.Z">
            <summary>Gets or sets the marker position by z-axis value.</summary>
            <remarks>
            The z-axis is used for some OFDM trace data types (e.g. Error Vector Spectrum). 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Marker.ZUnit">
            <summary>Gets the unit associated with the marker z-axis value.</summary>
            <remarks>
            The z-axis units are associated with the <see cref="P:Agilent.SA.Vsa.Marker.Z"/> property. 
            The z-axis is used for some OFDM trace data types (e.g. Error Vector Spectrum). 
            The z-axis unit for Error Vector Spectrum can be set with the <see cref="P:Agilent.SA.Vsa.Trace.DemodTimeUnit"/> property. 
            The z-axis unit for Error Vector Time can be set with the <see cref="P:Agilent.SA.Vsa.Trace.DemodFreqUnit"/> property. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Marker.IsTrackPeak">
            <summary>Gets or sets a value indicating whether the marker tracks the peak of the data.</summary>
            <remarks>
            If peak track is on, then the marker is moved to the peak of the trace every time new data is 
            displayed on the trace. 
            The marker must be on (<see cref="P:Agilent.SA.Vsa.Marker.IsVisible"/> set to True) for this property to have any effect. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Marker.IsCouple">
            <summary>Gets or sets a value indicating whether the marker x-axis position is coupled to the same-numbered marker (by index) on another trace.</summary>
            <remarks>
            True if a marker's X-axis position is coupled to another marker with the same index (in the Markers collection)
            on another trace. 
            All markers that are coupled and have the same X-axis units will have the same X-axis position, if possible. 
            If the coupled markers X-axis do not have the same resolution or range, then the markers are positioned 
            as close to each other as possible. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Marker.TraceTime">
            <summary>Gets or sets the spectrogram marker offset time for the start of the measurement scan.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Marker.IsCount">
            <summary>Gets or sets a value indicating whether the frequency count marker is visible.</summary>
            <remarks>
            Only one marker on a trace can have <see cref="P:Agilent.SA.Vsa.Marker.IsCount"/> set to true.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Marker.CountResult">
            <summary>Gets the result of the frequency count marker.</summary>
            <remarks>
            <para>
            Returns the last calculated frequency count, in Hertz. 
            To make a frequency count calculation, you must turn on the marker (<see cref="P:Agilent.SA.Vsa.Marker.IsVisible"/> set to True) and 
            turn on the frequency count marker (<see cref="P:Agilent.SA.Vsa.Marker.IsCount"/> set to True) on a frequency domain trace. 
            Zero is returned if a valid calculation cannot be made. 
            </para>
            <para>
            Only one marker on a trace can have <see cref="P:Agilent.SA.Vsa.Marker.IsCount"/> set to true.
            </para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Marker.IsBandVisible">
            <summary>Gets or sets a value indicating whether the band power calculation is enabled for this marker.</summary>
            <remarks>
            You must also specify the calculation region (<see cref="P:Agilent.SA.Vsa.Marker.BandSpan"/> property) 
            and the type of calculation (<see cref="P:Agilent.SA.Vsa.Marker.BandCalc"/> property). 
            The <see cref="P:Agilent.SA.Vsa.Marker.BandPowerResult"/> and <see cref="P:Agilent.SA.Vsa.Marker.BandPowerResultUnit"/> properties return the 
            calculated band power and unit, respectively. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Marker.BandType">
            <summary>Gets or sets the Band Power base calculation (either power or density values).</summary>
            <see cref="P:Agilent.SA.Vsa.Marker.IsBandVisible"/> for more information.
        </member>
        <member name="P:Agilent.SA.Vsa.Marker.BandCalc">
            <summary>Gets or sets the Band Power summation method (either mean or RMS).</summary>
            <see cref="P:Agilent.SA.Vsa.Marker.IsBandVisible"/> for more information.
        </member>
        <member name="P:Agilent.SA.Vsa.Marker.BandSpan">
            <summary>Gets or sets the Band Power calculation region.</summary>
            <remarks>
            <see cref="P:Agilent.SA.Vsa.Marker.IsBandVisible"/> for more information.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Marker.BandPowerResult">
            <summary>Gets the last calculated band power result.</summary>
            <remarks>
            <see cref="P:Agilent.SA.Vsa.Marker.IsBandVisible"/> for more information.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Marker.BandPowerResultQ">
            <summary>Gets the last calculated band power result for the Q part of dual I/Q data.</summary>
            <remarks>
            <see cref="P:Agilent.SA.Vsa.Marker.IsBandVisible"/> for more information.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Marker.BandPowerResultUnit">
            <summary>Gets the unit string of the last calculated band power result.</summary>
            <remarks>
            <see cref="P:Agilent.SA.Vsa.Marker.IsBandVisible"/> for more information.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Marker.CodeChannel">
            <summary>Gets the marker x-axis demod code channel.</summary>
            <remarks>
            Points in a W-CDMA Code Domain Power measurement result are at a calculated code channel and symbol rate. 
            This property returns the code channel for the data at the current marker position. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Marker.IQBranch">
            <summary>Gets if the marker is on the I or Q part of a dual I/Q trace.</summary>
            <remarks>
            The 3GPP uplink Code Domain Power measurement result contains both I and Q data which are 
            shown at the same time. 
            This property returns whether the marker is on an I- or a Q-point. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Marker.Slot">
            <summary>Gets the slot associated with the current marker position.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Marker.SymbolRate">
            <summary>Gets the symbol rate associated with the current marker position.</summary>
            <remarks>
            Points in a 3G Code Domain Power measurement result are at a calculated code channel and symbol rate. 
            This property returns the symbol rate for the data at the current marker position. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Marker.YAverage">
            <summary>Gets the marker y-axis average value.</summary>
            <remarks>
            The y-axis average value is only computed if a z-axis is present in the data 
            (only used for some OFDM trace data types, such as Error Vector Spectrum). 
            The average value is the y-axis RMS average for all points at the current x-axis value. 
            </remarks>
        </member>
        <member name="T:Agilent.SA.Vsa.MeasurementSyncType">
            <summary>
            Defines how independent concurrent measurements are synchronized.
            </summary>
            <remarks>
            Multiple independent concurrent measurements can be synchronized using trigger output from a measurement connected to
            external trigger inputs of other measurements.
            </remarks>
        </member>
        <member name="F:Agilent.SA.Vsa.MeasurementSyncType.None">
            <summary>This measurement is not using measurement synchronization.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.MeasurementSyncType.TriggerOut">
            <summary>This measurement is sending the synchronization trigger from the trigger output.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.InputDataDomain">
            <summary>
            An enumeration describing the type of input data that a measurement requires.
            </summary>
            <version>18.50</version>
        </member>
        <member name="F:Agilent.SA.Vsa.InputDataDomain.Time">
            <summary>
            The measurement requires time data (the default).
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.InputDataDomain.Spectrum">
            <summary>
            The measurement requires magnitude frequency data.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.Measurement">
            <summary>
            This class provides the members required to configure and control a measurement.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.Measurement.GetMeasurementExtension``1">
            <summary>
            Returns the current measurement extension cast to the requested type.
            </summary>
            <typeparam name="T">The type to which to cast the returned extension.</typeparam>
            <returns>The current measurement extension cast to the requested type, or null if
            the current extension is not of the requested type.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.Measurement.NewChangeGroup">
            <summary>
            Turns off the normal measurement updates that occur after property changes until the <see cref="M:System.IDisposable.Dispose"/>
            method is called on the returned <see cref="T:Agilent.SA.Vsa.IChangeGroup"/> interface.
            </summary>
            <remarks>
            Under normal conditions, every time a property on any object in the VSA object model is changed, a
            measurement update occurs so that the new property setting is properly reflected in the measurement 
            results. However, when programmatically configuring a measurement, it is desirable to set many properties
            with only a single measurement update once all have been set.
            <para/>
            From the time the handle is obtained until the <see cref="M:System.IDisposable.Dispose"/> method on it is called, measurement
            updates are blocked. The update is performed when the <see cref="M:System.IDisposable.Dispose"/> method is called on the returned
            interface.
            <para/>
            In the C# language, the "using" construct can be employed to automatically re-enable updates. The code looks
            like this:
            <code>
            using (IChangeGroup changes = measurement.NewChangeGroup())
            {
            	// set all properties here
            }
            </code>
            When the "changes" variable falls out of scope at the end of the "using" block, the <see cref="M:System.IDisposable.Dispose"/> method 
            is invoked automatically.
            <para/>
            In other languages, it is highly recommended that a "try/finally" construct be employed to guarantee that
            <see cref="M:System.IDisposable.Dispose"/> is called regardless of the outcome of the parameter changes. In C# this would look as
            follows:
            <code>
            IChangeGroup changes = measurement.NewChangeGroup();
            try
            {
            	// set all properties here
            }
            finally
            {
            	if (changes != null)
            		changes.Dispose();
            }
            </code>
            </remarks>
            <returns>An <see cref="T:Agilent.SA.Vsa.IChangeGroup"/> handle on which <see cref="M:System.IDisposable.Dispose"/> must be called to re-enable
            normal measurement updates.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.Measurement.Pause">
            <summary>
            Causes the measurement to transition to the Paused state.
            </summary>
            <remarks>This method also stops a recording that is in progress.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Measurement.Reset">
            <summary>
            Immediately stops the measurement, clearing all measurement data.
            </summary>
            <exception caption="" cref="T:System.InvalidOperationException">Measurement cannot run concurrently with selected measurement (Measurement.IsConcurrent = false).</exception>
            <remarks>This measurement must be able to <see cref="P:Agilent.SA.Vsa.Measurement.IsConcurrent">run concurrently</see> with the <see cref="P:Agilent.SA.Vsa.MeasurementCollection.SelectedItem">selected measurement (app.Measurements.SelectedItem)</see> or a System.InvalidOperationException will be thrown.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Measurement.PresetTraces">
            <summary>Preset the trace results for this measurement.</summary>
        </member>
        <member name="M:Agilent.SA.Vsa.Measurement.Preset">
            <summary>
            Presets the current measurement to its factory default setup state. This method does not
            change the current hardware configuration for the measurement.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.Measurement.RecallSSFile(System.String)">
            <summary>
            Recall Signal Studio setup from the named file
            </summary>
            <param name="fileName">The full pathname of the file from which to recall Signal 
            Studio setup information</param>
        </member>
        <member name="M:Agilent.SA.Vsa.Measurement.Record">
            <summary>
            Pauses the current measurement and start recording the input data.
            </summary>
            <remarks>
            	<para>This measurement must be able to <see cref="P:Agilent.SA.Vsa.Measurement.IsConcurrent">run concurrently</see> with the <see cref="P:Agilent.SA.Vsa.MeasurementCollection.SelectedItem">selected measurement
            (app.Measurements.SelectedItem)</see> or a System.InvalidOperationException will be thrown.</para>
            	<para>To stop recordings in progress, use <see cref="M:Agilent.SA.Vsa.Measurement.Pause">Measurement.Pause()</see> or
            <see cref="M:Agilent.SA.Vsa.MeasurementCollection.Pause">MeasurementCollection.Pause()</see>.</para>
            </remarks>
            <exception caption="" cref="T:System.InvalidOperationException">Measurement cannot run concurrently with selected measurement (Measurement.IsConcurrent = false).</exception>
        </member>
        <member name="M:Agilent.SA.Vsa.Measurement.WaitForRecordingDone">
            <summary> Wait 10 seconds for the recording to complete.</summary>
            <exception caption="" cref="T:System.TimeoutException">A TimeoutException will be thrown if the recording is 
            not complete within 10 seconds.</exception>
            <remarks>
            	<para>To stop recordings in progress, use <see cref="M:Agilent.SA.Vsa.Measurement.Pause">Measurement.Pause()</see> or
                <see cref="M:Agilent.SA.Vsa.MeasurementCollection.Pause">MeasurementCollection.Pause()</see>.</para>
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Measurement.WaitForRecordingDone(System.Int32)">
            <summary>Wait for the recording to complete.</summary>
            <param name="msTimeout">The number of milliseconds to wait.</param>
            <exception caption="" cref="T:System.TimeoutException">A TimeoutException will be thrown if the recording is 
            not complete within the specified number of milliseconds.</exception>
            <remarks>
            	<para>To stop recordings in progress, use <see cref="M:Agilent.SA.Vsa.Measurement.Pause">Measurement.Pause()</see> or
                <see cref="M:Agilent.SA.Vsa.MeasurementCollection.Pause">MeasurementCollection.Pause()</see>.</para>
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Measurement.Resume">
            <summary>
            Causes the measurement to transition to the Running state.
            </summary>
            <exception caption="" cref="T:System.InvalidOperationException">Measurement cannot run concurrently with selected measurement (Measurement.IsConcurrent = false).</exception>
            <remarks>This measurement must be able to <see cref="P:Agilent.SA.Vsa.Measurement.IsConcurrent">run concurrently</see> with the <see cref="P:Agilent.SA.Vsa.MeasurementCollection.SelectedItem">selected measurement (app.Measurements.SelectedItem)</see> or a System.InvalidOperationException will be thrown.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Measurement.SetMeasurementExtension``1">
            <summary>
            Changes the the current measurement to the indicated type (if necessary) and
            returns an appropriately typed handle to the extension object.
            </summary>
            <typeparam name="T">The desired measurement type.</typeparam>
            <returns>A correctly typed handle to the requested extension object. If the requested
            measurement type is not available, an exception is thrown. In this case, the previous
            measurement type is left unchanged.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.Measurement.SetMeasurementExtension(System.Type)">
            <summary>
            Changes the the current measurement to the indicated type (if necessary) and
            returns a handle to the extension object.
            </summary>
            <param name="measurementType">The desired measurement type.</param>
            <returns>A handle to the requested extension object. If the requested
            measurement type is not available, an exception is thrown. In this case, the previous
            measurement type is left unchanged.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.Measurement.IsEnabledMeasurementExtension(System.Type)">
            <summary>
            Gets a value indicating whether the specified measurement type is enabled.
            </summary>
            <param name="extension">The desired measurement type.</param>
            <returns>Returns true if you can set the current measurement to the passed measurement type.
            Returns false if calling SetMeasurementExtension for this type will throw an
            exception.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.Measurement.Restart">
            <summary>
            Causes the measurement to restart. The Average count is reset to 0 and the measurement
            transitions to the Running State.
            </summary>
            <exception caption="" cref="T:System.InvalidOperationException">Measurement cannot run concurrently with selected measurement (Measurement.IsConcurrent = false).</exception>
            <remarks>This measurement must be able to <see cref="P:Agilent.SA.Vsa.Measurement.IsConcurrent">run concurrently</see> with the <see cref="P:Agilent.SA.Vsa.MeasurementCollection.SelectedItem">selected measurement (app.Measurements.SelectedItem)</see> or a System.InvalidOperationException will be thrown.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Measurement.WaitForMeasurementDone">
            <summary> Wait 10 seconds for the measurement to complete.</summary>
            <remarks>
            <para>For non-averaged measurements, one cycle is all that is required. For
            averaged measurements, the average must complete.</para>
            </remarks>
            <exception caption="" cref="T:System.TimeoutException">A TimeoutException will be thrown if the measurement is 
            not complete within the specified number of milliseconds.</exception>
        </member>
        <member name="M:Agilent.SA.Vsa.Measurement.WaitForMeasurementDone(System.Int32)">
            <summary>Wait for the measurement to complete.</summary>
            <param name="msTimeout">The number of milliseconds to wait.</param>
            <remarks>
            <para>
            For non-averaged measurements, one cycle is all that is required. For
            averaged measurements, the average must complete.</para>
            </remarks>
            <exception caption="" cref="T:System.TimeoutException">A TimeoutException will be thrown if the measurement is 
            not complete within the specified number of milliseconds.</exception>
        </member>
        <member name="M:Agilent.SA.Vsa.Measurement.MeasurementData(System.String)">
            <summary>Returns the measurement data for the passed data name.</summary>
            <param name="dataName">The <see cref="P:Agilent.SA.Vsa.Trace.DataName">data name</see>.</param>
            <remarks>Each call to this method returns a newly allocated instance of the <see cref="T:Agilent.SA.Vsa.MeasurementData"/> class. This new instance has an infinite lifetime in the
            server process until the client notifies the server that it is done using the instance. This notification is provided by calling the Dispose() method on the
            returned instance. Failure to call Dispose() on returned instances will lead to unchecked memory growth in the server process as more instances are created.
            <para></para><para>The recommended pattern for using the MeasurementData() method is shown in the Examples section. </para></remarks>
            <returns>Returns the measurement data if the data name is valid, otherwise null.</returns>
            <example>
            	<code title="Example" description="" lang="CS">
            using (MeasurementData data = app.Measurements.SelectedItem.MeasurementData("Syms/Errs1"))
            {
                if (data != null)
                {
                    string[] summaryNames = data.SummaryNames;
                    for (int i = 0; i &lt; summaryNames.Length; i++)
                    {
                        object summaryData = data.Summary(i);
                        if (summaryData != null)
                        {
                            // do something with the data...
                        }
                    }
                }
            }</code>
            	<code title="Example2" description="" lang="VB.NET">
            Dim data As MeasurementData
                    
            data = app.Measurements.SelectedItem.MeasurementData("Syms/Errs1")
            If (Not (IsNothing(data))) Then
                Try
                    Dim summaryNames As String() = data.SummaryNames
                    For i As Integer = 0 To summaryNames.Length - 1
                        Dim summaryData = data.Summary(i)
                        If (Not (IsNothing(summaryData))) Then
                            ' do something with the data
                        End If
                    Next
                Finally
                    DirectCast(data, IDisposable).Dispose()
                End Try
            End If</code>
            </example>
        </member>
        <member name="M:Agilent.SA.Vsa.Measurement.IsCalculateMeasurementData(System.String,System.Boolean)">
            <summary>Set whether the passed measurement data is calculated even if not displayed.</summary>
            <param name="dataName">The <see cref="P:Agilent.SA.Vsa.Trace.DataName">data name</see>.</param>
            <param name="isCalculate">Whether the measurement data is calculated.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.Measurement.IsCalculateMeasurementData(System.String)">
            <summary>Gets a value indicating whether the specified measurement data is calculated even if not displayed.</summary>
            <param name="dataName">Name of the measurement data.</param>
            <returns>Whether the measurement data is calculated.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.Measurement.IsCalculateMeasurementDataClear">
            <summary>Clears all measurement data results so they are not calculated if not displayed.</summary>
        </member>
        <member name="M:Agilent.SA.Vsa.Measurement.GetSharedMeasurements">
            <summary>
            Gets the collection of measurements that are shared with this measurement.
            </summary>
            <version>15.00</version>
            <remarks>When multiple measurements are using the same <see cref="P:Agilent.SA.Vsa.Measurement.SelectedAnalyzer">SelectedAnalyzer</see> and <see cref="P:Agilent.SA.Vsa.Measurement.IsShareEnabled">IsShareEnabled</see> is true for these measurements, then they
            can be run at the same time. Otherwise, when you start one of these measurements, it will stop any other measurements that use the same SelectedAnalyzer.</remarks>
            <returns>the collection of measurements</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.Measurement.GetConcurrentMeasurements">
            <summary>
            Gets the collection of measurements that may be run concurrently with this measurement.
            </summary>
            <returns>A collection of the concurrent measurements.</returns>
            <version>15.00</version>
        </member>
        <member name="M:Agilent.SA.Vsa.Measurement.GetRecordMeasurements">
            <summary>
            Gets the collection of measurements that may be recorded concurrently with this measurement.
            </summary>
            <returns>A collection of the recordable measurements.</returns>
            <version>18.50</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Measurement.Average">
            <summary>
            Gets a handle to the Average object for the measurement.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Measurement.CustomSteps">
            <summary>
            Gets the custom steps collection.  Internal use only.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Measurement.Frequency">
            <summary>
            Gets a handle to the Frequency object for the measurement.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Measurement.Input">
            <summary>
            Gets a handle to the Input object for the measurement.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Measurement.IsContinuous">
            <summary>
            Gets or sets a value indicating whether the measurement is continuous.
            </summary>
            <remarks>
            Single sweep means that the measurement automatically pauses at the end of each sweep.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Measurement.IsRunning">
            <summary>
            Gets a value indicating whether the measurement is currently running.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Measurement.IsRecording">
            <summary>
            Gets a value indicating whether the measurement is currently making a recording.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Measurement.RecordPercentDone">
            <summary>
            Gets the progress of the current recording (0.0 to 100.0 percent).
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Measurement.Message">
            <summary>
            Gets the current measurement message
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Measurement.Error">
            <summary>
            Gets the current measurement error
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Measurement.IsTestPass">
            <summary>
            Gets a value indicating whether the current measurement (limit) test passed
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Measurement.MeasurementExtension">
            <summary>
            Gets a handle to the current extension object. The caller must cast it to the appropriate
            type (indicated by the ExtensionType property) to access members of the object.
            </summary>
            <returns>A handle to the current demodulation object.</returns>
        </member>
        <member name="P:Agilent.SA.Vsa.Measurement.MeasurementExtensionType">
            <summary>
            Gets the type of the current measurement. It returns the same type as MeasurementExtension().InterfaceType,
            but provides a more convenient way to bind to a PropertyChanged notification.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Measurement.Name">
            <summary>
            Gets or sets the measurement name.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Measurement.ProcessingExtensions">
            <summary>
            Gets the collection of processing extensions for the measurement.
            </summary>
            <version>16.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Measurement.SelectedAnalyzer">
            <summary>
            Gets or sets the hardware to use for this measurement.
            </summary>
            <exception cref="T:System.InvalidOperationException">An InvalidOperationException will be thrown 
            if an error occurs while changing to the specified hardware.  If this happens the software will
            attempt to change back to the previous hardware used by this measurement prior to throwing the exception.</exception>
        </member>
        <member name="P:Agilent.SA.Vsa.Measurement.Time">
            <summary>
            Gets a handle to the Time object for the measurement.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Measurement.Status">
            <summary>
            Gets a handle to the Status object for the measurement.
            </summary>
            <remarks>See the <see cref="T:Agilent.SA.Vsa.Status"/> class for information on reading the contents of this property.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Measurement.UserStatus">
            <summary>
            Gets a handle to a Status object for the measurement. UserStatus should only be used by code 
            interacting with the UserInput API.
            </summary>
            <remarks>Use the <see cref="P:Agilent.SA.Vsa.Measurement.Status"/> property unless serving data via the UserInput API</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Measurement.Corrections">
            <summary>
            Gets a collection of Correction objects (one per logical channel)
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Measurement.InputCorrections">
            <summary>
            Gets a collection of InputCorrection objects (one per input channel)
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Measurement.IsMeasurementDone">
            <summary>Gets a value indicating whether the measurement is complete.</summary>
            <remarks>
            For non-averaged measurements, one cycle is all that is required. For
            averaged measurements, the average must complete.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Measurement.IsShareEnabled">
            <summary>
            Gets or sets a value indicating whether the measurement can share hardware with another measurement.
            </summary>
            <remarks>
            When multiple measurements are using the same SelectedAnalyzer and IsShareEnabled is true for
            these measurements, then they can be run at the same time.  Otherwise, when you start one
            of these measurements, it will stop any other measurements that use the same SelectedAnalyzer.
            </remarks>
            <version>15.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Measurement.IsConcurrent">
            <summary>Gets a value indicating whether this measurement may be run concurrently with the 
            <see cref="P:Agilent.SA.Vsa.MeasurementCollection.SelectedItem">selected measurement</see>
            </summary>
            <version>15.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Measurement.MeasurementSync">
            <summary>
            Gets or sets a value indicating whether the measurement can trigger sync with another measurement.
            </summary>
            <remarks>
            When multiple independent concurrent measurements are using separate hardware, the trigger output from
            one measurement's hardware can be connected to other measurement hardware's trigger input to loosely synchronize
            the measurements.
            </remarks>
            <version>16.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Measurement.Spectrum">
            <summary>
            Gets a handle to the measurement's Spectrum object.
            </summary>
            <version>18.50</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Measurement.IsSupportedBySelectedAnalyzer">
            <summary>
            Gets a value indicating whether the current measurement extension is supported by the currently selected analyzer hardware.
            </summary>
            <version>18.50</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Measurement.InputDomain">
            <summary>
            Gets a value indicating what kind of input data this measurement requires.
            </summary>
            <remarks>For Spectrum input domain data use Measurement.Spectrum.Frequency instead of Measurement.Frequency to setup frequency related parameters.</remarks>
            <version>18.50</version>
        </member>
        <member name="T:Agilent.SA.VsaImplementation.IConcurrentMeasurement">
            <summary>
            An interface used by ThrowIfNotConcurrent
            </summary>
        </member>
        <member name="P:Agilent.SA.VsaImplementation.IConcurrentMeasurement.IsRestoring">
            <summary>
            Gets a value indicating whether or not a Restore operation is in progress.
            </summary>
        </member>
        <member name="T:Agilent.SA.VsaImplementation.IConcurrentMeasurement2">
            <summary>
            An interface used by ThrowIfNotConcurrent
            </summary>
        </member>
        <member name="P:Agilent.SA.VsaImplementation.IConcurrentMeasurement2.IsIncludedInMeasurementsGroup">
            <summary>
            Gets a value indicating whether or not the measurement is included in group operations
            </summary>
        </member>
        <member name="P:Agilent.SA.VsaImplementation.IConcurrentMeasurement2.CanBeExcludedFromMeasurementsGroup">
            <summary>
            Gets a value indicating whether the measurement is eligible to be excluded from a group operation.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.TracePersistence">
            <summary>The type of spectrogram / 3D color map.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TracePersistence.Off">
            <summary>No spectrogram / 3D map is displayed.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TracePersistence.Spectrogram">
            <summary>A spectrogram is displayed.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TracePersistence.TraceSum">
            <summary>A Cumulative History map is displayed</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TracePersistence.TraceDecay">
            <summary>A Digital Persistence map is displayed</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.SpecColorMapType">
            <summary>How to map colors to levels or counts.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.SpecColorMapType.ColorNormal">
            <summary>Specifies the default color map. This consists of range of colors with red as peak value and 
            blue as the minimum value.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.SpecColorMapType.ColorReverse">
            <summary>Specifies the same color map as color normal except the colors are reversed.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.SpecColorMapType.GreyNormal">
            <summary>Specifies a range of shades of grey. The peak value is the lightest shade of grey and the minimum value is the darkest shade of grey.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.SpecColorMapType.GreyReverse">
            <summary>Specifies the same map as grey normal except the shades of grey are reversed.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.SpecColorMapType.User">
            <summary>Specifies a custom color map defined by user.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.Spectrogram">
            <summary>
            The Spectrogram class controls the spectrogram and 3D map presentation of a trace.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.Spectrogram.FloatDataAtScan(System.Int32)">
            <summary>Gets the raw data as a float array at the specified scan index.</summary>
            <param name="scan">Specifies the spectrogram scan.</param>
            <returns>A float array</returns>
            <remarks>
            All scans have the same format as the Trace's <see cref="P:Agilent.SA.Vsa.MeasurementData.FloatData"/>, which contains the data for the current scan. 
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Spectrogram.DoubleDataAtScan(System.Int32)">
            <summary>Gets the raw data as a double array at the specified scan index.</summary>
            <param name="scan">Specifies the spectrogram scan.</param>
            <returns>A double array</returns>
            <remarks>
            All scans have the same format as the Trace's <see cref="P:Agilent.SA.Vsa.MeasurementData.DoubleData"/>, which contains the data for the current scan. 
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Spectrogram.ScanAtTime(System.Double)">
            <summary>Gets the nearest scan on the display to the specified time.</summary>
            <param name="seconds">Specifies the time relative to the start of the measurement.</param>
            <returns>The scan number.</returns>
            <remarks>
            Each scan in a spectrogram is tagged with the time of its acquisition relative to <see cref="M:Agilent.SA.Vsa.Measurement.Restart"/> (in seconds).
            This property returns the index of the nearest scan to the specified time offset (in seconds). 
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Spectrogram.ScanAtTimeAfterScan(System.Double,System.Int32)">
            <summary>Gets the nearest scan to the specified time but after the specified scan.</summary>
            <param name="seconds">Specifies the time relative to the reference.</param>
            <param name="firstScan">Specifies the reference scan.</param>
            <returns>The scan number.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.Spectrogram.ScanAtTimeTrace(System.Double)">
            <summary>Gets the nearest scan on the display to the specified time.</summary>
            <param name="seconds">Specifies the time relative to the start of the measurement.</param>
            <returns>The scan number.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.Spectrogram.ScansDuration(System.Int32,System.Double)">
            <summary>Gets the number of scans within the specified bounds. </summary>
            <param name="firstScan">Specifies the reference scan.</param>
            <param name="seconds">Specifies the duration in seconds.</param>
            <returns>The number of scans.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.Spectrogram.TimeAtScan(System.Int32)">
            <summary>Gets the time at the specified scan.</summary>
            <param name="scan">Specifies the spectrogram scan.</param>
            <returns>The time (in seconds).</returns>
            <remarks>
            Each scan in a spectrogram is tagged with the time of its acquisition relative to the <see cref="M:Agilent.SA.Vsa.Measurement.Restart"/> (in seconds). 
            This property returns the time offset (in seconds) of the specified scan.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Spectrogram.DurationScans(System.Int32,System.Int32)">
            <summary>Gets the time duration between the specified scans in seconds. </summary>
            <param name="firstScan">Specifies the reference scan.</param>
            <param name="scans">Specifies the scan count.</param>
            <returns>The time duration.</returns>
        </member>
        <member name="P:Agilent.SA.Vsa.Spectrogram.Style">
            <summary>Gets or sets whether spectrogram / 3D map is turned on, the persistence model, and how colors are mapped</summary>
            <remarks>
            <list type="table">
            	<listheader>
            		<term>value</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>TracePersistence.Off</term>
            		<description>No spectrogram or 3D map is selected.</description>
            	</item>
            	<item>
            		<term>TracePersistence.Spectrogram</term>
            		<description>Spectrogram is enabled with each scan being represented by one horizontal line with colors mapped to amplitude.
            		<see cref="P:Agilent.SA.Vsa.Spectrogram.MaxCount"/> scans of data are persisted</description>
            	</item>
            	<item>
            		<term>TracePersistence.TraceSum</term>
            		<description>Cumulative History is enabled with each pixel on the trace accumulating an occurrence count with colors mapped to this count.
            		The pixels are persisted, but not the individual scans of data.</description>
            	</item>
            	<item>
            		<term>TracePersistence.TraceDecay</term>
            		<description>Digital Persistence is enabled with color of each trace scan mapped to the age of the trace.
            		<see cref="P:Agilent.SA.Vsa.Spectrogram.ColorCount"/> scans of data are persisted / shown.</description>
            	</item>
            </list>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Spectrogram.IsVisible">
            <summary>Gets a value indicating whether <see cref="P:Agilent.SA.Vsa.Spectrogram.Style"/> is TracePersistence.Spectrogram and shown in a compatible <see cref="P:Agilent.SA.Vsa.Trace.Format"/>.</summary>
            <remarks>
            Tables are not shown as spectrograms.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Spectrogram.MaxCount">
            <summary>Gets or sets the maximum number of scans of data persisted in a spectrogram.</summary>
            <remarks>
            The maximum value is limited by the amount of memory in your computer. 
            The spectrogram memory is used to:
            <list type="bullet">
            	<item>Refresh the spectrogram when you change trace properties.</item>
            	<item>Save the spectrogram when you save the data to a file.</item>
            	<item>Read the data when you access data on a specified scan.</item>
            </list>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Spectrogram.ColorCount">
            <summary>Gets or sets the number of color levels for the spectrogram / 3D map.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Spectrogram.ColorMap">
            <summary>Gets or sets how to map values to colors.</summary>
            <remarks>
            This property sets or gets the scheme of mapping colors in the spectrogram / 3D map. 
            You can specify a normal or reverse, color or grey map, or you can specify a user color map. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Spectrogram.MapColorNames">
            <summary>Gets the array of <see cref="P:Agilent.SA.Vsa.Spectrogram.ColorCount"/> color names in the current <see cref="P:Agilent.SA.Vsa.Spectrogram.ColorMap"/>.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Spectrogram.Enhance">
            <summary>Gets or sets the color enhancement factor, which affects the distribution of colors in the spectrogram / 3D map.</summary>
            <remarks>
            This property sets a value to determine how colors are distributed in the color bar for spectrogram displays. 
            The default value is 50% (even distribution of colors in the color bar). 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Spectrogram.Threshold">
            <summary>Gets or sets the threshold, which affects the minimum amplitude value that will be shown in the spectrogram / 3D map.</summary>
            <remarks>The threshold is a value between 0 and 100.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Spectrogram.Height">
            <summary>Gets or sets the height of the spectrogram (in seconds).</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Spectrogram.IsHeightAuto">
            <summary>Gets or sets a value indicating whether the height is automatically determined from the size of the window (not from the <see cref="P:Agilent.SA.Vsa.Spectrogram.Height"/> property). </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Spectrogram.First">
            <summary>Gets or sets the first (top) scan displayed in a spectrogram.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Spectrogram.Last">
            <summary>Gets or sets the last (bottom) scan displayed in a spectrogram.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Spectrogram.IsFirstAuto">
            <summary>Gets or sets a value indicating whether the first (top) scan is automatically determined (not from the <see cref="P:Agilent.SA.Vsa.Spectrogram.First"/> property).</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Spectrogram.Count">
            <summary>Gets the number of scans in the current spectrogram.</summary>
            <remarks>
            Count can be between 0 and <see cref="P:Agilent.SA.Vsa.Spectrogram.MaxCount"/>. 
            The spectrogram is emptied when you change the spectrogram <see cref="P:Agilent.SA.Vsa.Spectrogram.Style"/> and when you 
            start (not continue) a measurement (<see cref="M:Agilent.SA.Vsa.Measurement.Restart"/>). 
            You can use <see cref="M:Agilent.SA.Vsa.Spectrogram.DoubleDataAtScan(System.Int32)"/> or <see cref="M:Agilent.SA.Vsa.Spectrogram.FloatDataAtScan(System.Int32)"/> to get the raw (possibly complex) data for each scan in the spectrogram. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Spectrogram.TraceSelect">
            <summary>Gets or sets the spectrogram trace that is selected.</summary>
            <remarks>
            If <see cref="P:Agilent.SA.Vsa.Spectrogram.IsTraceSelectVisible"/> is True, then this property selects the current scan on a spectrogram trace. 
            All normal or delta markers are shown on the current scan. 
            Also, if another trace is showing the same result as this trace, then that trace shows the current scan. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Spectrogram.IsTraceSelectVisible">
            <summary>Gets or sets a value indicating whether spectrogram <see cref="P:Agilent.SA.Vsa.Spectrogram.TraceSelect"/> is enabled.</summary>
            <remarks>
            This property selects whether you control the current scan on a spectrogram trace. 
            If IsTraceSelectVisible is True, then the <see cref="P:Agilent.SA.Vsa.Spectrogram.TraceSelect"/> is the current scan, 
            otherwise the current scan is the last (most recent) scan of the spectrogram. 
            All normal or delta markers are shown on the current scan. 
            Also, if another trace is showing the same result as this trace, then that trace shows the current scan. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Spectrogram.FirstOnTrace">
            <summary>Gets the first (top) scan that is actually displayed.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Spectrogram.HeightOnTrace">
            <summary>Gets the number of scans that are actually displayed.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Spectrogram.IsClearOnRestart">
            <summary>
            Gets or sets a value indicating whether to clear the spectrogram when a restart is performed.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.TimeChannelCollection">
            <summary>
            This collection contains the set of <see cref="T:Agilent.SA.Vsa.TimeChannel"/> objects representing the
            time settings for each logical input channel.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.TimeChannel">
            <summary>
            This class is for channelized time parameters.
            </summary>
            <remarks>
            The channels represented by this class are logical channels, which may be combinations of multiple
            physical hardware channels.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.TimeChannel.GateDelay">
            <summary>
            Gets or sets the time gate delay for this channel, in seconds.
            </summary>
            <remarks>
            This value is the delay from the beginning of the main time record to the start of the time gate.
            <para/>
            Note that for multi-channel hardware, the gate delay can be set independently for each channel
            or all channels can be set to the same value. To set the gate delay for all channels to the same 
            value use the <see cref="P:Agilent.SA.Vsa.Time.GateDelay">Time.GateDelay</see> property.
            </remarks>
        </member>
        <member name="T:Agilent.SA.Vsa.TraceYUnitType">
            <summary>Specifies the units of the Y axis.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceYUnitType.Auto">
            <summary>Specifies the units are set automatically based upon the data.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceYUnitType.Peak">
            <summary>Specifies peak units.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceYUnitType.Rms">
            <summary>Specifies RMS units.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceYUnitType.Power">
            <summary>Specifies power units.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceYUnitType.MilliRms">
            <summary>Specifies milli RMS units.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.TraceFormatType">
            <summary>Specifies the trace format.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceFormatType.LogMagnitude">
            <summary>Logarithmic magnitude data.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceFormatType.LinearMagnitude">
            <summary>Linear magnitude data.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceFormatType.Real">
            <summary>Real part of the data.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceFormatType.Imaginary">
            <summary>Imaginary part of the data.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceFormatType.WrapPhase">
            <summary>Wrapped phase.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceFormatType.UnwrapPhase">
            <summary>Unwrapped phase.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceFormatType.IQ">
            <summary>IQ diagram (real versus imaginary data).</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceFormatType.Constellation">
            <summary>Constellation diagram at symbol points, or IQ diagram if not demodulated data.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceFormatType.EyeQ">
            <summary>Q part versus symbol clock time, or real part if not demodulated data. </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceFormatType.EyeI">
            <summary>I part versus symbol clock time, or imaginary part if not demodulated data. </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceFormatType.Trellis">
            <summary>Unwrapped phase versus symbol clock time, or unwrapped phase if not demodulated data. </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceFormatType.GroupDelay">
            <summary>Group delay.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceFormatType.LogMagnitudeLinear">
            <summary>Logarithmic magnitude data on a linear scale.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceFormatType.RealVsImaginary">
            <summary>Real versus imaginary data.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.TraceAxisFormatType">
            <summary>Specifies the trace format.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceAxisFormatType.LogMagnitude">
            <summary>Logarithmic magnitude data.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceAxisFormatType.LinearMagnitude">
            <summary>Linear magnitude data.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceAxisFormatType.Linear">
            <summary>Real part of the data.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.TraceTableFormat">
            <summary>Specifies the format used to display the symbol binary bit data in the Symbol Table.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceTableFormat.Binary">
            <summary>Binary format.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceTableFormat.Hexadecimal">
            <summary>Hexadecimal format (if there are enough bits/symbol).</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.TraceTableBitOrder">
            <summary>Specifies the bit order used to display the symbol data in the Symbol Table.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceTableBitOrder.Auto">
            <summary>Auto-detect bit order, default to MSB-first if unknown.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceTableBitOrder.MsbFirst">
            <summary>Bits are interpreted most significant bit first.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceTableBitOrder.LsbFirst">
            <summary>Bits are interpreted least significant bit first</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.TraceSymbolShape">
            <summary>Specifies the shape of the symbol locations for demodulated time-domain data.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceSymbolShape.None">
            <summary>symbol locations do not have any shape drawn.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceSymbolShape.Dots">
            <summary>symbol locations have a dot drawn on the data.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceSymbolShape.Bars">
            <summary>symbol location have a vertical line drawn from the data to the origin.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.TraceTimeUnit">
            <summary>Specifies the x- or z-axis Time units for demodulated data. </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceTimeUnit.Second">
            <summary>Seconds unit</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceTimeUnit.Symbol">
            <summary>symbol number</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.TraceFreqUnit">
            <summary>Specifies the x- or z-axis Frequency units for demodulated data. </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceFreqUnit.Hertz">
            <summary>Hertz unit</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceFreqUnit.Carrier">
            <summary>carrier number</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.TraceStateShape">
            <summary>The shape of the ideal state locations for demodulated time-domain data on an I-Q or constellation diagram.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceStateShape.None">
            <summary>state locations do not have any shape drawn.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceStateShape.Cross">
            <summary>state locations have a cross drawn.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceStateShape.Circle">
            <summary>state locations have a circle drawn.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.TraceCodeOrder">
            <summary>Specifies the Code Domain Power display code order.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceCodeOrder.Hadamard">
            <summary>Hadamard code order.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceCodeOrder.BitReverse">
            <summary>Bit Reversed code order.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.TraceDataSelect">
            <summary>Specifies which data is selected.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataSelect.X">
            <summary>The X-axis data is selected.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataSelect.Y">
            <summary>The Y-axis data is selected.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataSelect.XY">
            <summary>Both the X-axis and Y-axis data are selected.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.TraceDataDemodInformation">
            <summary>The Symbol Table Error Summary Data for Digital Demodulation (for use with <see cref="M:Agilent.SA.Vsa.StateDictionary.IndexedValueAsDouble(System.Enum)"/>).</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataDemodInformation.EvmRms">
            <summary>Specifies root mean square of the error vectors computed and expressed as percentage of square 
            root of mean power of ideal signal (units = percent).</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataDemodInformation.MagnitudeErrorRms">
            <summary>Specifies root mean square of the magnitude error computed and expressed as percent.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataDemodInformation.PhaseErrorRms">
            <summary>Specifies root mean square of the phase error computed and expressed as percent.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataDemodInformation.FrequencyError">
            <summary>Specifies the carrier frequency error relative to the measurement center frequency (units = Hz).</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataDemodInformation.AmplitudeDroop">
            <summary>Specifies the measure of change in the magnitude of the signal over the measured burst (units of dB/symbol).</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataDemodInformation.IQOffset">
            <summary>Specifies magnitude of the carrier feed through signal (units = linear ratio).</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataDemodInformation.PilotLevel">
            <summary>Specifies a pilot with an amplitudes that is larger than nominal. (units = dB)</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataDemodInformation.IQGainImbalance">
            <summary>Compares the gain of the I signal with the gain of the Q signal (units = dB).</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataDemodInformation.QuadratureError">
            <summary>Specifies the orthogonal error between the I and Q signals (units = degrees).</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataDemodInformation.EvmPeak">
            <summary>Specifies the mean (average) of the peak EVMs in a measurement. Valid only for EDGE demodulation format.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataDemodInformation.EvmPeakSym">
            <summary>Specifies the symbol that has the largest EVM.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataDemodInformation.MagnitudeErrorPeak">
            <summary>Specifies difference in amplitude between I/Q reference signal and I/Q measured signal.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataDemodInformation.MagnitudeErrorPeakSymbol">
            <summary>Specifies the symbol that has the largest magnitude error.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataDemodInformation.PhaseErrorPeak">
            <summary>Specifies phase difference between I/Q reference signal and I/Q measured signal measured at the symbol time.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataDemodInformation.PhaseErrorPeakSymbol">
            <summary>Specifies the symbol that has the largest phase error.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataDemodInformation.ClockAlign">
            <summary>Obsolete value.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataDemodInformation.MainFreqError">
            <summary>Obsolete value.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataDemodInformation.AmplitudeError">
            <summary>Obsolete value.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataDemodInformation.SignalToNoise">
            <summary>Specifies the Signal to Noise Ratio.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataDemodInformation.Rho">
            <summary>Compares the normalized correlated power between the measured signal signal and the reference signal.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataDemodInformation.EvmPeakRms">
            <summary>Specifies the root mean squared average of the peak EVM.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataDemodInformation.NinetyFivePercentEvm">
            <summary>Specifies the error vector magnitude below which 95% of the 
            individual symbol EVMs occur. Valid for EDGE demodulation only.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataDemodInformation.OffsetEvmRms">
            <summary>RMS value computed at one point per symbol by combining the I value from the beginning of each 
            symbol and the Q value from the middle of each symbol into a single complex value for EVM computations.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataDemodInformation.OffsetEvmPeak">
            <summary>Peak value computed at one point per symbol by combining the I value from the beginning of each 
            symbol and the Q value from the middle of each symbol into a single complex value for EVM computations.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataDemodInformation.OffsetEvmPeakSymbol">
            <summary>Specifies the symbol of the Offset EVM.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataDemodInformation.ApskR2Ratio">
            <summary>Specifies ring2/ring1 ratio for APSK modulation formats.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataDemodInformation.ApskR3Ratio">
            <summary>Specifies ring3/ring1 ratio for APSK modulation formats.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataDemodInformation.TimeOffset">
            <summary>Specifies time from trigger to symbol 0 of demod.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataDemodInformation.CpmH1">
            <summary>Specifies the H1 modulation index value detected during CPM(FM) modulation analysis.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataDemodInformation.CpmH2">
            <summary>Specifies the H2 modulation index value detected during CPM(FM) modulation analysis 
            (used by multi-h CPM modulation formats).</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.TraceDataOfdmInformation">
            <summary>Specifies the Symbol Table Error Summary Data for 802.11a OFDM 
            (for use with <see cref="M:Agilent.SA.Vsa.StateDictionary.IndexedValueAsDouble(System.Enum)"/>).</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataOfdmInformation.EvmRms">
            <summary>Specifies the root mean square Error Vector Magnitude for the entire burst in percent rms.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataOfdmInformation.EvmPeak">
            <summary>Specifies the peak Error Vector Magnitude for the signal in percent.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataOfdmInformation.EvmPeakSymbol">
            <summary>Specifies the symbol number of the peak Error Vector Magnitude for the signal.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataOfdmInformation.MagnitudeErrorRms">
            <summary>Not implemented.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataOfdmInformation.MagnitudeErrorPeak">
            <summary>Not implemented.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataOfdmInformation.MagnitudeErrorPeakSymbol">
            <summary>Not implemented.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataOfdmInformation.PhaseErrorRms">
            <summary>Not implemented.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataOfdmInformation.PhaseErrorPeak">
            <summary>Not implemented.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataOfdmInformation.PhaseErrorPeakSymbol">
            <summary>Not implemented.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataOfdmInformation.FrequencyError">
            <summary>Specifies the carrier frequency error relative to the measurement center frequency.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataOfdmInformation.IQOffset">
            <summary>Specifies the magnitude of the carrier feed through signal. No carrier feed through signal, I/Q offset = 0.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataOfdmInformation.SyncCorrelation">
            <summary>Specifies the cross correlation of the preamble synchronization for the measured signal to an ideal signal.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataOfdmInformation.LSEvm">
            <summary>Not implemented.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataOfdmInformation.PilotEvm">
            <summary>Specifies the RMS value of the Error Vector Magnitudes of the four pilot subcarriers for all symbols over the entire burst.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataOfdmInformation.CpeRms">
            <summary>Specifies the RMS level of the Common Pilot Error trace data minus 1 expressed as a percentage of an ideal signal.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataOfdmInformation.Octets">
            <summary>Specifies the number of decoded Octets transmitted in the OFDM burst. Not available for HIPERLAN/2 signals.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataOfdmInformation.NSym">
            <summary>Specifies the number of DATA symbols transmitted in the OFDM burst.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataOfdmInformation.CodingRateNumerator">
            <summary>Specifies the numerator of the OFDM data convolutional coding rate. Not available for HIPERLAN/2 signals.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataOfdmInformation.CodingRateDenominator">
            <summary>Specifies the denominator of the OFDM data convolutional coding rate. Not available for HIPERLAN/2 signals.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataOfdmInformation.BitsPerSymbol">
            <summary>Specifies the number of bits represented by each subcarrier in the OFDM signal. This depends on the modulation format: BPSK = 1, QPSK = 2, 16QAM = 4, and 64QAM = 6.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataOfdmInformation.Bitrate">
            <summary>Specifies the overall unencoded bit rate of the signal in bits per second.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataOfdmInformation.Count">
            <summary>Internal Use Only </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataOfdmInformation.SymbolClockError">
            <summary>Specifies the difference between the ideal and actual symbol clock frequency in ppm.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataOfdmInformation.Count2">
            <summary>Internal Use Only </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataOfdmInformation.IQQuadratureError">
            <summary>Specifies the orthogonal error between the I and Q signals.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataOfdmInformation.IQGainImbalance">
            <summary>Compares the gain of the I signal with the gain of the Q signal.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceDataOfdmInformation.Count3">
            <summary>Internal Use Only </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.TraceData3GChanInformation">
            <summary>Specifies the Channel Symbol Table Error Summary Data for W-CDMA(3GPP)/HSDPA 
            (for use with <see cref="M:Agilent.SA.Vsa.StateDictionary.IndexedValueAsDouble(System.Enum)"/>).</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceData3GChanInformation.EvmRms">
            <summary>Specifies the root mean square Error Vector Magnitude for a specified Code Channel and Spread Code Length in percent rms.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceData3GChanInformation.EvmPeak">
            <summary>Specifies the peak Error Vector Magnitude for a specified Code Channel and Spread Code Length in percent.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceData3GChanInformation.EvmPeakSym">
            <summary>Specifies the symbol number of the peak Error Vector Magnitude for a specified Code Channel and Spread Code Length.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceData3GChanInformation.MagnitudeErrorRms">
            <summary>Specifies the root mean square difference in amplitude between the I/Q measured signal and the I/Q reference signal for the specified Code Channel and Spread Code Length in percent rms.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceData3GChanInformation.MagnitudeErrorPeak">
            <summary>Specifies the peak difference in amplitude between the I/Q measured signal and the I/Q reference signal for the specified Code Channel and Spread Code Length in percent.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceData3GChanInformation.MagnitudeErrorPeakSymbol">
            <summary>Specifies the symbol number of the peak Phase Error for the specified Code Channel and Spread Code Length.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceData3GChanInformation.PhaseErrorRms">
            <summary>Specifies the root mean square difference in phase between the I/Q measured signal and the I/Q reference signal for the specified Code Channel and Spread Code Length in percent rms.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceData3GChanInformation.PhaseErrorPeak">
            <summary>Specifies the peak difference in phase between the I/Q measured signal and the I/Q reference signal for the specified Code Channel and Spread Code Length in percent.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceData3GChanInformation.PhaseErrorPeakSym">
            <summary>Specifies the symbol number of the peak Phase Error for the specified Code Channel and Spread Code Length.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceData3GChanInformation.PilotBits">
            <summary>Specifies the number of Pilot Bits detected in the DPCH channel for the specified Code Channel and Spread Code Length. Applies to Downlink signals only.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceData3GChanInformation.Slot">
            <summary>Identifies the first time Slot in the measurement for the specified Code Channel and Spread Code Length.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceData3GChanInformation.TDpch">
            <summary>Identifies the timing value for the DPCH channel for the specified Code Channel and Spread Code Length.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.TraceData3GCompInformation">
            <summary>Specifies the Composite Symbol Table Error Summary Data for W-CDMA(3GPP)/HSDPA
            (for use with <see cref="M:Agilent.SA.Vsa.StateDictionary.IndexedValueAsDouble(System.Enum)"/>).</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceData3GCompInformation.EvmRms">
            <summary>Specifies the root mean square Error Vector Magnitude for the composite signal in percent rms.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceData3GCompInformation.EvmPeak">
            <summary>Specifies the peak Error Vector Magnitude for the composite signal in percent.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceData3GCompInformation.EvmPeakChip">
            <summary>Specifies the chip number of the peak Error Vector Magnitude for the composite signal.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceData3GCompInformation.MagnitudeErrorRms">
            <summary>Specifies the root mean square difference in amplitude between the I/Q measured signal and the I/Q reference signal for the composite signal in percent rms.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceData3GCompInformation.MagnitudeErrorPeak">
            <summary>Specifies the peak difference in amplitude between the I/Q measured signal and the I/Q reference signal for the composite signal in percent.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceData3GCompInformation.MagnitudeErrorPeakChip">
            <summary>Specifies the chip number of the peak Magnitude Error for the composite signal.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceData3GCompInformation.PhaseErrorRms">
            <summary>Specifies the root mean square difference in phase between the I/Q measured signal and the I/Q reference signal for the composite signal in percent rms.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceData3GCompInformation.PhaseErrorPeak">
            <summary>Specifies the peak difference in phase between the I/Q measured signal and the I/Q reference signal for the composite signal in percent.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceData3GCompInformation.PhaseErrorPeakChip">
            <summary>Specifies the chip number of the peak Phase Error for the composite signal.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceData3GCompInformation.FreqError">
            <summary>Specifies the composite signal carrier frequency error relative to the measurement center frequency.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceData3GCompInformation.IQOffset">
            <summary>Specifies the magnitude of the carrier feed through signal. No carrier feed through signal, I/Q offset = 0.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceData3GCompInformation.IQGainImbalance">
            <summary>Not implemented.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceData3GCompInformation.IQQuadratureError">
            <summary>Not implemented.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceData3GCompInformation.Rho">
            <summary>Specifies the normalized correlation coefficient between the measured and ideal reference signal.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceData3GCompInformation.ActiveCdePeak">
            <summary>Specifies the largest active Code Channel Code Domain Error.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceData3GCompInformation.CdePeak">
            <summary>Specifies the largest measured Code Channel Code Domain Error (for active and inactive code channels).</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceData3GCompInformation.Slot">
            <summary>Identifies the first time Slot in the measurement for the composite signal.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceData3GCompInformation.TTrig">
            <summary>Specifies the amount of time, in chips, from the trigger to the start of the frame.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.TraceUpdateType">
            <summary>Specifies how trace data is updated.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceUpdateType.ClearWrite">
            <summary>Specifies the new trace data overwrites the old trace data.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceUpdateType.Average">
            <summary>Specifies the new trace data is averaged with the old trace data.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceUpdateType.Maximum">
            <summary>Specifies the trace data is the maximum of the new trace data and the old trace data.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.TraceUpdateType.Minimum">
            <summary>Specifies the trace data is the minimum of the new trace data and the old trace data.</summary>
        </member>
        <member name="T:Agilent.SA.Vsa.Trace">
            <summary>
            The Trace class represents one trace window containing measurement data. 
            </summary>
            <remarks>
            There are methods to control the trace presentation (including spectrogram/maps), access measurement data, and markers.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Trace.YTopBottom(System.Double,System.Double)">
            <summary>Set the top and bottom sides of the y-axis scale.</summary>
            <param name="top">top side of the y-axis scale</param>
            <param name="bottom">bottom side of the y-axis scale</param>
            <seealso cref="P:Agilent.SA.Vsa.Trace.YTop"/>
            <seealso cref="P:Agilent.SA.Vsa.Trace.YBottom"/>
        </member>
        <member name="M:Agilent.SA.Vsa.Trace.YScaleAuto">
            <summary>AutoScale the y-axis.</summary>
            <remarks>
            YScaleAuto sets the <see cref="P:Agilent.SA.Vsa.Trace.YPerDiv"/> and <see cref="P:Agilent.SA.Vsa.Trace.YRefLevel"/> to values that maximize the display 
            size of the Y axis for the currently displayed data while retaining Y trace annotation 
            numbers that are easy to work with.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Trace.XLeftRight(System.Double,System.Double)">
            <summary>Set the left and right side of the x-axis scale.</summary>
            <param name="xLeft">left side of the x-axis scale</param>
            <param name="xRight">right side of the x-axis scale</param>
            <seealso cref="P:Agilent.SA.Vsa.Trace.XLeft"/>
            <seealso cref="P:Agilent.SA.Vsa.Trace.XRight"/>
        </member>
        <member name="M:Agilent.SA.Vsa.Trace.FloatData(Agilent.SA.Vsa.TraceDataSelect,System.Boolean)">
            <summary>Gets the data (numbers) in the current trace format as an array of floats.</summary>
            <param name="selectedData">
            <list type="table">
            	<listheader>
            		<term>Value</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>TraceDataSelect.X</term>
            		<description>The X-axis data is selected.</description>
            	</item>
            	<item>
            		<term>TraceDataSelect.Y</term>
            		<description>The Y-axis data is selected.</description>
            	</item>
            	<item>
            		<term>TraceDataSelect.XY</term>
            		<description>Both the X-axis and Y-axis data are selected.</description>
            	</item>
            </list>
            </param>
            <param name="scaleLimit">
            Specifies how much data is read. 
            If True, only the X scaled data seen on the trace 
            (between <see cref="P:Agilent.SA.Vsa.Trace.XLeft"/> and <see cref="P:Agilent.SA.Vsa.Trace.XRight"/> if <see cref="P:Agilent.SA.Vsa.Trace.IsXScaleAuto"/> is False) is read.
            </param>
            <returns>Float array if there is data, otherwise null.</returns>
            <remarks>
            <para>
            The FloatData property returns the trace data in the <see cref="P:Agilent.SA.Vsa.Trace.Format"/> that is being displayed (e.g. log mag, phase, etc.).
            The data returned is an array of numbers.
            </para>
            <para>
            If bScaleLimit is True, then only the X scaled data that you see on the trace 
            (between <see cref="P:Agilent.SA.Vsa.Trace.XLeft"/> and <see cref="P:Agilent.SA.Vsa.Trace.XRight"/> if <see cref="P:Agilent.SA.Vsa.Trace.IsXScaleAuto"/> is False) is read.
            </para>
            <para>
            The selectedData parameter is used to select which data to read: X data, Y data, or both X and Y data. 
            If both X and Y data are read, then the data is returned interleaved X followed by Y for each point.
            </para>
            <para>
            You might want to use <see cref="M:Agilent.SA.Vsa.Trace.DoubleData(Agilent.SA.Vsa.TraceDataSelect,System.Boolean)"/> instead of this method to read data if you are reading 
            X data because, for large frequencies, you might need the extra resolution of a double value.
            </para>
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Trace.DoubleData(Agilent.SA.Vsa.TraceDataSelect,System.Boolean)">
            <summary>Gets the data (numbers) in the current trace format as an array of double.</summary>
            <param name="selectedData">
            <list type="table">
            	<listheader>
            		<term>Value</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>TraceDataSelect.X</term>
            		<description>The X-axis data is selected.</description>
            	</item>
            	<item>
            		<term>TraceDataSelect.Y</term>
            		<description>The Y-axis data is selected.</description>
            	</item>
            	<item>
            		<term>TraceDataSelect.XY</term>
            		<description>Both the X-axis and Y-axis data are selected.</description>
            	</item>
            </list>
            </param>
            <param name="scaleLimit">
            Specifies how much data is read. 
            If True, only the X scaled data seen on the trace 
            (between <see cref="P:Agilent.SA.Vsa.Trace.XLeft"/> and <see cref="P:Agilent.SA.Vsa.Trace.XRight"/> if <see cref="P:Agilent.SA.Vsa.Trace.IsXScaleAuto"/> is False) is read.
            </param>
            <returns>Double array if there is data, otherwise null.</returns>
            <remarks>
            <para>
            The DoubleData property returns the trace data in the <see cref="P:Agilent.SA.Vsa.Trace.Format"/> that is being displayed (e.g. log mag, phase, etc.).
            The data returned is an array of numbers.
            </para>
            <para>
            If bScaleLimit is True, then only the X scaled data that you see on the trace 
            (between <see cref="P:Agilent.SA.Vsa.Trace.XLeft"/> and <see cref="P:Agilent.SA.Vsa.Trace.XRight"/> if <see cref="P:Agilent.SA.Vsa.Trace.IsXScaleAuto"/> is False) is read.
            </para>
            <para>
            The selectedData parameter is used to select which data to read: X data, Y data, or both X and Y data. 
            If both X and Y data are read, then the data is returned interleaved X followed by Y for each point.
            </para>
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Trace.SaveFile(System.String,System.String,System.Boolean)">
            <summary>Save the trace in the specified format to a file. </summary>
            <param name="fileName">Specifies the file name.</param>
            <param name="format">Specifies the file format.</param>
            <param name="doSaveHeader">Specifies if the Header is saved with the data.</param>
            <remarks>
            <para>
            Saves the trace data to a specified file in a specified format.
            </para>
            <para>
            Supported File Formats:
            <list type="table">
            	<listheader>
            		<term>format</term>
            		<description>Description</description>
            	</listheader>
            	<item>
            		<term>"CSV"</term>
            		<description>CSV (Comma delimited) [*.csv]</description>
            	</item>
            	<item>
            		<term>"MAT"</term>
            		<description>MAT-File [*.mat]</description>
            	</item>
            	<item>
            		<term>"MAT4"</term>
            		<description>MAT-File (Version 4) [*.mat]</description>
            	</item>
            	<item>
            		<term>"MAT7"</term>
            		<description>MAT-File (HDF5) [*.mat, *.hdf, *.h5]</description>
            	</item>
            	<item>
            		<term>"N5110A"</term>
            		<description>N5110A Waveform [*.bin]</description>
            	</item>
            	<item>
            		<term>"N5106A"</term>
            		<description>N5106A Waveform [*.bin]</description>
            	</item>
            	<item>
            		<term>"SDF"</term>
            		<description>SDF (Fast) [*.sdf, *.dat]</description>
            	</item>
            	<item>
            		<term>"TEXT"</term>
            		<description>Text (Tab delimited) [*.txt]</description>
            	</item>
            </list>
            </para>
            <para>
            For more information about file types, see the "Supported File Formats" topic in the VSA application help.
            </para>
            <para>
            If the format is an empty string, then the analyzer automatically determines the file format by looking 
            at the file suffix. If this is not sufficient, then a default format is chosen.
            </para>
            <para>
            If the doSaveHeader parameter is False, then the data header is not saved with the data. 
            This means if you recall the data back into the instrument, the time\frequency parameters for 
            the data will not be restored.
            </para>
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Trace.CopyToDataRegister(System.Int32)">
            <summary>Copy this trace to the specified data register by index.</summary>
            <param name="registerIndex">Specifies a data register as a 0-based index into the <see cref="T:Agilent.SA.Vsa.DataRegisterCollection"/>.</param>
            <remarks>
            This method overwrites any previous results in the specified data register. 
            The <see cref="M:Agilent.SA.Vsa.DataRegister.Remove"/> method removes the data register from memory. 
            The <see cref="M:Agilent.SA.Vsa.DataRegister.RecallFile(System.String,System.String)"/> method copies a file into the specified data register. 
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Trace.CopyToDataRegister(System.String)">
            <summary>Copy this trace to the specified data register by name.</summary>
            <param name="registerName">Specifies a data register as a name into the <see cref="T:Agilent.SA.Vsa.DataRegisterCollection"/>.</param>
            <remarks>
            "D1" is the first data register, "D2" is the second data register, etc.
            This method overwrites any previous results in the specified data register. 
            The <see cref="M:Agilent.SA.Vsa.DataRegister.Remove"/> method removes the data register from memory. 
            The <see cref="M:Agilent.SA.Vsa.DataRegister.RecallFile(System.String,System.String)"/> method copies a file into the specified data register. 
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Trace.CopyDataToClipboard">
            <summary>Copy the trace data (numbers) to the clipboard.</summary>
            <remarks>
            Copy the data to the clipboard as it appears on the displayed trace in the specified <see cref="P:Agilent.SA.Vsa.Trace.Format"/> 
            with the specified X scaling. 
            The numbers are 2 per line, X followed by Y (separated by a tab) for each point. 
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.Trace.WaitForDataValid">
            <summary>Wait 10 seconds for the data for this trace to be valid.</summary>
            <remarks>Valid data must contain at least one data value and be marked as valid.</remarks>
            <exception caption="" cref="T:System.TimeoutException">A TimeoutException will be thrown if the data is 
            not valid within the specified number of milliseconds.</exception>
        </member>
        <member name="M:Agilent.SA.Vsa.Trace.WaitForDataValid(System.Int32)">
            <summary>Wait for the data for this trace to be valid.</summary>
            <param name="msTimeout">The number of milliseconds to wait.</param>
            <remarks>Valid data must contain at least one data value and be marked as valid.</remarks>
            <exception caption="" cref="T:System.TimeoutException">A TimeoutException will be thrown if the data is 
            not valid within the specified number of milliseconds.</exception>
        </member>
        <member name="M:Agilent.SA.Vsa.Trace.XAxisLeftRight(System.Double,System.Double)">
            <summary>Set the left and right sides of the x-axis scale when <see cref="P:Agilent.SA.Vsa.Trace.Format"/> is <see cref="F:Agilent.SA.Vsa.TraceFormatType.RealVsImaginary"/>.</summary>
            <param name="left">left side of the x-axis scale</param>
            <param name="right">right side of the x-axis scale</param>
            <seealso cref="P:Agilent.SA.Vsa.Trace.XAxisRight"/>
            <seealso cref="P:Agilent.SA.Vsa.Trace.XAxisLeft"/>
            <version>17.00</version>
        </member>
        <member name="M:Agilent.SA.Vsa.Trace.XAxisScaleAuto">
            <summary>AutoScale the x-axis when <see cref="P:Agilent.SA.Vsa.Trace.Format"/> is <see cref="F:Agilent.SA.Vsa.TraceFormatType.RealVsImaginary"/>.</summary>
            <remarks>
            XAxisScaleAuto sets the <see cref="P:Agilent.SA.Vsa.Trace.XAxisPerDiv"/> and <see cref="P:Agilent.SA.Vsa.Trace.XAxisRefLevel"/> to values that maximize the display 
            size of the X axis for the currently displayed data while retaining X trace annotation 
            numbers that are easy to work with.
            </remarks>
            <version>17.00</version>
        </member>
        <member name="M:Agilent.SA.Vsa.Trace.UpdateResetAverage">
            <summary>
            Resets the averaging for the trace.
            </summary>
            <version>18.50</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.Markers">
            <summary>Gets the collection of markers for this trace.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.Spectrogram">
            <summary>Gets the spectrogram/map object for this trace.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.IsVisible">
            <summary>Gets or sets a value indicating whether this trace is visible.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.Label">
            <summary>Gets the label (i.e. "A", "B") for this trace.</summary>
            <remarks>The first trace in the Traces collection is labeled "A", the second one is "B", etc.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.DataName">
            <summary>Gets or sets which trace data result is computed for this Trace.</summary>
            <remarks>
            <para>
            The DataName property sets or returns the string that identifies a data source for 
            this trace. The DataName is spelled differently than the trace data 
            title (DataTitle property) that shows in the window title of the trace window. 
            The trace data label name is modified for clarity, this may include additional spaces, 
            demod type information, etc.
            </para>
            <para>
            You can use the output window to find out what the active trace data name is; 
            Open the output window (Click Window &gt; Output), select the "Show Code" checkbox in the Output window, and
            then do the steps to specify a trace data.  The output window shows the code to set the trace data name. 
            You can also use the <see cref="P:Agilent.SA.Vsa.TraceCollection.DataNames"/> property to return an array containing 
            all the current possible data sources. 
            If you are only interested in a subset of the available sources, use 
            <see cref="P:Agilent.SA.Vsa.TraceCollection.DataNamesMeasurements"/>, <see cref="P:Agilent.SA.Vsa.TraceCollection.DataNamesMath"/>, 
            <see cref="P:Agilent.SA.Vsa.TraceCollection.DataNamesGraph"/>, <see cref="P:Agilent.SA.Vsa.TraceCollection.DataNamesDataRegister"/>, or
            <see cref="P:Agilent.SA.Vsa.TraceCollection.DataNameNoData"/> 
            to return only the Measurement, Math Functions, Graphs, or Registers sources, or the name No Data, respectively.
            </para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.DataTitle">
            <summary>Gets the trace title that is displayed in window title of each trace window. </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.MeasurementIndex">
            <summary>
            Gets the index of the measurement (<see cref="T:Agilent.SA.Vsa.MeasurementCollection"/>) that generated this trace's data.
            </summary>
            <remarks>Returns -1 if this trace was not generated by any measurement.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.Format">
            <summary>Gets or sets the trace format.</summary>
            <remarks>
            Determines the trace format. Not all trace formats are meaningful for all data types. For example, 
            the phase data types (Wrap phase, Unwrap phase, and Trellis-Eye) always show zero of real data 
            (e.g. baseband time data). The constellation format will show the same as I-Q if you are not 
            displaying a digital demod measured or reference time trace. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.PhaseOffset">
            <summary>Gets or sets the phase offset (degrees) for the unwrapped phase format.</summary>
            <remarks>
            Determine the phase offset, in degrees, for unwrapping phase information. 
            This is only used if the trace format is TraceFormatType.UnwrapPhase.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.UnwrapRef">
            <summary>Gets or sets the unwrapped phase reference (degrees).</summary>
            <remarks>
            Determine the unwrapped phase reference, in degrees, for this trace.
            Wrapped phase means that all phase is shifted to between -180 degrees and +180 degrees. 
            If the actual phase is outside this range, it is increased or decreased by a multiple of 
            360 degrees to put it between -180 and +180 degrees.
            For example, +400 degrees is returned as +40 degrees (400 - 360 = 40), and -190 degrees as 
            +170 degrees (-190 + 360 = 170).
            Unwrapped phase lets you designate the point (x-axis) Value about which phase values 
            are to be unwrapped. 
            This would typically be a well known point in a measurement such as the pass band of a band pass filter.
            The UnwrapRef is only used if the trace format is TraceFormatType.UnwrapPhase. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.Aperture">
            <summary>Gets or sets the group delay aperture. </summary>
            <remarks>
            The Aperture property sets or returns the value of the group delay aperture, 
            expressed as a percentage of the data.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.YTop">
            <summary>Gets or sets the top side of the y-axis scale.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.YBottom">
            <summary>Gets or sets the bottom side of the y-axis scale.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.YAxisUnit">
            <summary>Gets the y-axis unit string.</summary>
            <remarks>
            Returns the units on the Y axis of the trace. 
            The Y axis units are determined by type of data on the trace, the <see cref="P:Agilent.SA.Vsa.Trace.Format"/> of the trace, 
            and the <see cref="P:Agilent.SA.Vsa.Trace.YUnit"/>. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.YLogRatio">
            <summary>Gets or sets the ratio between the top and bottom when in TraceFormatType.LogMagnitudeLinear format.</summary>
            <remarks>
            This property is only used if <see cref="P:Agilent.SA.Vsa.Trace.Format"/> is set to TraceFormatType.LogMagnitudeLinear. 
            In this format type, you set the YLogRatio instead of <see cref="P:Agilent.SA.Vsa.Trace.YPerDiv"/> to determine Y scaling. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.YPerDiv">
            <summary>Gets or sets the spacing between y-axis divisions. </summary>
            <remarks>
            The Y axis always contains 10 divisions. Therefore, the trace height is 10 * <see cref="P:Agilent.SA.Vsa.Trace.YPerDiv"/>.
            If the <see cref="P:Agilent.SA.Vsa.Trace.Format"/> is set to TraceFormatType.LogMagnitudeLinear, then <see cref="P:Agilent.SA.Vsa.Trace.YPerDiv"/> is ignored 
            and <see cref="P:Agilent.SA.Vsa.Trace.YLogRatio"/> is used to determine the trace height. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.YPerDivUnit">
            <summary>Gets the y-axis per division unit string.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.YUnit">
            <summary>Gets or sets the y unit type (Power, Peak, RMS).</summary>
            <remarks>
            Determine what units to display the amplitude of the data. 
            You can select Peak, RMS, Power units, or an automatic selection. 
            The automatic selection is to show Power units for frequency domain data and 
            Peak units for time domain data. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.YRefLevel">
            <summary>Gets or sets the y-axis value of the reference line.</summary>
            <remarks>
            Together, the <see cref="P:Agilent.SA.Vsa.Trace.YRefLevel"/>, <see cref="P:Agilent.SA.Vsa.Trace.YRefPosition"/>, and <see cref="P:Agilent.SA.Vsa.Trace.YPerDiv"/> can be used 
            to determine the trace height. The <see cref="M:Agilent.SA.Vsa.Trace.YScaleAuto"/> method sets the YRefLevel and <see cref="P:Agilent.SA.Vsa.Trace.YPerDiv"/> to 
            values which maintain round numbers for the top of the trace and a <see cref="P:Agilent.SA.Vsa.Trace.YPerDiv"/>, and maximizes the 
            height of the data on the trace.
            The <see cref="P:Agilent.SA.Vsa.Trace.IsYRefVisible"/> property determines whether a line is drawn on the trace showing 
            the reference level.
            The <see cref="P:Agilent.SA.Vsa.Trace.YAxisUnit"/> property returns the units of the Y axis. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.IsYRefTrackRange">
            <summary>Gets or sets a value indicating whether the reference level tracks changes in the input range.</summary>
            <remarks>
            This property is not used if the trace <see cref="P:Agilent.SA.Vsa.Trace.Format"/> is any phase format or group delay, 
            the data is recalled, the data does not represent a Voltage amplitude, or the 
            trace's data is from a I+jQ combined channel. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.YRefPosition">
            <summary>Gets or sets the position of the reference line.</summary>
            <remarks>
            Determine the position of the reference line on the Y axis, where 
            100 is the top of the trace, 50 is the center of the trace, and 0 is 
            the bottom of the trace. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.IsYRefVisible">
            <summary>Gets or sets a value indicating whether the y-axis reference line is visible. </summary>
            <remarks>
            The <see cref="P:Agilent.SA.Vsa.Trace.YRefPosition"/> property determines the position of the reference line on the display.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.IsTriggerRefLineVisible">
            <summary>
            Gets or sets a value indicating whether a trigger reference line is drawn on time traces for the current 
            trigger channel (level and magnitude triggers only). 
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.VectorXCenter">
            <summary>Gets or sets the X center scaling value for the vector trace formats.</summary>
            <remarks>
            A vector trace <see cref="P:Agilent.SA.Vsa.Trace.Format"/> is either I-Q or constellation. 
            When you are in one of these formats, you set the Y scaling with the 
            <see cref="P:Agilent.SA.Vsa.Trace.YRefLevel"/>, <see cref="P:Agilent.SA.Vsa.Trace.YRefPosition"/>, and <see cref="P:Agilent.SA.Vsa.Trace.YPerDiv"/> properties. 
            The width of the X axis is determined by the Y axis scaling and the aspect ratio 
            of the trace. 
            This property is used to set the center of the X axis when you are 
            displaying data in one of these vector formats. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.XLeft">
            <summary>Gets or sets the left side of the x-axis scale.</summary>
            <remarks>
            <para>
            Determine the left side of the X axis. 
            Setting this property also sets the <see cref="P:Agilent.SA.Vsa.Trace.IsXScaleAuto"/> property to False. 
            If IsXScaleAuto is True, then XLeft returns the smallest X Value of the data. 
            The <see cref="P:Agilent.SA.Vsa.Trace.XRight"/> property sets the right side of the X axis.
            </para>
            <para>
            If the trace <see cref="P:Agilent.SA.Vsa.Trace.Format"/> is I-Q or constellation, then setting XLeft and XRight select how 
            much data to display, but does not affect the X axis annotation.
            </para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.XRight">
            <summary>Gets or sets the right side of the x-axis scale.</summary>
            <remarks>
            <para>
            Determine the right side of the X axis. 
            Setting this property also sets the <see cref="P:Agilent.SA.Vsa.Trace.IsXScaleAuto"/> property to False. 
            If IsXScaleAuto is True, then XRight returns the largest X Value of the data. 
            The <see cref="P:Agilent.SA.Vsa.Trace.XLeft"/> property sets the left side of the X axis.
            </para>
            <para>
            If the trace <see cref="P:Agilent.SA.Vsa.Trace.Format"/> is I-Q or constellation, then setting XLeft and XRight select how much 
            data to display, but does not affect the X axis annotation. 
            </para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.XDataUnit">
            <summary>Gets the x unit string.</summary>
            <remarks>
            Returns the units for the X values of the trace's data.
            XDataUnit is the same as <see cref="P:Agilent.SA.Vsa.Trace.XAxisUnit"/>, except when the trace <see cref="P:Agilent.SA.Vsa.Trace.Format"/> is I-Q or constellation.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.XAxisUnit">
            <summary>Gets the x-axis unit string.</summary>
            <remarks>
            Returns the units on the X axis of the trace. 
            If the trace <see cref="P:Agilent.SA.Vsa.Trace.Format"/> is I-Q or constellation, then the XAxisUnit is the same as the 
            <see cref="P:Agilent.SA.Vsa.Trace.YAxisUnit"/>. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.IsXScaleAuto">
            <summary>Gets or sets a value indicating whether the x-axis is auto-scaled to show all the data in the trace.</summary>
            <remarks>
            Determine whether the X axis automatically scales to the incoming data. 
            If IsXScaleAuto is True, then <see cref="P:Agilent.SA.Vsa.Trace.XLeft"/> and <see cref="P:Agilent.SA.Vsa.Trace.XRight"/> return the range of X Values 
            of the data. 
            Setting either XLeft or XRight sets IsXScaleAuto to False. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.IsXLog">
            <summary>Gets or sets a value indicating whether the x-axis is shown in a linear or log scale.</summary>
            <remarks>
            This property is not used if the trace <see cref="P:Agilent.SA.Vsa.Trace.Format"/> is I-Q or constellation.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.ZAxisUnit">
            <summary>Gets the z-axis unit string.</summary>
            <remarks>
            The z-axis units are associated with the <see cref="P:Agilent.SA.Vsa.Trace.ZFirst"/> and <see cref="P:Agilent.SA.Vsa.Trace.ZLast"/> properties.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.ZFirst">
            <summary>Gets the z-axis value associated with the first data point.</summary>
            <remarks>
            <para>
            The first <see cref="P:Agilent.SA.Vsa.Trace.ZPoints"/> of the data all have the same z-axis value. 
            The increment to the next z-axis value (associated with the next ZPoints of data) 
            can be computed as follows:
            </para>
            <blockquote>
            <para>
            Increment = (<see cref="P:Agilent.SA.Vsa.Trace.ZLast"/> - <see cref="P:Agilent.SA.Vsa.Trace.ZFirst"/>) / (<see cref="P:Agilent.SA.Vsa.Trace.ZPoints"/> - 1) 
            </para>
            </blockquote>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.ZLast">
            <summary>Gets the z-axis value associated with the last data point.</summary>
            <remarks>
            <para>
            The first <see cref="P:Agilent.SA.Vsa.Trace.ZPoints"/> of the data all have the same z-axis value. 
            The increment to the next z-axis value (associated with the next ZPoints of data) can be computed as follows:
            </para>
            <blockquote>
            <para>
            Increment = (<see cref="P:Agilent.SA.Vsa.Trace.ZLast"/> - <see cref="P:Agilent.SA.Vsa.Trace.ZFirst"/>) / (<see cref="P:Agilent.SA.Vsa.Trace.ZPoints"/> - 1) 
            </para>
            </blockquote>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.ZPoints">
            <summary>Gets the number of points in the z-axis.</summary>
            <remarks>
            <para>
            The first <see cref="P:Agilent.SA.Vsa.Trace.ZPoints"/> of the data all have the same z-axis value. 
            The increment to the next z-axis value (associated with the next ZPoints of data) 
            can be computed as follows:
            </para>
            <blockquote>
            <para>
            Increment = (<see cref="P:Agilent.SA.Vsa.Trace.ZLast"/> - <see cref="P:Agilent.SA.Vsa.Trace.ZFirst"/>) / (<see cref="P:Agilent.SA.Vsa.Trace.ZPoints"/> - 1) 
            </para>
            </blockquote>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.MeasurementData">
            <summary>Gets the measurement data object (contains the unformatted measurement data) for this trace.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.DemodTableFormat">
            <summary>Gets or sets the format of a digital demodulation symbol table.</summary>
            <remarks>
            Determine the numeric format to be used in the digital demod Symbol / Error table. 
            You can show the symbols in either binary or hexadecimal format. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.DemodTableBitOrder">
            <summary>Gets or sets the bit ordering for a digital demodulation symbol table.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.DemodSymbolShape">
            <summary>Gets or sets the shape of the marks at the digital demodulation symbol positions.</summary>
            <remarks>
            Determine the shape of actual symbols locations on digital demodulation time traces 
            (if trace <see cref="P:Agilent.SA.Vsa.Trace.Format"/> is not vector, constellation, or any eye diagram). 
            You can choose to not display the symbol positions, show a dot (actually a small box) on the symbol, 
            or show a vertical bar between the symbol and zero. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.XEyeLength">
            <summary>Gets or sets the digital demodulation x-axis eye length for eye diagram formats.</summary>
            <remarks>
            The eye length has a range of 0.1 to 0.9 in steps of 0.1 and 1 to 40 in steps of 1.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.DemodTimeUnit">
            <summary>Gets or sets the type of X-axis unit associated with demodulation time data.</summary>
            <remarks>
            Determine units for the time axis of displayed digital demod time traces. 
            You can display the time axis in either seconds or symbols.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.DemodFreqUnit">
            <summary>Gets or sets the type of X-axis unit associated with demod frequency (OFDM) data.</summary>
            <remarks>This includes Error Vector Spectrum and Error Vector Time trace data types.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.DemodStateShape">
            <summary>Gets or sets the shape of the digital demodulation ideal state positions.</summary>
            <remarks>
            <para>
            Determine the shape to be displayed on a trace for digital demodulation ideal state positions. 
            The shape may be turned off, be a cross, or a circle.
            </para>
            <para>
            The ideal states positions are only shown on a vector or constellation diagram. 
            If you choose a cross, the ideal state occurs at the center of the cross. 
            If you choose a circle, the ideal state occurs at the center of the circle.
            </para>
            <para>
            The ideal state is the location where symbols occur if your signal is without error. 
            Showing the ideal states gives a visual indication of the quality of your signal.
            You can also set the size of the ideal shapes with the <see cref="P:Agilent.SA.Vsa.Trace.DemodStateSize"/> property. 
            </para>
            </remarks>
            <seealso cref="P:Agilent.SA.Vsa.Trace.Format"/>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.DemodStateSize">
            <summary>Gets or sets the size of the digital demodulation ideal state positions.</summary>
            <remarks>
            <para>
            Determine the ideal state size, as a percentage of Error Vector Magnitude (EVM), 
            in vector and constellation diagrams. 
            Ideal states are shown as circles or crosses, as determined by the <see cref="P:Agilent.SA.Vsa.Trace.DemodStateShape"/> property.
            </para>
            <para>
            Range: 0.1 to 50; the value determines the radius of the ideal-state circle or ideal-state crosshair.
            </para>
            <para>
            You can use this feature to determine if symbols have an EVM above a specified value. 
            For example, to see if any symbols have an EVM greater than 10, set the state size to 10 
            and select Circle as the shape. 
            Any symbols that fall outside of the circle (other than SYNC or PILOT symbols) have an EVM greater than 10%. 
            </para>
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.DemodCodeOrder">
            <summary>Gets or sets which order is used for code bits for this trace.</summary>
            <remarks>
            Data values in a 3G Code Domain Power measurement result that are not at the base symbol rate 
            are contained in multiple points in the trace. 
            If the code order is bit reverse, then these points 
            (at the same code channel / symbol rate) will be next to each other. 
            If the code order is Hadamard, then these points will be spread out through the trace. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.IsDemod2DAverageLineVisible">
            <summary>Gets or sets a value indicating whether a 2D demodulation trace should have an overlaid average line.</summary>
            <remarks>
            This property returns True if a 2-dimensional demodulation trace (typically an OFDM Demod trace 
            that includes multiple subcarriers and multiple symbols) will have a heavy average line overlaid on it. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.DemodChipRate">
            <summary>Gets the demod chip rate for this trace.</summary>
            <remarks>
            This property returns the chip rate for the current trace, 
            if the trace is the result of W-CDMA or cdma2000 demodulation. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.IsOverlay">
            <summary>Gets or sets a value indicating whether this trace may be visually overlaid with another trace.</summary>
            <remarks>
            If this trace window is place over another trace window in a tab group, then this property determines
            whether all traces are drawn, or only the top trace.  If this property is set True, then all traces in the 
            tab group are displayed that also have IsOverlay set to True.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.IsDataValid">
            <summary>Gets a value indicating whether the data for this trace is valid.</summary>
            <remarks>Valid data must contain at least one data value and be marked as valid.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.XAxisFormat">
            <summary>Gets or sets the x-axis trace format when <see cref="P:Agilent.SA.Vsa.Trace.Format"/> is <see cref="F:Agilent.SA.Vsa.TraceFormatType.RealVsImaginary"/>.</summary>
            <remarks>
            Determines the x-axis trace format when shown as a graph. This format applies to the real part of the data. 
            </remarks>
            <version>17.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.YAxisFormat">
            <summary>Gets or sets the y-axis trace format when <see cref="P:Agilent.SA.Vsa.Trace.Format"/> is <see cref="F:Agilent.SA.Vsa.TraceFormatType.RealVsImaginary"/>.</summary>
            <remarks>
            Determines the y-axis trace format when shown as a graph. This format applies to the imaginary part of the data. 
            </remarks>
            <version>17.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.XAxisLeft">
            <summary>Gets or sets the left side of the x-axis scale when <see cref="P:Agilent.SA.Vsa.Trace.Format"/> is <see cref="F:Agilent.SA.Vsa.TraceFormatType.RealVsImaginary"/>.</summary>
            <remarks>
            Determine the left side of the X axis when shown as a graph. 
            </remarks>
            <version>17.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.XAxisRight">
            <summary>Gets or sets the right side of the x-axis scale when <see cref="P:Agilent.SA.Vsa.Trace.Format"/> is <see cref="F:Agilent.SA.Vsa.TraceFormatType.RealVsImaginary"/>.</summary>
            <remarks>
            Determine the right side of the X axis when shown as a graph. 
            </remarks>
            <version>17.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.XAxisPerDiv">
            <summary>Gets or sets the spacing between x-axis divisions when <see cref="P:Agilent.SA.Vsa.Trace.Format"/> is <see cref="F:Agilent.SA.Vsa.TraceFormatType.RealVsImaginary"/>. </summary>
            <remarks>
            The X axis always contains 10 divisions. Therefore, the trace width is 10 * <see cref="P:Agilent.SA.Vsa.Trace.XAxisPerDiv"/>.
            </remarks>
            <version>17.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.XAxisPerDivUnit">
            <summary>Gets the y-axis per division unit string.</summary>
            <version>17.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.XAxisRefLevel">
            <summary>Gets or sets the value of the x-axis reference line when <see cref="P:Agilent.SA.Vsa.Trace.Format"/> is <see cref="F:Agilent.SA.Vsa.TraceFormatType.RealVsImaginary"/>.</summary>
            <remarks>
            Together, the <see cref="P:Agilent.SA.Vsa.Trace.XAxisRefLevel"/>, <see cref="P:Agilent.SA.Vsa.Trace.XAxisRefPosition"/>, and <see cref="P:Agilent.SA.Vsa.Trace.XAxisPerDiv"/> can be used 
            to determine the trace width. The <see cref="M:Agilent.SA.Vsa.Trace.XAxisScaleAuto"/> method sets the XAxisRefLevel and <see cref="P:Agilent.SA.Vsa.Trace.XAxisPerDiv"/> to 
            values which maintain round numbers for the right side of the trace and a <see cref="P:Agilent.SA.Vsa.Trace.XAxisPerDiv"/>, and maximizes the 
            width of the data on the trace.
            The <see cref="P:Agilent.SA.Vsa.Trace.XAxisUnit"/> property returns the units of the X axis. 
            </remarks>
            <version>17.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.XAxisRefPosition">
            <summary>Gets or sets the position of the x-axis reference line when <see cref="P:Agilent.SA.Vsa.Trace.Format"/> is <see cref="F:Agilent.SA.Vsa.TraceFormatType.RealVsImaginary"/>.</summary>
            <remarks>
            Determine the position of the x-axis reference line on the X axis, where 
            100 is the right side of the trace, 50 is the center of the trace, and 0 is 
            the left side of the trace. 
            </remarks>
            <version>17.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.XUnit">
            <summary>Gets or sets the x unit type (Power, Peak, RMS) when <see cref="P:Agilent.SA.Vsa.Trace.Format"/> is <see cref="F:Agilent.SA.Vsa.TraceFormatType.RealVsImaginary"/>.</summary>
            <remarks>
            Determine what units to display the amplitude of the data. 
            You can select Peak, RMS, Power units, or an automatic selection. 
            The automatic selection is to show Power units for frequency domain data and 
            Peak units for time domain data. 
            </remarks>
            <version>17.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.Graph">
            <summary>Gets the graph object for this trace.</summary>
            <version>17.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.IsCoupled">
            <summary>
            Gets or sets a value indicating whether this trace is coupled with other overlaid traces.
            </summary>
            <remarks>
            <para>
            For a trace that is placed into the same tab group and <see cref="P:Agilent.SA.Vsa.Trace.IsOverlay">overlaid</see>,
            the VSA can be configured to change this trace's parameters to follow other overlaid traces' parameters.
            </para>
            <para>
            The following parameters can be coupled:
            </para>
            <list type="bullet">
            <item><see cref="P:Agilent.SA.Vsa.Trace.IsYAxisCoupled">Y-axis parameters</see></item>
            <item><see cref="P:Agilent.SA.Vsa.Trace.IsXAxisCoupled">X-axis parameters</see></item>
            <item><see cref="P:Agilent.SA.Vsa.Trace.IsTraceFormatCoupled">Trace format</see></item>
            </list>
            </remarks>
            <version>18.5</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.IsYAxisCoupled">
            <summary>
            Gets or sets a value indicating whether this trace's y-axis is coupled with other overlaid traces.
            </summary>
            <remarks>
            <para>
            For traces which are overlaid and IsYAxisCoupled = true, changing the trace parameters on one of the traces
            will cause the other traces' y-axis parameters to match the trace that was changed: 
            <see cref="P:Agilent.SA.Vsa.Trace.YPerDiv"/>, <see cref="P:Agilent.SA.Vsa.Trace.YTop">YTop</see>, <see cref="P:Agilent.SA.Vsa.Trace.YBottom">YBottom</see>, and <see cref="P:Agilent.SA.Vsa.Trace.VectorXCenter">VectorXCenter</see>.
            </para>
            <para>Note: coupling is only performed on traces whose y-axis is compatible with the y-axis of the trace that changed (units are the same, both time domain, etc.).</para>
            </remarks>
            <version>18.5</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.IsXAxisCoupled">
            <summary>
            Gets or sets a value indicating whether this trace's x-axis is coupled with other overlaid traces.
            </summary>
            <remarks>
            <para>
            For traces which are overlaid and IsXAxisCoupled = true, changing the trace parameters on one of the traces
            will cause the other traces' x-axis parameters to match the trace that was changed:
            </para>
            <list type="bullet">
            <item>
            Trace <see cref="P:Agilent.SA.Vsa.Trace.Format">Format</see> = <see cref="F:Agilent.SA.Vsa.TraceFormatType.RealVsImaginary">RealVsImaginary</see>: 
            <see cref="P:Agilent.SA.Vsa.Trace.XAxisPerDiv"/>, <see cref="P:Agilent.SA.Vsa.Trace.XAxisLeft">XAxisLeft</see>, and <see cref="P:Agilent.SA.Vsa.Trace.XAxisRight">XAxisRight</see> 
            </item>
            <item>
            Other Trace Formats: <see cref="P:Agilent.SA.Vsa.Trace.XLeft">XLeft</see>, <see cref="P:Agilent.SA.Vsa.Trace.XRight">XRight</see>, and <see cref="M:Agilent.SA.Vsa.Trace.XAxisScaleAuto">XAxisScaleAuto()</see> (Full Scale).
            </item>
            </list>
            <para>Note: coupling is only performed on traces whose x-axis is compatible with the x-axis of the trace that changed (units are the same, etc.).</para>
            </remarks>
            <version>18.5</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.IsTraceFormatCoupled">
            <summary>
            Gets or sets a value indicating whether this trace's <see cref="P:Agilent.SA.Vsa.Trace.Format"/> is coupled with other overlaid traces.
            </summary>
            <remarks>
            <para>For traces which are overlaid and IsTraceFormatCoupled = true, changing the trace 
            <see cref="P:Agilent.SA.Vsa.Trace.Format">Format</see> of one of the traces will cause the other traces' format to change.
            </para>
            <para>The <see cref="P:Agilent.SA.Vsa.Trace.IsXLog"/> setting is also coupled.</para>
            <para>
            Note: coupling is only performed on traces whose trace format match the format of the trace that changed.
            </para>
            </remarks>
            <version>18.5</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.Update">
            <summary>Gets or sets the trace update.</summary>
            <remarks>
            Determines the trace update. When trace data is updated, it is a combination of the old trace data
            and the new (updated) trace data. 
            </remarks>
            <version>18.50</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.UpdateCount">
            <summary>Gets or sets the trace update count.</summary>
            <remarks>
            Determines the Count associated with Update. 
            </remarks>
            <version>18.50</version>
        </member>
        <member name="P:Agilent.SA.Vsa.Trace.IsUpdatePause">
            <summary>Gets or sets a value indicating whether the measurement is paused when the trace reaches the update count.</summary>
            <remarks>
            This setting is only used if <see cref="P:Agilent.SA.Vsa.Trace.Update"/> is not TraceUpdateType.ClearWrite.  
            </remarks>
            <version>18.50</version>
        </member>
        <member name="T:Agilent.SA.Vsa.ArrangeWindowHints">
            <summary>Layout hints to <see cref="M:Agilent.SA.Vsa.TraceCollection.ArrangeWindows(Agilent.SA.Vsa.ArrangeWindowHints)">ArrangeWindows</see>.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ArrangeWindowHints.None">
            <summary>No hint.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ArrangeWindowHints.ShowHidden">
            <summary>Show hidden (non-visible) trace windows.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ArrangeWindowHints.HorizontalOrientation">
            <summary>Arrange windows in columns first (instead of rows).</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ArrangeWindowHints.FillAll">
            <summary>Fill all windows in the layout, even if new traces need to be created.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ArrangeWindowHints.HideExtra">
            <summary>Hide all other traces  not needed by this layout.</summary>
        </member>
        <member name="F:Agilent.SA.Vsa.ArrangeWindowHints.WindowPerMeasurement">
            <summary>Create a separate trace window for each measurement's traces.</summary>
            <version>15.00</version>
        </member>
        <member name="T:Agilent.SA.Vsa.TraceCollection">
            <summary>The TraceCollection class contains a collection of <see cref="T:Agilent.SA.Vsa.Trace"/> objects. </summary>
            <remarks>
            <para>
            In addition, you can set global trace properties from this object, such as which parts of the trace are 
            visible and the extent of the data that is shown. 
            The <see cref="M:Agilent.SA.Vsa.TraceCollection.ArrangeWindows(Agilent.SA.Vsa.ArrangeWindowHints)">ArrangeWindows</see> method selects where and the number of trace windows that are shown on the display. 
            </para>
            <para>
            The collection contains a minimum of 2 Trace objects. 
            </para>
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.TraceCollection.Create">
            <summary>Create a new trace and add it to the end of the Trace collection.</summary>
            <returns>The new Trace.</returns>
            <remarks>The new trace is not initially Visible (<see cref="P:Agilent.SA.Vsa.Trace.IsVisible"/>).</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.TraceCollection.Create(System.Int32)">
            <summary>Create new traces and add them to the end of the Trace collection.</summary>
            <param name="count">The number of traces to create.</param>
            <returns>The new Traces.</returns>
            <remarks>The new traces are not initially Visible (<see cref="P:Agilent.SA.Vsa.Trace.IsVisible"/>).</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.TraceCollection.Create(System.String[])">
            <summary>Create new traces and add them to the end of the Trace collection.</summary>
            <param name="dataNames">The initial contents (<see cref="P:Agilent.SA.Vsa.Trace.DataName"/>) of the new traces.</param>
            <returns>The new Traces.</returns>
            <remarks>The new traces are not initially Visible (<see cref="P:Agilent.SA.Vsa.Trace.IsVisible"/>).</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.TraceCollection.Create(System.String)">
            <summary>Create a new trace and add it to the end of the Trace collection.</summary>
            <param name="dataName">The initial contents (<see cref="P:Agilent.SA.Vsa.Trace.DataName"/>) of the new trace.</param>
            <returns>The new Trace.</returns>
            <remarks>The new trace is not initially Visible (<see cref="P:Agilent.SA.Vsa.Trace.IsVisible"/>).</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.TraceCollection.Create(System.String,System.Boolean,System.Boolean)">
            <summary>Create a new Trace or return a existing Trace.</summary>
            <param name="dataName">The initial contents (<see cref="P:Agilent.SA.Vsa.Trace.DataName"/>) of the trace.</param>
            <param name="useFirstNotVisible">Use the first not visible (<see cref="P:Agilent.SA.Vsa.Trace.IsVisible"/>) trace, if one is available.</param>
            <param name="makeVisible">Set  <see cref="P:Agilent.SA.Vsa.Trace.IsVisible"/>) for the trace.</param>
            <returns>The trace.</returns>
            <remarks>If useFirstNotVisible is True, then the first non-visible trace is returned.
            If there are not any available traces, then a new trace is created and added to the end of the Trace collection.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.TraceCollection.RemoveLast">
            <summary>Remove the last trace from the trace collection.</summary>
            <remarks>The first 2 traces in the collection cannot be removed.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.TraceCollection.RemoveLast(System.Int32)">
            <summary>Remove the last trace from the trace collection.</summary>
            <param name="count">The number of traces to remove.</param>
            <remarks>The first 2 traces in the collection cannot be removed.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.TraceCollection.DataNamesMeasurement(System.Int32)">
            <summary>Gets the list of all measurement <see cref="P:Agilent.SA.Vsa.Trace.DataName">DataNames</see> for the specified measurement.</summary>
            <param name="measurementIndex">The index of the measurement.</param>
            <returns>An array of all the measurement data names.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.TraceCollection.DefaultDataNamesMeasurement(System.Int32)">
            <summary>Gets the list of all default measurement <see cref="P:Agilent.SA.Vsa.Trace.DataName">DataNames</see> for the specified measurement.</summary>
            <param name="measurementIndex">The index of the measurement.</param>
            <returns>The default data names for the measurement.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.TraceCollection.CopyMarkersToClipboard">
            <summary>Copy the text in the marker window to the clipboard.</summary>
        </member>
        <member name="M:Agilent.SA.Vsa.TraceCollection.ArrangeWindows(Agilent.SA.Vsa.ArrangeWindowHints)">
            <summary>Arranges the trace windows on the display.</summary>
            <param name="hints">Hints on which traces to use and how to lay out the traces.</param>
            <remarks>
            This method will arrange the traces in roughly the same number of rows and columns with tabs that are the same size in each
            column and each row.
            <para/>
            If there are fewer than 4 trace windows to arrange, they are placed in in a single column.
            <para/>
            If there are multiple trace windows open, this method will apply to the window that contains
            <see cref="P:Agilent.SA.Vsa.TraceCollection.SelectedItem"/>.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.TraceCollection.ArrangeWindows(Agilent.SA.Vsa.ArrangeWindowHints,System.Int32,System.Int32)">
            <summary>Arranges the trace windows on the display.</summary>
            <param name="hints">Hints on which traces to use and how to lay out the traces.</param>
            <param name="rows">Number of trace window rows.</param>
            <param name="columns">Number of trace window columns.</param>
            <remarks>
            This method will arrange the traces in tabs that are the same size in each column and each row.
            <para/>
            If there are multiple trace windows open, this method will apply to the window that contains
            <see cref="P:Agilent.SA.Vsa.TraceCollection.SelectedItem"/>.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.TraceCollection.ArrangeWindows(Agilent.SA.Vsa.ArrangeWindowHints,System.Collections.Generic.IEnumerable{Agilent.SA.Vsa.Measurement})">
            <summary>
            Arranges the trace windows on the display.
            </summary>
            <param name="hints">Hints on which traces to use and how to lay out the traces.</param>
            <param name="measurements">A list of <see cref="T:Agilent.SA.Vsa.Measurement"/> instances for which the traces
            will be arranged.</param>
            <remarks>
            This method will arrange the traces in roughly the same number of rows and columns with tabs that are the same size in each
            column and each row.
            <para/>
            This overload is meant to be used with the <see cref="F:Agilent.SA.Vsa.ArrangeWindowHints.WindowPerMeasurement"/> flag. For the
            trace window that contains <see cref="P:Agilent.SA.Vsa.TraceCollection.SelectedItem"/>, it will create a new trace window to contain the traces
            for each of the measurements listed in the <paramref name="measurements"/> parameter. It will then move the
            traces for each measurement to their respective windows and then arrange the traces within those windows.
            <para/>
            If <paramref name="measurements"/> is null or empty, all existing measurements are assumed.
            <para/>
            If there are fewer than 4 trace windows to arrange, they are placed in in a single column.
            <para/>
            If there are multiple trace windows open, this method will apply to the window that contains
            <see cref="P:Agilent.SA.Vsa.TraceCollection.SelectedItem"/>.
            </remarks>
            <version>15.00</version>
        </member>
        <member name="M:Agilent.SA.Vsa.TraceCollection.ArrangeWindows(Agilent.SA.Vsa.ArrangeWindowHints,System.Int32,System.Int32,System.Collections.Generic.IEnumerable{Agilent.SA.Vsa.Measurement})">
            <summary>
            Arranges the trace windows on the display.
            </summary>
            <param name="hints">Hints on which traces to use and how to lay out the traces.</param>
            <param name="rows">Number of trace window rows.</param>
            <param name="columns">Number of trace window columns.</param>
            <param name="measurements">A list of <see cref="T:Agilent.SA.Vsa.Measurement"/> instances for which the traces
            will be arranged.</param>
            <remarks>
            This method will arrange the traces in tabs that are the same size in each column and each row.
            <para/>
            This overload is meant to be used with the <see cref="F:Agilent.SA.Vsa.ArrangeWindowHints.WindowPerMeasurement"/> flag. For the
            trace window that contains <see cref="P:Agilent.SA.Vsa.TraceCollection.SelectedItem"/>, it will create a new trace window to contain the traces
            for each of the measurements listed in the <paramref name="measurements"/> parameter. It will then move the
            traces for each measurement to their respective windows and then arrange the traces within those windows.
            <para/>
            If <paramref name="measurements"/> is null or empty, all existing measurements are assumed.
            <para/>
            If there are fewer than 4 trace windows to arrange, they are placed in in a single column.
            <para/>
            If there are multiple trace windows open, this method will apply to the window that contains
            <see cref="P:Agilent.SA.Vsa.TraceCollection.SelectedItem"/>.
            </remarks>
            <version>15.00</version>
        </member>
        <member name="M:Agilent.SA.Vsa.TraceCollection.SizeWindows">
            <summary>Resize the trace windows so they are the same size</summary>
            <remarks>This method only affects trace windows in the document area.</remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.TraceCollection.RemoveExtra">
            <summary>
            Remove traces from the end of the collection that have "No Data" and are hidden.
            </summary>
            <remarks>
            There will always be at least <see cref="P:Agilent.SA.Vsa.TraceCollection.MinTraceCount"/> traces in the collection
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.TraceCollection.FirstNotVisible">
            <summary>Gets the first trace with <see cref="P:Agilent.SA.Vsa.Trace.IsVisible"/> equal to False.</summary>
            <remarks>Return null if all traces are visible.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.TraceCollection.DataNameNoData">
            <summary>Gets the 'No Data' <see cref="P:Agilent.SA.Vsa.Trace.DataName">DataName</see>.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.TraceCollection.DataNames">
            <summary>Gets the list of all available <see cref="P:Agilent.SA.Vsa.Trace.DataName">DataNames</see>.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.TraceCollection.DataNamesMarker">
            <summary>Gets the list of all marker <see cref="P:Agilent.SA.Vsa.Trace.DataName">DataNames</see>.</summary>
            <remarks>This list includes ACP and OBW summary traces.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.TraceCollection.DataNamesMath">
            <summary>Gets the list of all math <see cref="P:Agilent.SA.Vsa.Trace.DataName">DataNames</see>.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.TraceCollection.DataNamesMeasurements">
            <summary>Gets the list of all measurement <see cref="P:Agilent.SA.Vsa.Trace.DataName">DataNames</see> for all measurements.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.TraceCollection.DataNamesDataRegister">
            <summary>Gets the list of all data register <see cref="P:Agilent.SA.Vsa.Trace.DataName">DataNames</see>.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.TraceCollection.IsTestEnable">
            <summary>
            Gets a value indicating whether a LimitTest is enabled on any trace.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.TraceCollection.IsAnyLimitTestEnabled">
            <summary>Gets a value indicating whether a LimitTest is enabled on any trace.</summary>
            <version>15.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.TraceCollection.MinTraceCount">
            <summary>Gets or sets the minimum number of traces in the collection.</summary>
            <remarks>
            The RemoveLast method will not remove a trace if it causes the Count to be less than MinTraceCount.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.TraceCollection.IsXCenterSpan">
            <summary>Gets or sets a value indicating whether all traces show X frequency annotation as center/span rather than start/stop.</summary>
            <remarks>
            Returns whether all the traces have an X axis that displays the center and span frequencies, or the start and stop frequencies. 
            This setting has no effect on a trace if it does not contain frequency domain data, is shown in I-Q or 
            constellation format, or the X axis is scaled (<see cref="P:Agilent.SA.Vsa.Trace.IsXScaleAuto"/> is set to False). 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.TraceCollection.IsAllPoints">
            <summary>Gets or sets a value indicating whether non-alias protected spectrum points are shown. </summary>
            <remarks>
            Determine whether all frequency points of all traces are shown. Normally, in VsaVector, only the alias protected points 
            in frequency domain data are shown. Setting the property to True causes even the non-alias protect points to be shown. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.TraceCollection.IsAnnotation">
            <summary>Gets or sets a value indicating whether the text around the traces is visible. </summary>
            <remarks>
            The IsAnnotation property applies to the entire TraceCollection, and sets or returns the Visibility 
            of all text surrounding the trace grid. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.TraceCollection.IsGrid">
            <summary>Gets or sets a value indicating whether the grid (graticule) of the traces are visible.</summary>
            <remarks>Determine whether the grid lines on all traces are Visible.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.TraceCollection.SelectedIndex">
            <summary>Gets or sets the 0-based index of the selected <see cref="T:Agilent.SA.Vsa.Trace"/>.</summary>
            <remarks>
            The selected trace has the keyboard focus. Returns -1 if no trace is selected.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.TraceCollection.SelectedItem">
            <summary>Gets or sets the selected <see cref="T:Agilent.SA.Vsa.Trace"/>.</summary>
            <remarks>
            The selected trace has the keyboard focus. Returns null if no trace is selected.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.TraceCollection.Item(System.String)">
            <summary>Gets a list of the traces containing the specified <see cref="P:Agilent.SA.Vsa.Trace.DataName">DataName</see></summary>
            <param name="dataName">the specified DataName</param>
            <returns>A list of <see cref="T:Agilent.SA.Vsa.Trace"/> objects matching the specified DataName</returns>
            <remarks>Returns null if no traces contain the specified DataName.</remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.TraceCollection.IsAutoRemoveExtra">
            <summary>Gets or sets a value indicating whether arranging windows from the GUI will also <see cref="M:Agilent.SA.Vsa.TraceCollection.RemoveExtra"/>.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.TraceCollection.IsArrangeWindowsAfterMeasurementPreset">
            <summary>Gets or sets a value indicating whether to ArrangeWindows after <see cref="M:Agilent.SA.Vsa.Measurement.Preset"/>"/&gt;.</summary>
        </member>
        <member name="P:Agilent.SA.Vsa.TraceCollection.IsPresetTracesForNewChannelConfig">
            <summary>
            Gets or sets a value indicating whether to preset traces after changing channel configuration.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.TraceCollection.IsCreateWindowPerMeasurement">
             <summary>
            Gets or sets a value indicating whether presetting traces causes a new trace window to be created for each
             measurement.
             </summary>
             <version>15.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.TraceCollection.DataNamesGraph">
            <summary>Gets the list of all graph <see cref="P:Agilent.SA.Vsa.Trace.DataName">DataNames</see>.</summary>
            <version>17.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.TraceCollection.DefaultGraphResponseDataName">
            <summary>
            Gets a value which is <see cref="P:Agilent.SA.Vsa.Graph.ResponseDataName"/> when <see cref="P:Agilent.SA.Vsa.Graph.IsDataNamesAuto"/> is true.
            </summary>
            <version>17.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.TraceCollection.DefaultGraphStimulusDataName">
            <summary>
            Gets a value which is <see cref="P:Agilent.SA.Vsa.Graph.StimulusDataName"/> when <see cref="P:Agilent.SA.Vsa.Graph.IsDataNamesAuto"/> is true.
            </summary>
            <version>17.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.TraceCollection.ValidGraphDataNames">
            <summary>Gets the list of all <see cref="P:Agilent.SA.Vsa.Trace.DataName">DataNames</see> that are valid to use as input to a Graph.</summary>
            <returns>The valid data names for a Graph.</returns>
            <remarks>
            These DataNames can be used for the <see cref="P:Agilent.SA.Vsa.Graph.StimulusDataName"/> and <see cref="P:Agilent.SA.Vsa.Graph.ResponseDataName"/> properties. 
            </remarks>
            <version>17.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.TraceCollection.IsXCenterSpanPowerSpectrum">
            <summary>Gets or sets a value indicating whether all PowerSpectrum traces show X frequency annotation as center/span rather than start/stop.</summary>
            <remarks>
            Returns whether all the PowerSpectrum traces have an X axis that displays the center and span frequencies, or the start and stop frequencies. 
            This setting has no effect on a trace if it does not contain PowerSpectrum frequency domain data, is shown in I-Q or 
            constellation format, or the X axis is scaled (<see cref="P:Agilent.SA.Vsa.Trace.IsXScaleAuto"/> is set to False). 
            </remarks>
            <version>18.50</version>
        </member>
        <member name="P:Agilent.SA.Vsa.TraceCollection.IsStepLinesPowerSpectrum">
            <summary>Gets or sets a value indicating whether Power Spectrum traces are drawn with stepped lines.</summary>
            <remarks>
            Turning this on draws Power Spectrums traces with stepped (horizontal and vertical) connecting lines which visually emphasizes
            (fills in) the noise floor of the data and reduces visual aliasing.
            </remarks>
            <version>18.50</version>
        </member>
        <member name="T:Agilent.SA.Vsa.UserInputAcquisitionStatus">
            <summary>
            Acquisition status flags to support <see cref="P:Agilent.SA.Vsa.UserInputData.AcquisitionStatus"/>. 
            </summary>
            <remarks>
            Acquisition status flags indicate the status of sending data into <see cref="T:Agilent.SA.Vsa.UserInputData"/>.
            </remarks>
        </member>
        <member name="F:Agilent.SA.Vsa.UserInputAcquisitionStatus.None">
            <summary>
            No acquisition data source status information.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.UserInputAcquisitionStatus.Idle">
            <summary>
            Acquisition data source is idle.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.UserInputAcquisitionStatus.WaitingForTrigger">
            <summary>
            Acquisition data source is waiting for a trigger event to occur.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.UserInputAcquisitionStatus.AcquiringData">
            <summary>
            Acquisition data source is acquiring data.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.UserInputAcquisitionStatus.TransferringData">
            <summary>
            Acquisition data source is transferring data to UserInputData.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.UserInput">
            <summary>
            Provides interface for a data source application to send data into analyzer. 
            </summary>
            <remarks>
            This interface is intended to support data source applications to provide data to the vector signal analyzer, but which are not actively controlled by the vector signal analyzer.
            Direct access to this interface requires a license for option 101.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInput.UserInputChange">
            <summary> 
            Gets a <see cref="T:Agilent.SA.Vsa.UserInputChangeRegister"/> interface for the data source application to receive change notification events.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInput.ChannelCount">
            <summary>
            Gets or sets the number of channels provided by the data source application in <see cref="T:Agilent.SA.Vsa.UserInput"/>.
            </summary>
            <remarks>
            This property determines the size of <see cref="T:Agilent.SA.Vsa.UserInputSetupChannelCollection"/> and <see cref="T:Agilent.SA.Vsa.UserInputDataChannelCollection"/> collections.
            Changes to this property will cause any attached measurement to be preset to a default state.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Indicates <paramref name="value"/> is 0 or greater than <see cref="P:Agilent.SA.Vsa.UserInput.ChannelCountMaximum"/>.  
            The channel count is limited to the closest valid value prior to throw of the exception.</exception>
            <seealso cref="T:Agilent.SA.Vsa.UserInputSetupChannelCollection"/>
            <seealso cref="T:Agilent.SA.Vsa.UserInputDataChannelCollection"/>
            <seealso cref="P:Agilent.SA.Vsa.UserInput.ChannelCountMaximum"/>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInput.ChannelCountMaximum">
            <summary>
            Gets the maximum number of channels supported by <see cref="T:Agilent.SA.Vsa.UserInput"/>.
            </summary>
            <remarks>
            This property provides the largest value which can be set in <see cref="P:Agilent.SA.Vsa.UserInput.ChannelCount"/> without throwing an exception.
            </remarks>
            <version>15.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInput.Setup">
            <summary>
            Gets the <see cref="T:Agilent.SA.Vsa.UserInputSetup"/> interface for defining properties of the data source application.
            </summary>
            <seealso cref="P:Agilent.SA.Vsa.UserInput.ChannelCount"/>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInput.Data">
            <summary>
            Gets the <see cref="T:Agilent.SA.Vsa.UserInputData"/> interface for processing data transfers with the data source application.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInput.Enabled">
            <summary>
            Gets a value indicating whether the <see cref="T:Agilent.SA.Vsa.UserInput"/> API is licensed and available for use by a data source application.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInput.ProcessId">
            <summary>
            Gets or sets the process ID to be set by a data source application.
            </summary>
            <remarks>
            ProcessId must be set to enable the <see cref="T:Agilent.SA.Vsa.UserInput"/> API in some licensing scenarios.
            </remarks>
        </member>
        <member name="T:Agilent.SA.Vsa.UserInputData">
            <summary>
            Contains properties and methods for processing data transfers from a data source application.
            </summary>
            <remarks>
            Properties set by the data source application reflect changes in the data sent to the vector signal analyzer.
            Property values retrieved by the data source application reflect expectations about the data to be processed by the vector signal analyzer.  These expectations depend on the current measurement configuration, and will change as the measurement configuration changes.
            Changes to read-only properties on this interface may be detected through <see cref="T:Agilent.SA.Vsa.UserInputChangeRegister"/>.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.UserInputData.ClearData">
            <summary>
            Clears unprocessed data.
            </summary>
            <remarks>
            Flushes data from the internal first-in-first-out (FIFO) buffers for all channels and notifies the data consuming <see cref="T:Agilent.SA.Vsa.Measurement"/> of a gap in the data. This also clears
            <see cref="P:Agilent.SA.Vsa.UserInputData.IsOverloaded"/>.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.UserInputData.SendData(System.Collections.Generic.IEnumerable{System.Single[]},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Send data to be processed.
            </summary>
            <param name="dataSamples">Time series data blocks (one block per specified channel, as element in array) to be consumed by attached <see cref="T:Agilent.SA.Vsa.Measurement"/>.  If <see cref="P:Agilent.SA.Vsa.UserInputSetup.IsComplexData"/> is true, complex data is expected, and presented in this parameter as alternating real and imaginary values.</param>
            <param name="channelIndexes">Channel indices corresponding to blocks of data in dataSamples array.</param>
            <remarks>
            Send data for multiple channels into first-in-first-out (FIFO) buffers to be consumed by attached <see cref="T:Agilent.SA.Vsa.Measurement"/>.
            Data can be sent for a single channel using <see cref="M:Agilent.SA.Vsa.UserInputDataChannel.SendData(System.Single[])"/>.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.UserInputData.SendData(System.Collections.Generic.IEnumerable{System.Single[]})">
            <summary>
            Send data to be processed.
            </summary>
            <param name="dataSamples">Time series data blocks (one block of data for each channel specified by <see cref="P:Agilent.SA.Vsa.UserInput.ChannelCount"/>, as element in an array) to be consumed by attached <see cref="T:Agilent.SA.Vsa.Measurement"/>.  If <see cref="P:Agilent.SA.Vsa.UserInputSetup.IsComplexData"/> is true, complex data is expected, and presented in this parameter as alternating real and imaginary values.</param>
            <remarks>
            Send data for multiple channels into first-in-first-out (FIFO) buffers to be consumed by attached <see cref="T:Agilent.SA.Vsa.Measurement"/>.
            Data can be sent for a single channel using <see cref="M:Agilent.SA.Vsa.UserInputDataChannel.SendData(System.Single[])"/>.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputData.IsContinuous">
            <summary>
            Gets a value indicating whether the data consuming <see cref="T:Agilent.SA.Vsa.Measurement"/> is operating in continuous (overlapped) mode.
            </summary>
            <remarks>
            True if the data consuming <see cref="T:Agilent.SA.Vsa.Measurement"/> is operating in continuous (overlapped) mode. False if the data consuming <see cref="T:Agilent.SA.Vsa.Measurement"/> is operating in block
            mode. If <see cref="P:Agilent.SA.Vsa.UserInputSetup.IsContinuousCapable"/> has been set false, this will return false. This will also return false if
            <see cref="P:Agilent.SA.Vsa.UserInputData.IsTriggered"/> is True (The triggered mode is always block mode.).
            Changes to this read-only property may be detected through <see cref="T:Agilent.SA.Vsa.UserInputChangeRegister"/>.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputData.IsMeasurementEnabled">
            <summary>
            Gets or sets a value indicating whether the attached measurement is enabled.
            </summary>
            <remarks>
            This is a mechanism for a data source application to hold off measurement processing. Default is true.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputData.IsOverloaded">
            <summary>
            Gets or sets a value indicating whether a range overload has occurred.
            </summary>
            <remarks>
            This should be set true if a range overload occurred on the channel in the data that will be sent via <see cref="M:Agilent.SA.Vsa.UserInputData.SendData(System.Collections.Generic.IEnumerable{System.Single[]})"/>.
            This value is read and cleared each time data is consumed from the internal FIFO. This value is persistent and cannot be cleared via this property.
            This sets properties for all channels, and gets the property value of the first channel.  Use <see cref="P:Agilent.SA.Vsa.UserInputData.Channels"/> to get or set properties of individual channels.
            Changes to this read-only property may be detected through <see cref="T:Agilent.SA.Vsa.UserInputChangeRegister"/>.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputData.IsTriggered">
            <summary>
            Gets a value indicating whether the data consuming <see cref="T:Agilent.SA.Vsa.Measurement"/> is operating in triggered mode.
            </summary>
            <remarks>
            If <see cref="P:Agilent.SA.Vsa.UserInputSetup.IsTriggeredCapable"/> is set false, this will always return false.
            Changes to this read-only property may be detected through <see cref="T:Agilent.SA.Vsa.UserInputChangeRegister"/>.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputData.AcquisitionStatus">
            <summary>
            Gets or sets the acquisition status feedback from the data source application.
            </summary>
            <remarks>
            This sets properties for all channels, and gets the property value of the first channel.  Use <see cref="P:Agilent.SA.Vsa.UserInputData.Channels"/> to get or set properties of individual channels.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputData.RequestedBlockSize">
            <summary>
            Gets the amount of data requested to complete a single measurement update.
            </summary>
            <remarks>
            Returns the number of floats (2x samples if <see cref="P:Agilent.SA.Vsa.UserInputSetup.IsComplexData"/> is true) the data consuming <see cref="T:Agilent.SA.Vsa.Measurement"/> expects to need to perform a measurement
            update.
            When <see cref="P:Agilent.SA.Vsa.UserInputSetup.IsContinuousCapable"/> is true, this is the number of incremental samples needed for a new
            measurement update and is smaller than the full measurement block size if overlap is &gt; 0%. Settling
            samples are not included so settling points also need to be input before overlapped processing can start.
            When <see cref="P:Agilent.SA.Vsa.UserInputSetup.IsContinuousCapable"/> is false, this is the actual number of samples needed for one measurement
            update and includes settling samples.
            This does not change as data is input via the <see cref="M:Agilent.SA.Vsa.UserInputData.SendData(System.Collections.Generic.IEnumerable{System.Single[]})"/> method, but does reflect changes to other setup
            properties which affect the measurement block size for the data consuming <see cref="T:Agilent.SA.Vsa.Measurement"/>.
            This property changes earlier in the measurement change handling process than <see cref="P:Agilent.SA.Vsa.UserInputData.RequiredSamples"/>. Consequently,
            the <see cref="P:Agilent.SA.Vsa.UserInputData.RequiredSamples"/> property is the better source of the number of points required for each block of data when
            it is desired to deal with changing measurement states. One good example is the user performing a recording of the data (<see cref="M:Agilent.SA.Vsa.Measurement.Record"/>), during a running measurement.
            Changes to this read-only property may be detected through <see cref="T:Agilent.SA.Vsa.UserInputChangeRegister"/>.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputData.RequestedTriggerDelay">
            <summary>
            Gets the requested trigger delay, in seconds, relative to the first data sample. 
            </summary>
            <remarks>
            This is the trigger delay, in seconds, relative to the first data sample, that the data consuming <see cref="T:Agilent.SA.Vsa.Measurement"/> expects in a triggered
            measurement.  A negative value indicates pre-trigger data must be taken by the data source application. The data source application 
            should set up the trigger delay for its data acquisition accordingly. The actual trigger delay is passed
            back via the <see cref="P:Agilent.SA.Vsa.UserInputData.TriggerDelay"/> property.
            Changes to this read-only property may be detected through <see cref="T:Agilent.SA.Vsa.UserInputChangeRegister"/>.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputData.RequiredSamples">
            <summary>
            Gets the amount of data required to update the current measurement.
            </summary>
            <remarks>
            Returns the number of floats (2x samples if <see cref="P:Agilent.SA.Vsa.UserInputSetup.IsComplexData"/> is true) that the data consuming <see cref="T:Agilent.SA.Vsa.Measurement"/> is waiting for to perform the
            next measurement update.  The value of this property changes as data is input via the <see cref="M:Agilent.SA.Vsa.UserInputData.SendData(System.Collections.Generic.IEnumerable{System.Single[]})"/> method. A zero or negative return
            value indicates that the data consuming <see cref="T:Agilent.SA.Vsa.Measurement"/> is not waiting for data points (if negative, a surplus is implied).
            With overlapped processing, this property will increment by a value that is generally less than the
            measurement block size after a measurement update.
            This property gets the property value of the first channel.  Use <see cref="P:Agilent.SA.Vsa.UserInputData.Channels"/> to get or set properties of individual channels.
            Changes to this read-only property may be detected through <see cref="T:Agilent.SA.Vsa.UserInputChangeRegister"/>.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputData.SettlingSamples">
            <summary>
            Gets the amount of data expected to be needed for settling.
            </summary>
            <remarks>
            Returns the number of floats (2x samples if <see cref="P:Agilent.SA.Vsa.UserInputSetup.IsComplexData"/> is true) that the data consuming <see cref="T:Agilent.SA.Vsa.Measurement"/> expects to need for settling.
            This sets properties for all channels, and gets the property value of the first channel.  Use <see cref="P:Agilent.SA.Vsa.UserInputData.Channels"/> to get or set properties of individual channels.
            Generally, these points come from both the beginning and the end of the block. Effectively, these points are not
            displayed. When in continuous mode, the data consuming <see cref="T:Agilent.SA.Vsa.Measurement"/> requests a fixed number of points 
            for each possible display update, which depends on the overlap time set. No points will be displayed until 
            the number of sample specified by this property are received by the data consuming <see cref="T:Agilent.SA.Vsa.Measurement"/>. 
            There is no special request for the settling points, it is determined by the data consuming <see cref="T:Agilent.SA.Vsa.Measurement"/> 
            configuration.
            Changes to this read-only property may be detected through <see cref="T:Agilent.SA.Vsa.UserInputChangeRegister"/>.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputData.TriggerDelay">
            <summary>
            Gets or sets the trigger delay, in seconds, for data to be processed by the current measurement update.
            </summary>
            <remarks>
            This should be set to the actual trigger delay, in seconds, for each acquisition, if different from <see cref="P:Agilent.SA.Vsa.UserInputData.RequestedTriggerDelay"/>.
            This should be quite close to the value of the <see cref="P:Agilent.SA.Vsa.UserInputData.RequestedTriggerDelay"/> property. It may have a fractional part if sub-sample trigger resolution is
            implemented by the UserInput Interface user.  Internally set to <see cref="P:Agilent.SA.Vsa.UserInputData.RequestedTriggerDelay"/> every time <see cref="P:Agilent.SA.Vsa.UserInputData.RequestedTriggerDelay"/> is 
            changed, so the data source application need not set this property if it implements the exact <see cref="P:Agilent.SA.Vsa.UserInputData.RequestedTriggerDelay"/>.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputData.Channels">
            <summary>
            Gets the interface for channelized (on a per input channel basis) properties and methods for processing data transfers from a data source application.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.UserInputDataChannel">
            <summary>
            This interface is for channelized (on a per input channel basis) properties and methods for processing data transfers from a data source application.
            </summary>
            <remarks>
            This interface is contained by elements in a <see cref="T:Agilent.SA.Vsa.UserInputDataChannelCollection"/>.
            Properties set by the data source application reflect changes in the data sent to the vector signal analyzer.
            Property values retrieved by the data source application reflect expectations about the data to be processed by the vector signal analyzer.  These expectations depend on the current measurement configuration, and will change as the measurement configuration changes.
            Changes to read-only properties on this interface may be detected through <see cref="T:Agilent.SA.Vsa.UserInputChangeRegister"/>.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.UserInputDataChannel.ClearData">
            <summary>
            Clears unprocessed data.
            </summary>
            <remarks>
            Flushes data from the internal first-in-first-out (FIFO) buffers for a single channel and notifies the data consuming <see cref="T:Agilent.SA.Vsa.Measurement"/> of a gap in the data. This also clears
            <see cref="P:Agilent.SA.Vsa.UserInputDataChannel.IsOverloaded"/>.
            Data can be cleared for all channels using <see cref="M:Agilent.SA.Vsa.UserInputData.ClearData"/>.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.UserInputDataChannel.SendData(System.Single[])">
            <summary>
            Send data to be processed.
            </summary>
            <param name="dataSamples">Time series data block to be consumed by attached <see cref="T:Agilent.SA.Vsa.Measurement"/>.  If <see cref="P:Agilent.SA.Vsa.UserInputSetup.IsComplexData"/> is true, complex data is expected, and presented in this parameter as alternating real and imaginary values.</param>
            <remarks>
            Send data for this channel into first-in-first-out (FIFO) buffer to be consumed by attached <see cref="T:Agilent.SA.Vsa.Measurement"/>.
            Data can be sent for a multiple channels using <see cref="M:Agilent.SA.Vsa.UserInputData.SendData(System.Collections.Generic.IEnumerable{System.Single[]})"/> or <see cref="M:Agilent.SA.Vsa.UserInputData.SendData(System.Collections.Generic.IEnumerable{System.Single[]},System.Collections.Generic.IEnumerable{System.Int32})"/>.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputDataChannel.AcquisitionStatus">
            <summary>
            Gets or sets the acquisition status feedback from the data source application.
            </summary>
            <remarks>
            This value is set by the data source application
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputDataChannel.IsOverloaded">
            <summary>
            Gets or sets a value indicating whether a range overload has occurred.
            </summary>
            <remarks>
            This should be set true if a range overload occurred in the data that will be sent via <see cref="M:Agilent.SA.Vsa.UserInputDataChannel.SendData(System.Single[])"/>.
            This value is read and cleared each time data is consumed from the internal FIFO. This value is persistent and cannot be cleared via this property.
            Changes to this read-only property may be detected through <see cref="T:Agilent.SA.Vsa.UserInputChangeRegister"/>.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputDataChannel.RequiredSamples">
            <summary>
            Gets the amount of data required to update the current measurement.
            </summary>
            <remarks>
            Returns the number of floats (2x samples if <see cref="P:Agilent.SA.Vsa.UserInputSetup.IsComplexData"/> is true) that the data consuming <see cref="T:Agilent.SA.Vsa.Measurement"/> is waiting for to perform the
            next measurement update.  The value of this property changes as data is input via the <see cref="M:Agilent.SA.Vsa.UserInputDataChannel.SendData(System.Single[])"/> method. A zero or negative return
            value indicates that the data consuming <see cref="T:Agilent.SA.Vsa.Measurement"/> is not waiting for data points (if negative, a surplus is implied).
            With overlapped processing, this property will increment by a value that is generally less than the
            measurement block size after a measurement update.
            Changes to this read-only property may be detected through <see cref="T:Agilent.SA.Vsa.UserInputChangeRegister"/>.
            </remarks>
        </member>
        <member name="T:Agilent.SA.Vsa.UserInputSetupChannel">
            <summary>
            This interface is for channelized (on a per input channel basis) properties and methods for defining properties of the data source application.
            </summary>
            <remarks>
            This interface is contained by elements in a <see cref="T:Agilent.SA.Vsa.UserInputSetupChannelCollection"/>.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputSetupChannel.CenterFrequency">
            <summary>
            Gets or sets the center frequency of input data, in Hz, if providing complex data (zoomed).
            </summary>
            <remarks>
            The default value is 0.0 Hz.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputSetupChannel.Name">
            <summary>
            Gets or sets the name to associate with this channel of data from the data source application.
            </summary>
            <remarks>
            Defaults to "Ch{0}" where {0} is replaced by the index of this object in the collection, plus one.  Therefore the first channel in the collection defaults to "Ch1". 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputSetupChannel.Range">
            <summary>
            Gets or sets the input range to associate with this channel of data from the data source application.
            </summary>
            <remarks>
            Defaults to 1 Volt. Used for trace hints.
            </remarks>
        </member>
        <member name="T:Agilent.SA.Vsa.UserInputDataChannelCollection">
            <summary>
            This interface is for channelized (on a per input channel basis) properties and methods for processing data transfers from a data source application.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.UserInputDataChannelCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.UserInputDataChannelCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputDataChannelCollection.Item(System.Int32)">
            <summary>
            Gets item at the specified index.
            </summary>
            <param name="index">Zero-based index of item to get.</param>
            <returns>The element at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero or greater than or equal to the Count of the collection</exception>
        </member>
        <member name="T:Agilent.SA.Vsa.UserInputSetupChannelCollection">
            <summary>
            This interface is for channelized (on a per input channel basis) properties and methods for defining properties of the data source application.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.UserInputSetupChannelCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.UserInputSetupChannelCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputSetupChannelCollection.Item(System.Int32)">
            <summary>
            Gets item at the specified index.
            </summary>
            <param name="index">Zero-based index of item to get.</param>
            <returns>The item at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero or greater than or equal to the Count of the collection</exception>
        </member>
        <member name="T:Agilent.SA.Vsa.UserInputSetup">
            <summary>
            Contains properties and methods to define properties of the data source application.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.UserInputSetup.ApplyChanges">
            <summary>
            Processed any pending changes.
            </summary>
            <remarks>
            If <see cref="P:Agilent.SA.Vsa.UserInputSetup.IsImmediateChangesEnabled"/> is true, changes are processed immediately, and this method will have no affect.
            Processing changes has the affect of causing the data consuming <see cref="T:Agilent.SA.Vsa.Measurement"/> to be preset to a default state.
            It will also cause any data in the internal buffers to be cleared.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.UserInputSetup.SetFrequencyParameters(System.Boolean,System.Double,System.Double)">
            <summary>
            Sets frequency parameters.
            </summary>
            <remarks>
            Using this method is equivalent to setting the <see cref="P:Agilent.SA.Vsa.UserInputSetup.IsComplexData"/>, <see cref="P:Agilent.SA.Vsa.UserInputSetup.CenterFrequency"/>, and <see cref="P:Agilent.SA.Vsa.UserInputSetup.SampleRate"/> properties simultaneously.
            This sets properties for all channels.  Use <see cref="P:Agilent.SA.Vsa.UserInputSetup.Channels"/> to get or set properties of individual channels.
            </remarks>
            <param name="isComplexData">Specifies if complex data will be provided by data source application (sometimes referred to as Zoom mode when center frequency is specified as non-zero.)</param>
            <param name="centerFrequency">Specifies center frequency the data consuming <see cref="T:Agilent.SA.Vsa.Measurement"/> should assume for data provided by data source application.</param>
            <param name="sampleRate">Specifies sample rate the data consuming <see cref="T:Agilent.SA.Vsa.Measurement"/> should assume for data provided by data source application.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.UserInputSetup.SetFrequencyParameters(System.Boolean,System.Double,System.Double,System.Double)">
            <summary>
            Sets frequency parameters.
            </summary>
            <remarks>
            Using this method is equivalent to setting the <see cref="P:Agilent.SA.Vsa.UserInputSetup.IsComplexData"/>, <see cref="P:Agilent.SA.Vsa.UserInputSetup.CenterFrequency"/>, <see cref="P:Agilent.SA.Vsa.UserInputSetup.SampleRate"/>, and <see cref="P:Agilent.SA.Vsa.UserInputSetup.Bandwidth"/> properties simultaneously.
            This sets properties for all channels.  Use <see cref="P:Agilent.SA.Vsa.UserInputSetup.Channels"/> to get or set properties of individual channels.
            </remarks>
            <param name="isComplexData">Specifies if complex data will be provided by data source application (sometimes referred to as Zoom mode when center frequency is specified as non-zero.)</param>
            <param name="centerFrequency">Specifies center frequency the data consuming <see cref="T:Agilent.SA.Vsa.Measurement"/> should assume for data provided by data source application.</param>
            <param name="sampleRate">Specifies sample rate the data consuming <see cref="T:Agilent.SA.Vsa.Measurement"/> should assume for data provided by data source application.</param>
            <param name="bandwidth">Specifies the alias-protected bandwidth the data consuming <see cref="T:Agilent.SA.Vsa.Measurement"/> should assume for data provided by data source application (maximum allowed span).</param>
            <version>18.0</version>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputSetup.IsEnableChanges">
            <summary>
            Gets or sets a value indicating whether property changes should be processed immediately.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputSetup.IsImmediateChangesEnabled">
            <summary>
            Gets or sets a value indicating whether property changes should be processed immediately.
            </summary>
            <summary>
            If false, <see cref="M:Agilent.SA.Vsa.UserInputSetup.ApplyChanges"/> should be called by the data source application to initiate processing of property changes.
            Default value is false. If true, property changes will be processed immediately.
            Processing changes has the affect of causing the data consuming <see cref="T:Agilent.SA.Vsa.Measurement"/> to be preset to a default state.
            It will also cause any data in the internal buffers to be cleared.
            </summary>
            <version>15.00</version>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputSetup.Bandwidth">
            <summary>
            Gets or sets the alias-protected bandwidth (maximum span) the data consuming <see cref="T:Agilent.SA.Vsa.Measurement"/> should assume for data provided by data source application.
            </summary>
            <remarks>
            The bandwidth defaults to <see cref="P:Agilent.SA.Vsa.UserInputSetup.SampleRate"/> divided by 1.28 for <see cref="P:Agilent.SA.Vsa.UserInputSetup.IsComplexData"/> true, or 2.56 if false. The bandwidth is reset to default whenever <see cref="P:Agilent.SA.Vsa.UserInputSetup.SampleRate"/> or <see cref="P:Agilent.SA.Vsa.UserInputSetup.IsComplexData"/> is set.
            </remarks>
            <seealso cref="M:Agilent.SA.Vsa.UserInputSetup.SetFrequencyParameters(System.Boolean,System.Double,System.Double,System.Double)"/>
            <version>18.0</version>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputSetup.CaptureSizeMaximum">
            <summary>
            Gets or sets whether the input data will have gaps, this is the minimum gap-free length that will be available after each gap.
            </summary>
            <remarks>
            This limits the maximum recording length and time length (block size). The size is in samples (not
            floats). Changing this property during a measurement stops the measurement.
            Defaults to <see cref="F:System.Double.MaxValue"/>. (Current implementation limits to <see cref="F:System.Int32.MaxValue"/>.)
            Setting this value to 300 or less can result in unexpected behavior.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputSetup.CenterFrequency">
            <summary>
            Gets or sets the center frequency the data consuming <see cref="T:Agilent.SA.Vsa.Measurement"/> should assume for data provided by data source application.
            </summary>
            <remarks>
            This sets properties for all channels, and gets the property value of the first channel.  Use <see cref="P:Agilent.SA.Vsa.UserInputSetup.Channels"/> to get or set properties of individual channels.
            </remarks>
            <seealso cref="M:Agilent.SA.Vsa.UserInputSetup.SetFrequencyParameters(System.Boolean,System.Double,System.Double,System.Double)"/>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputSetup.IsComplexData">
            <summary>
            Gets or sets a value indicating whether complex data will be provided by data source application.
            </summary>
            <remarks>
            This is sometimes referred to as Zoom mode when center frequency is specified as non-zero. Changing this property resets <see cref="P:Agilent.SA.Vsa.UserInputSetup.Bandwidth"/> to its default value.
            </remarks>
            <seealso cref="M:Agilent.SA.Vsa.UserInputSetup.SetFrequencyParameters(System.Boolean,System.Double,System.Double,System.Double)"/>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputSetup.IsContinuousCapable">
            <summary>
            Gets or sets a value indicating whether continuous acquisitions are supported by data source application. 
            </summary>
            <remarks>
            When true, overlapped processing is enabled. When false, block mode acquisition is implied, and the data 
            consuming <see cref="T:Agilent.SA.Vsa.Measurement"/> assumes no continuity between blocks of transferred data. Default is true.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputSetup.IsTriggeredCapable">
            <summary>
            Gets or sets a value indicating whether data source application supports triggered data acquisitions.
            </summary>
            <remarks>
            Defaults to false.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputSetup.Range">
            <summary>
            Gets or sets the input range to associate with data from the data source application.
            </summary>
            <remarks>
            Defaults to 1 Volt. Used for trace hints.
            This sets properties for all channels, and gets the property value of the first channel.  Use <see cref="P:Agilent.SA.Vsa.UserInputSetup.Channels"/> to get or set properties of individual channels. 
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputSetup.SampleRate">
            <summary>
            Gets or sets the sample rate the data consuming <see cref="T:Agilent.SA.Vsa.Measurement"/> should assume for data provided by data source application
            </summary>
            <remarks> Changing this property resets <see cref="P:Agilent.SA.Vsa.UserInputSetup.Bandwidth"/> to its default value.</remarks>
            <seealso cref="M:Agilent.SA.Vsa.UserInputSetup.SetFrequencyParameters(System.Boolean,System.Double,System.Double,System.Double)"/>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputSetup.TriggerDelayMaximum">
            <summary>
            Gets or sets the maximum trigger delay, in seconds, the data source application is capable of configuring.
            </summary>
            <remarks>
            Defaults to 0.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputSetup.TriggerDelayMinimum">
            <summary>
            Gets or sets the minimum trigger delay, in seconds, the data source application is capable of configuring.
            </summary>
            <remarks>
            Typically this is a negative (pre-trigger) number. This defaults to 0.
            </remarks>
        </member>
        <member name="P:Agilent.SA.Vsa.UserInputSetup.Channels">
            <summary>
            Gets an interface to channelized (on a per input channel basis) properties and methods for defining properties of the data source application.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.VectorMeasurement">
            <summary>
            The class defines the basic vector measurement. It defines no members.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.VectorMeasurement.CastToExtensionType(System.Object)">
            <summary>
            This method casts the supplied object to the <see cref="T:Agilent.SA.Vsa.MeasurementExtension"/> type. Some
            tools are unable to use the generic methods provided on <see cref="T:Agilent.SA.Vsa.Measurement"/> class so
            this is provided as an alternative.
            </summary>
            <param name="extension">The object to be cast to the measurement extension type.</param>
            <returns>A correctly cast handle of type <see cref="T:Agilent.SA.Vsa.MeasurementExtension"/>, or
            null if the cast failed.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.VectorMeasurement.ExtensionType">
            <summary>
            Returns the type for instances this measurement extension. Some
            tools are unable to use the generic methods provided on <see cref="T:Agilent.SA.Vsa.Measurement"/> class so
            this is provided as an alternative.
            </summary>
            <returns>A <see cref="T:System.Type"/> object for the <see cref="T:Agilent.SA.Vsa.MeasurementExtension"/> type.</returns>
        </member>
        <member name="T:Agilent.SA.VsaImplementation.KeyHelper">
            <summary>
            Implements some helper functions for generating state keys.
            </summary>
        </member>
        <member name="M:Agilent.SA.VsaImplementation.KeyHelper.KeyChannel(System.String,System.Int32)">
            <summary>
            Generates a channelized state key.
            </summary>
            <param name="key">The key name.</param>
            <param name="channel">Zero based channel number.</param>
            <returns>The channelized state key name.</returns>
        </member>
        <member name="M:Agilent.SA.VsaImplementation.KeyHelper.KeyTrace(System.String,System.Int32)">
            <summary>
            Generates a state key for a given trace.
            </summary>
            <param name="key">The key name.</param>
            <param name="trace">Zero based index of the trace.</param>
            <returns>The state key name for the specified trace.</returns>
        </member>
        <member name="T:Agilent.SA.Vsa.LogicalChannelOperation">
            <summary>
            Describes the operation performed on the individual input channels to form a logical channel.  
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.LogicalChannelOperation.None">
            <summary>
            Normal 1 to 1 mapping of Logical Channel to Input Channel.  The input channel
            may come from real only or complex IQ pairs IQ data.
            </summary>
        </member>
        <member name="F:Agilent.SA.Vsa.LogicalChannelOperation.IQ">
            <summary>
            I+jQ by doing InputChannelX + j* InputChannelY.  
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.LogicalChannelId">
            <summary>
            Logical channel identification used to specify a logical channel.
            </summary>
            <remarks>
            <para>
            The <see cref="M:Agilent.SA.Vsa.Input.ChangeLogicalChannels(Agilent.SA.Vsa.LogicalChannelId[])"/> method takes an argument(s) of this structure in order to specify 
            specific channels to use.  Each logical channel object in the <see cref="P:Agilent.SA.Vsa.Input.LogicalChannels"/> collection
            has an Id property that uses this structure.
            </para>
            <para>
            The structure uniquely identifies a specific logical channel for the current hardware configuration.  This identification is unique within the context of the
            kind of hardware configuration being used.  The value of this structure may usually be used with different models of instruments as long as those instruments
            are from the same family or series.  However, a LogicalChannelId from one kind of instrument may mean something totally different in another kind of 
            instrument.  
            </para>
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.LogicalChannelId.#ctor(Agilent.SA.Vsa.LogicalChannelOperation,Agilent.SA.Vsa.ChannelId[])">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.LogicalChannelId"/> struct that contains the specified operation and ChannelIds.
            </summary>
            <param name="operation">The operation to perform when combining the input channels.</param>
            <param name="channelIds">List of input channels that are used in this logical channel.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.LogicalChannelId.#ctor(Agilent.SA.Vsa.LogicalChannelOperation,System.Collections.Generic.IEnumerable{Agilent.SA.Vsa.ChannelId})">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.LogicalChannelId"/> struct that contains the specified operation and ChannelIds.
            </summary>
            <param name="operation">The operation to perform when combining the input channels.</param>
            <param name="channelIds">List of input channels that are used in this logical channel.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.LogicalChannelId.ToString">
            <summary>
            Returns a String representation of the LogicalChannelId. (Overrides <see cref="M:System.ValueType.ToString"/>.)
            </summary>
            <returns>A string representation of the current LogicalChannelId structure.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.LogicalChannelId.op_Equality(Agilent.SA.Vsa.LogicalChannelId,Agilent.SA.Vsa.LogicalChannelId)">
            <summary>
            Compares two LogicalChannelId structures for equality.
            </summary>
            <param name="left">The first instance of LogicalChannelId to compare.</param>
            <param name="right">The second instance of LogicalChannelId to compare.</param>
            <returns>true if the two instances of LogicalChannelId have the same Operation and ChannelIds; otherwise, false.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.LogicalChannelId.op_Inequality(Agilent.SA.Vsa.LogicalChannelId,Agilent.SA.Vsa.LogicalChannelId)">
            <summary>
            Compares two LogicalChannelId structures to determine if they are not equal.
            </summary>
            <param name="left">The first instance of LogicalChannelId to compare.</param>
            <param name="right">The second instance of LogicalChannelId to compare.</param>
            <returns>true if the two instances of LogicalChannelId do not have the same Operation and ChannelIds; otherwise, false.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.LogicalChannelId.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current LogicalChannelId instance. 
            (Overrides <see cref="M:System.ValueType.Equals(System.Object)"/>.)		 
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>true if the specified object has the same Operation and ChannelIds as the current instance; otherwise, false.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.LogicalChannelId.GetHashCode">
            <summary>
            Gets a hash code for the LogicalChannelId. (Overrides <see cref="M:System.ValueType.GetHashCode"/>.)
            </summary>
            <returns>A hash code for the LogicalChannelId.</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.LogicalChannelId.Equals(Agilent.SA.Vsa.LogicalChannelId)">
            <summary>
            Determines whether the specified LogicalChannelId is equal to the current LogicalChannelId instance.		 
            </summary>
            <param name="other">The LogicalChannelId structure to compare with the current instance.</param>
            <returns>true if the specified LogicalChannelId has the same Operation and ChannelIds as the current instance; otherwise, false.</returns>
        </member>
        <member name="P:Agilent.SA.Vsa.LogicalChannelId.Operation">
            <summary>
            Gets the operation performed on channels within the logical channel.
            </summary>
        </member>
        <member name="P:Agilent.SA.Vsa.LogicalChannelId.ChannelIds">
            <summary>
            Gets the identifiers of the individual input channels used in this logical channel.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.RemotePropertyChangedEventArgs">
            <summary>
            This class is a serializable version of the <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> class, intended for
            internal use to propagate <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> events across the .NET
            remoting boundary.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.RemotePropertyChangedEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.RemotePropertyChangedEventArgs"/> class.
            </summary>
            <param name="propertyName">The name of the property whose value has changed.</param>
        </member>
        <member name="P:Agilent.SA.Vsa.RemotePropertyChangedEventArgs.PropertyName">
            <summary>
            Gets the name of the property value whose name has changed.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.NotifyPropertyChangedWrapper">
            <summary>
            This class implements a wrapper to allow <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/> events to be propagated across the .NET remoting
            boundary.
            </summary>
            <remarks>
            This wrapper is required as an intermediary between the client and server sides of the remoting
            boundary so that the server does not have to have type knowledge of the client.
            </remarks>
            <example>
            The following code snippet shows how to monitor the <see cref="T:Agilent.SA.Vsa.Application"/> object for <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged"/>
            events to detect when the <see cref="P:Agilent.SA.Vsa.Application.IsVisible"/> property goes false.
            <code lang="CS">
            using (var wrapper = new NotifyPropertyChangedWrapper(app, OnApplicationPropertyChanged))
            {
            	// other code....
            }
            
            void OnApplicationPropertyChanged(object sender, PropertyChangedEventArgs e)
            {
            	if (e.PropertyName == "IsVisible")
            	{
            		Vsa.Application app = sender as Vsa.Application;
            		if (app.IsVisible == false)
            		{
            			// other code...
            		}
            	}
            }
            </code>
            </example>
        </member>
        <member name="M:Agilent.SA.Vsa.NotifyPropertyChangedWrapper.#ctor(Agilent.SA.Vsa.IRemoteNotifyPropertyChanged)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.NotifyPropertyChangedWrapper"/> class that will monitor the supplied
            remote object for <see cref="E:Agilent.SA.Vsa.NotifyPropertyChangedWrapper.PropertyChanged"/> events.
            </summary>
            <param name="obj">The remote object to monitor for <see cref="E:Agilent.SA.Vsa.NotifyPropertyChangedWrapper.PropertyChanged"/> events.</param>
            <remarks>
            When using this constructor, monitoring of the remote object will not start until a handler is connected
            to the <see cref="E:Agilent.SA.Vsa.NotifyPropertyChangedWrapper.PropertyChanged"/> event exposed by this wrapper.
            </remarks>
        </member>
        <member name="M:Agilent.SA.Vsa.NotifyPropertyChangedWrapper.#ctor(Agilent.SA.Vsa.IRemoteNotifyPropertyChanged,System.ComponentModel.PropertyChangedEventHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.NotifyPropertyChangedWrapper"/> class that will monitor the supplied
            remote object for <see cref="E:Agilent.SA.Vsa.NotifyPropertyChangedWrapper.PropertyChanged"/> events and call the supplied delegate when such events occur.
            </summary>
            <param name="obj">The remote object to monitor for <see cref="E:Agilent.SA.Vsa.NotifyPropertyChangedWrapper.PropertyChanged"/> events.</param>
            <param name="callback">A delegate of type <see cref="T:System.ComponentModel.PropertyChangedEventHandler"/> that will be
            invoked when any public property on <paramref name="obj"/> changes.</param>
            <version>14.00</version>
        </member>
        <member name="M:Agilent.SA.Vsa.NotifyPropertyChangedWrapper.InitializeLifetimeService">
            <summary>
            Controls the object lifetime.
            </summary>
            <returns>null (live "forever")</returns>
        </member>
        <member name="M:Agilent.SA.Vsa.NotifyPropertyChangedWrapper.ObjectRemotePropertyChangedHandler(System.Object,Agilent.SA.Vsa.RemotePropertyChangedEventArgs)">
            <summary>
            For internal use only.
            </summary>
            <param name="sender">The remote object sending the event.</param>
            <param name="e">The event details from the remote object.</param>
        </member>
        <member name="M:Agilent.SA.Vsa.NotifyPropertyChangedWrapper.Dispose">
            <summary>
            Notify the wrapper object that it should disconnect from the remote object.
            </summary>
        </member>
        <member name="E:Agilent.SA.Vsa.NotifyPropertyChangedWrapper.PropertyChanged">
            <summary>
            Event that indicates a property value changed.
            </summary>
        </member>
        <member name="T:Agilent.SA.VsaImplementation.StateKeyAttribute">
            <summary>
            This Attribute class is used to decorate properties and methods with the key for the state
            variable that is manipulated by the decorated member.
            </summary>
        </member>
        <member name="M:Agilent.SA.VsaImplementation.StateKeyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.VsaImplementation.StateKeyAttribute"/> class.
            </summary>
            <param name="key">The key name.</param>
        </member>
        <member name="P:Agilent.SA.VsaImplementation.StateKeyAttribute.Key">
            <summary>
            Gets the key name.
            </summary>
        </member>
        <member name="T:Agilent.SA.Vsa.UnitAttribute">
            <summary>
            Defines an attribute that can be used to indicate the unit of a property.
            </summary>
        </member>
        <member name="M:Agilent.SA.Vsa.UnitAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Agilent.SA.Vsa.UnitAttribute"/> class.
            </summary>
            <param name="unit">The unit of the property.</param>
        </member>
        <member name="P:Agilent.SA.Vsa.UnitAttribute.Unit">
            <summary>
            Gets the unit for the property.
            </summary>
        </member>
        <member name="T:System.ComponentModel.Composition.Hosting.ContainerExtender">
            <summary>
            The ContainerExtender class provides extension methods to allow the automatic creation of
            nested, scoped CompositionContainers in Glacier. Scoped CompositionContainers are used to allow
            a collection of affiliated parts to be correctly composed. For example, all the sub-objects of a
            Measurement object need to be able to import __their__ particular measurement rather than a single
            global measurement (since there can be more than one). As a result, when we create a new measurement,
            we create a separate container for it, populate it with all the parts that are measurement scoped,
            and then compose the new measurement using that container. When the measurement is destroyed, the
            associated container and all its parts can be destroyed as well.
            </summary>
            <remarks>
            See VsaCatalogExportProvider class for a more detailed description of this process.
            </remarks>
        </member>
        <member name="M:System.ComponentModel.Composition.Hosting.ContainerExtender.DisposeIfOwnedBy(System.ComponentModel.Composition.Hosting.CompositionContainer,System.Object)">
            <summary>
            This method allows the caller to dispose the container upon which it is invoked if the container
            is "owned" by the supplied object.
            </summary>
            <param name="container">The container to dispose.</param>
            <param name="owner">The owner whose container should be disposed.</param>
            <returns><value>true</value> if the container was disposed, <value>false</value> otherwise.</returns>
        </member>
        <member name="M:System.ComponentModel.Composition.Hosting.ContainerExtender.GetFilterContract(System.ComponentModel.Composition.Hosting.CompositionContainer)">
            <summary>
            Allows the caller to retrieve the contract name upon which the parts for the
            supplied container are being filtered.
            </summary>
            <param name="container">The container for which the filter contract name is desired.</param>
            <returns>The name of the filtering contract, or the empty string if the container's part
            list is unfiltered.</returns>
        </member>
        <member name="M:System.ComponentModel.Composition.Hosting.ContainerExtender.IsBeingDisposed(System.ComponentModel.Composition.Hosting.CompositionContainer)">
            <summary>
            This method allows a caller to determine if a container is being disposed. If so, the caller
            can possibly short-circuit the cleanup of exports from the container.
            </summary>
            <param name="container">The container to test.</param>
            <returns>True if a disposal is in progress, false otherwise.</returns>
        </member>
        <member name="M:System.ComponentModel.Composition.Hosting.ContainerExtender.SetFilterContract(System.ComponentModel.Composition.Hosting.CompositionContainer,System.String)">
            <summary>
            Allows the caller to establish the contract name on which this container's parts are
            being filtered.
            </summary>
            <param name="container">The container for which to establish the filter contract.</param>
            <param name="contractName">The name of the contract to associate with the supplied container.</param>
        </member>
        <member name="M:System.ComponentModel.Composition.Hosting.ContainerExtender.SetOwner(System.ComponentModel.Composition.Hosting.CompositionContainer,System.Object)">
            <summary>
            Allows the caller to establish an owner for this container.
            </summary>
            <param name="container">The container for which to establish the owner.</param>
            <param name="owner">The owner of the container.</param>
        </member>
        <member name="T:Agilent.SA.VsaInternal.IVisibility">
            <summary>
            Defines an interface for indicating whether a GUI is shown for the object.
            </summary>
        </member>
        <member name="P:Agilent.SA.VsaInternal.IVisibility.IsHidden">
            <summary>
            Gets a value indicating whether the object is hidden in the GUI.
            </summary>
        </member>
    </members>
</doc>
